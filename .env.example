# Environment Configuration Template
# Copy this file to .env and update with your settings

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Main database URL for PostgreSQL with asyncpg driver  
# SECURITY: Change the password in production!
DATABASE_URL=postgresql+asyncpg://chatter:CHANGE_THIS_PASSWORD@localhost:5432/chatter

# Database connection pool settings
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=30
DB_POOL_PRE_PING=true
DB_POOL_RECYCLE=3600

# =============================================================================
# VECTOR STORE CONFIGURATION
# =============================================================================

# Vector store type: pgvector, pinecone, qdrant, chromadb
VECTOR_STORE_TYPE=pgvector

# PGVector settings (when using pgvector)
PGVECTOR_COLLECTION_NAME=chatter_embeddings
PGVECTOR_EMBEDDING_DIMENSION=1536

# Pinecone settings (when using pinecone)
PINECONE_API_KEY=your_pinecone_api_key
PINECONE_ENVIRONMENT=your_pinecone_environment
PINECONE_INDEX_NAME=chatter-index

# Qdrant settings (when using qdrant)
QDRANT_URL=http://localhost:6333
QDRANT_API_KEY=your_qdrant_api_key
QDRANT_COLLECTION_NAME=chatter

# ChromaDB settings (when using chromadb)
CHROMADB_PERSIST_DIRECTORY=./data/chromadb
CHROMADB_COLLECTION_NAME=chatter

# =============================================================================
# MODEL REGISTRY CONFIGURATION
# =============================================================================

# Note: LLM providers, models, and configurations are now managed through
# the model registry system. Use the admin interface or API endpoints to
# configure providers and models instead of environment variables.

# =============================================================================
# EMBEDDING DIMENSIONAL REDUCTION SETTINGS
# =============================================================================

# Enable dimensional reduction for embeddings to work around pgvector limits
EMBEDDING_REDUCTION_ENABLED=false

# Target dimensions after reduction (must be <= 2000 for pgvector 0.6.x)
EMBEDDING_REDUCTION_TARGET_DIM=1536

# Reduction strategy: "reducer" (PCA/SVD) or "truncate" (simple truncation)
EMBEDDING_REDUCTION_STRATEGY=truncate

# Path to fitted dimensional reducer (joblib file)
EMBEDDING_REDUCER_PATH=

# Whether to L2-normalize vectors after reduction (recommended for cosine similarity)
EMBEDDING_REDUCTION_NORMALIZE=true

# =============================================================================
# AUTHENTICATION & SECURITY
# =============================================================================

# JWT Secret Key (generate with: openssl rand -hex 32)
# SECURITY: Generate a secure key and change this in production!
SECRET_KEY=CHANGE_THIS_SECRET_KEY_IN_PRODUCTION

# JWT Algorithm
ALGORITHM=HS256

# Access token expiration (in minutes)
ACCESS_TOKEN_EXPIRE_MINUTES=30

# Refresh token expiration (in days)
REFRESH_TOKEN_EXPIRE_DAYS=7

# Password hashing settings
BCRYPT_ROUNDS=12

# =============================================================================
# REDIS CONFIGURATION (Optional - for caching and rate limiting)
# =============================================================================

# Redis URL
REDIS_URL=redis://localhost:6379/0

# Redis connection pool settings
REDIS_MAX_CONNECTIONS=20
REDIS_SOCKET_TIMEOUT=5
REDIS_SOCKET_CONNECT_TIMEOUT=5

# Cache TTL settings (in seconds)
CACHE_TTL_SHORT=300      # 5 minutes
CACHE_TTL_MEDIUM=1800    # 30 minutes
CACHE_TTL_LONG=3600      # 1 hour

# =============================================================================
# API CONFIGURATION
# =============================================================================

# API Configuration
API_TITLE=Chatter API
API_DESCRIPTION=Advanced AI Chatbot Backend API Platform
API_VERSION=0.1.0
API_PREFIX=/api/v1

# CORS settings
CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
CORS_ALLOW_CREDENTIALS=true
CORS_ALLOW_METHODS=["*"]
CORS_ALLOW_HEADERS=["*"]

# Rate limiting (requests per minute)
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# File upload limits
MAX_FILE_SIZE=50485760    # 50MB in bytes
ALLOWED_FILE_TYPES=["pdf", "txt", "doc", "docx", "md", "html"]

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Enable structured JSON logging
LOG_JSON=false

# Enable debug logging for HTTP requests (WARNING: logs all request/response data)
DEBUG_HTTP_REQUESTS=false

# Enable debug logging for database queries
DEBUG_DATABASE_QUERIES=false

# Enable debug logging for LLM interactions
DEBUG_LLM_INTERACTIONS=false

# Log file path (optional - logs to stdout if not set)
LOG_FILE=

# =============================================================================
# MONITORING & METRICS
# =============================================================================

# Metrics endpoint path
METRICS_PATH=/metrics

# Enable health checks
ENABLE_HEALTH_CHECKS=true

# Health check interval (seconds)
HEALTH_CHECK_INTERVAL=30

# =============================================================================
# DOCUMENT PROCESSING
# =============================================================================

# Document processing settings
CHUNK_SIZE=1000
CHUNK_OVERLAP=200
MAX_CHUNKS_PER_DOCUMENT=1000

# Background processing
ENABLE_BACKGROUND_PROCESSING=true
BACKGROUND_WORKER_CONCURRENCY=4

# Document storage path
DOCUMENT_STORAGE_PATH=./data/documents

# =============================================================================
# LANGCHAIN/LANGGRAPH CONFIGURATION
# =============================================================================

# LangSmith (optional - for tracing and monitoring)
LANGCHAIN_TRACING_V2=false
LANGCHAIN_ENDPOINT=https://api.smith.langchain.com
LANGCHAIN_API_KEY=your_langchain_api_key
LANGCHAIN_PROJECT=chatter

# LangGraph settings
LANGGRAPH_CHECKPOINT_STORE=postgres  # postgres, memory
LANGGRAPH_MAX_ITERATIONS=50
LANGGRAPH_RECURSION_LIMIT=100

# =============================================================================
# MCP (Model Context Protocol) CONFIGURATION
# =============================================================================

# MCP server configuration
MCP_ENABLED=true
MCP_SERVERS=["filesystem", "browser", "calculator"]

# MCP tool timeout (seconds)
MCP_TOOL_TIMEOUT=30

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Development mode
DEBUG=false

# Auto-reload on code changes (development only)
RELOAD=false

# Number of worker processes
WORKERS=1

# Bind host and port
HOST=0.0.0.0
PORT=8000

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test database URL (used during testing)
# SECURITY: Change the password in production test environment!
TEST_DATABASE_URL=postgresql+asyncpg://chatter:CHANGE_THIS_PASSWORD@localhost:5432/chatter_test

# Test Redis URL
TEST_REDIS_URL=redis://localhost:6379/1

# Skip slow tests
SKIP_SLOW_TESTS=false

# =============================================================================
# PRODUCTION SETTINGS
# =============================================================================

# Environment
ENVIRONMENT=development  # development, staging, production

# Enable SSL redirect in production
FORCE_HTTPS=false

# Trusted hosts (comma-separated)
TRUSTED_HOSTS=localhost,127.0.0.1

# Security headers
SECURITY_HEADERS_ENABLED=true

