name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: chatter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set up test environment
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/chatter_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test_secret_key_for_ci_that_is_long_enough_to_pass_validation
        ENVIRONMENT: testing
      run: |
        # Set environment variables for testing
        echo "DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/chatter_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key_for_ci_that_is_long_enough_to_pass_validation" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Run linting with ruff
      run: |
        ruff check chatter/ --output-format=github

    - name: Run code formatting check with black
      run: |
        black --check chatter/ tests/

    - name: Run type checking with mypy
      run: |
        mypy chatter/ --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on mypy errors initially

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/chatter_test
        REDIS_URL: redis://localhost:6379/1
        SECRET_KEY: test_secret_key_for_ci_that_is_long_enough_to_pass_validation
        ENVIRONMENT: testing
      run: |
        pytest tests/ -v --cov=chatter --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run bandit security linter
      run: |
        bandit -r chatter/ -f json -o bandit-report.json || true
        bandit -r chatter/ -ll

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  config-validation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test configuration validation with secure settings
      env:
        DATABASE_URL: postgresql+asyncpg://secure_user:very_secure_password_123@localhost:5432/chatter
        SECRET_KEY: very_secure_secret_key_that_is_definitely_long_enough_for_production_use_123456
        ENVIRONMENT: production
      run: |
        python -c "
        from chatter.utils.config_validator import validate_startup_configuration
        try:
            validate_startup_configuration()
            print('✅ Configuration validation passed with secure settings')
        except Exception as e:
            print(f'❌ Configuration validation failed: {e}')
            exit(1)
        "

    - name: Test configuration validation catches insecure settings
      env:
        DATABASE_URL: postgresql+asyncpg://chatter:CHANGE_THIS_PASSWORD@localhost:5432/chatter
        SECRET_KEY: CHANGE_THIS_SECRET_KEY_IN_PRODUCTION
        ENVIRONMENT: production
      run: |
        python -c "
        from chatter.utils.config_validator import validate_startup_configuration, ConfigurationError
        try:
            validate_startup_configuration()
            print('❌ Configuration validation should have failed with insecure settings')
            exit(1)
        except ConfigurationError:
            print('✅ Configuration validation correctly rejected insecure settings')
        except Exception as e:
            print(f'❌ Unexpected error: {e}')
            exit(1)
        "