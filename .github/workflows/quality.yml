name: Code Quality and Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

jobs:
  backend-analysis:
    runs-on: ubuntu-latest
    name: Backend Python Analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run Ruff (linting)
      run: |
        ruff check chatter tests scripts --output-format=github
      continue-on-error: true
    
    - name: Run Black (formatting check)
      run: |
        black --check chatter tests scripts
      continue-on-error: true
    
    - name: Run isort (import sorting check)
      run: |
        isort --check-only chatter tests scripts
      continue-on-error: true
    
    - name: Run MyPy (type checking)
      run: |
        mypy chatter
      continue-on-error: true
    
    - name: Run Bandit (security analysis)
      run: |
        bandit -r chatter -f json -o bandit-report.json
        bandit -r chatter
      continue-on-error: true
    
    - name: Run Safety (dependency vulnerability check)
      run: |
        safety scan --output json --save-json safety-report.json || true
        safety scan || true
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  frontend-analysis:
    runs-on: ubuntu-latest
    name: Frontend TypeScript/React Analysis
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run TypeScript type checking
      run: |
        cd frontend
        npm run type-check
      continue-on-error: true
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint:check
      continue-on-error: true
    
    - name: Run Prettier (formatting check)
      run: |
        cd frontend
        npm run format:check
      continue-on-error: true
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test
      continue-on-error: true
    
    - name: Security audit
      run: |
        cd frontend
        npm audit --audit-level high || true
      continue-on-error: true

  code-coverage:
    runs-on: ubuntu-latest
    name: Code Coverage Analysis
    needs: [backend-analysis]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: chatter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/chatter_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-testing-only
        ENVIRONMENT: test
      run: |
        pytest --cov=chatter --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: coverage.xml
        flags: backend
        name: codecov-backend
      continue-on-error: true
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30

  quality-summary:
    runs-on: ubuntu-latest
    name: Quality Summary
    needs: [backend-analysis, frontend-analysis, code-coverage]
    if: always()
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Create quality summary
      run: |
        echo "# Code Quality Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Analysis Results" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-analysis.result }}" == "success" ]; then
          echo "✅ **Backend Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backend Analysis**: Failed or had issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.frontend-analysis.result }}" == "success" ]; then
          echo "✅ **Frontend Analysis**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Frontend Analysis**: Failed or had issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-coverage.result }}" == "success" ]; then
          echo "✅ **Code Coverage**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Coverage**: Failed or had issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Available Reports" >> $GITHUB_STEP_SUMMARY
        echo "- 🔒 Security Reports (Bandit & Safety)" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below for detailed reports." >> $GITHUB_STEP_SUMMARY