/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ABTestActionResponse } from '../models';
// @ts-ignore
import type { ABTestCreateRequest } from '../models';
// @ts-ignore
import type { ABTestDeleteResponse } from '../models';
// @ts-ignore
import type { ABTestListResponse } from '../models';
// @ts-ignore
import type { ABTestMetricsResponse } from '../models';
// @ts-ignore
import type { ABTestResponse } from '../models';
// @ts-ignore
import type { ABTestResultsResponse } from '../models';
// @ts-ignore
import type { ABTestUpdateRequest } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { TestStatus } from '../models';
// @ts-ignore
import type { TestType } from '../models';
/**
 * ABTestingApi - axios parameter creator
 * @export
 */
export const ABTestingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Complete Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeAbTestApiV1AbTestsTestIdCompletePost: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('completeAbTestApiV1AbTestsTestIdCompletePost', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/complete`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
         * @summary Create Ab Test
         * @param {ABTestCreateRequest} aBTestCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAbTestApiV1AbTestsPost: async (aBTestCreateRequest: ABTestCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aBTestCreateRequest' is not null or undefined
            assertParamExists('createAbTestApiV1AbTestsPost', 'aBTestCreateRequest', aBTestCreateRequest)
            const localVarPath = `/api/v1/ab-tests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aBTestCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
         * @summary Delete Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAbTestApiV1AbTestsTestIdDelete: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('deleteAbTestApiV1AbTestsTestIdDelete', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
         * @summary End Ab Test
         * @param {string} testId 
         * @param {string} winnerVariant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endAbTestApiV1AbTestsTestIdEndPost: async (testId: string, winnerVariant: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('endAbTestApiV1AbTestsTestIdEndPost', 'testId', testId)
            // verify required parameter 'winnerVariant' is not null or undefined
            assertParamExists('endAbTestApiV1AbTestsTestIdEndPost', 'winnerVariant', winnerVariant)
            const localVarPath = `/api/v1/ab-tests/{test_id}/end`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (winnerVariant !== undefined) {
                localVarQueryParameter['winner_variant'] = winnerVariant;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
         * @summary Get Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestApiV1AbTestsTestIdGet: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getAbTestApiV1AbTestsTestIdGet', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
         * @summary Get Ab Test Metrics
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestMetricsApiV1AbTestsTestIdMetricsGet: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getAbTestMetricsApiV1AbTestsTestIdMetricsGet', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/metrics`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
         * @summary Get Ab Test Performance
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/performance`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
         * @summary Get Ab Test Results
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestResultsApiV1AbTestsTestIdResultsGet: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getAbTestResultsApiV1AbTestsTestIdResultsGet', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/results`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
         * @summary List Ab Tests
         * @param {TestStatus | null} [status] 
         * @param {TestType | null} [testType] 
         * @param {Array<string> | null} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbTestsApiV1AbTestsGet: async (status?: TestStatus | null, testType?: TestType | null, requestBody?: Array<string> | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/ab-tests/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (testType !== undefined) {
                localVarQueryParameter['test_type'] = testType;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Pause Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAbTestApiV1AbTestsTestIdPausePost: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('pauseAbTestApiV1AbTestsTestIdPausePost', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/pause`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Start Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAbTestApiV1AbTestsTestIdStartPost: async (testId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('startAbTestApiV1AbTestsTestIdStartPost', 'testId', testId)
            const localVarPath = `/api/v1/ab-tests/{test_id}/start`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
         * @summary Update Ab Test
         * @param {string} testId 
         * @param {ABTestUpdateRequest} aBTestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAbTestApiV1AbTestsTestIdPut: async (testId: string, aBTestUpdateRequest: ABTestUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('updateAbTestApiV1AbTestsTestIdPut', 'testId', testId)
            // verify required parameter 'aBTestUpdateRequest' is not null or undefined
            assertParamExists('updateAbTestApiV1AbTestsTestIdPut', 'aBTestUpdateRequest', aBTestUpdateRequest)
            const localVarPath = `/api/v1/ab-tests/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aBTestUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ABTestingApi - functional programming interface
 * @export
 */
export const ABTestingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ABTestingApiAxiosParamCreator(configuration)
    return {
        /**
         * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Complete Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeAbTestApiV1AbTestsTestIdCompletePost(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeAbTestApiV1AbTestsTestIdCompletePost(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.completeAbTestApiV1AbTestsTestIdCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
         * @summary Create Ab Test
         * @param {ABTestCreateRequest} aBTestCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAbTestApiV1AbTestsPost(aBTestCreateRequest: ABTestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAbTestApiV1AbTestsPost(aBTestCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.createAbTestApiV1AbTestsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
         * @summary Delete Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAbTestApiV1AbTestsTestIdDelete(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAbTestApiV1AbTestsTestIdDelete(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.deleteAbTestApiV1AbTestsTestIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
         * @summary End Ab Test
         * @param {string} testId 
         * @param {string} winnerVariant 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endAbTestApiV1AbTestsTestIdEndPost(testId: string, winnerVariant: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endAbTestApiV1AbTestsTestIdEndPost(testId, winnerVariant, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.endAbTestApiV1AbTestsTestIdEndPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
         * @summary Get Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbTestApiV1AbTestsTestIdGet(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbTestApiV1AbTestsTestIdGet(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.getAbTestApiV1AbTestsTestIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
         * @summary Get Ab Test Metrics
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbTestMetricsApiV1AbTestsTestIdMetricsGet(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbTestMetricsApiV1AbTestsTestIdMetricsGet(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.getAbTestMetricsApiV1AbTestsTestIdMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
         * @summary Get Ab Test Performance
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
         * @summary Get Ab Test Results
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAbTestResultsApiV1AbTestsTestIdResultsGet(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAbTestResultsApiV1AbTestsTestIdResultsGet(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.getAbTestResultsApiV1AbTestsTestIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
         * @summary List Ab Tests
         * @param {TestStatus | null} [status] 
         * @param {TestType | null} [testType] 
         * @param {Array<string> | null} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAbTestsApiV1AbTestsGet(status?: TestStatus | null, testType?: TestType | null, requestBody?: Array<string> | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAbTestsApiV1AbTestsGet(status, testType, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.listAbTestsApiV1AbTestsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Pause Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseAbTestApiV1AbTestsTestIdPausePost(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseAbTestApiV1AbTestsTestIdPausePost(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.pauseAbTestApiV1AbTestsTestIdPausePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Start Ab Test
         * @param {string} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAbTestApiV1AbTestsTestIdStartPost(testId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAbTestApiV1AbTestsTestIdStartPost(testId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.startAbTestApiV1AbTestsTestIdStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
         * @summary Update Ab Test
         * @param {string} testId 
         * @param {ABTestUpdateRequest} aBTestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAbTestApiV1AbTestsTestIdPut(testId: string, aBTestUpdateRequest: ABTestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ABTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAbTestApiV1AbTestsTestIdPut(testId, aBTestUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ABTestingApi.updateAbTestApiV1AbTestsTestIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ABTestingApi - factory interface
 * @export
 */
export const ABTestingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ABTestingApiFp(configuration)
    return {
        /**
         * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Complete Ab Test
         * @param {ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters: ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse> {
            return localVarFp.completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
         * @summary Create Ab Test
         * @param {ABTestingApiCreateAbTestApiV1AbTestsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAbTestApiV1AbTestsPost(requestParameters: ABTestingApiCreateAbTestApiV1AbTestsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse> {
            return localVarFp.createAbTestApiV1AbTestsPost(requestParameters.aBTestCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
         * @summary Delete Ab Test
         * @param {ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAbTestApiV1AbTestsTestIdDelete(requestParameters: ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestDeleteResponse> {
            return localVarFp.deleteAbTestApiV1AbTestsTestIdDelete(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
         * @summary End Ab Test
         * @param {ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endAbTestApiV1AbTestsTestIdEndPost(requestParameters: ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse> {
            return localVarFp.endAbTestApiV1AbTestsTestIdEndPost(requestParameters.testId, requestParameters.winnerVariant, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
         * @summary Get Ab Test
         * @param {ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestApiV1AbTestsTestIdGet(requestParameters: ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse> {
            return localVarFp.getAbTestApiV1AbTestsTestIdGet(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
         * @summary Get Ab Test Metrics
         * @param {ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters: ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestMetricsResponse> {
            return localVarFp.getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
         * @summary Get Ab Test Performance
         * @param {ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters: ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
         * @summary Get Ab Test Results
         * @param {ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters: ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResultsResponse> {
            return localVarFp.getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
         * @summary List Ab Tests
         * @param {ABTestingApiListAbTestsApiV1AbTestsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbTestsApiV1AbTestsGet(requestParameters: ABTestingApiListAbTestsApiV1AbTestsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ABTestListResponse> {
            return localVarFp.listAbTestsApiV1AbTestsGet(requestParameters.status, requestParameters.testType, requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Pause Ab Test
         * @param {ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters: ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse> {
            return localVarFp.pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
         * @summary Start Ab Test
         * @param {ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAbTestApiV1AbTestsTestIdStartPost(requestParameters: ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse> {
            return localVarFp.startAbTestApiV1AbTestsTestIdStartPost(requestParameters.testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
         * @summary Update Ab Test
         * @param {ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAbTestApiV1AbTestsTestIdPut(requestParameters: ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse> {
            return localVarFp.updateAbTestApiV1AbTestsTestIdPut(requestParameters.testId, requestParameters.aBTestUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ABTestingApi - interface
 * @export
 * @interface ABTestingApi
 */
export interface ABTestingApiInterface {
    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Complete Ab Test
     * @param {ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters: ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse>;

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * @summary Create Ab Test
     * @param {ABTestingApiCreateAbTestApiV1AbTestsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    createAbTestApiV1AbTestsPost(requestParameters: ABTestingApiCreateAbTestApiV1AbTestsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse>;

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * @summary Delete Ab Test
     * @param {ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    deleteAbTestApiV1AbTestsTestIdDelete(requestParameters: ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestDeleteResponse>;

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * @summary End Ab Test
     * @param {ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    endAbTestApiV1AbTestsTestIdEndPost(requestParameters: ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse>;

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * @summary Get Ab Test
     * @param {ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestApiV1AbTestsTestIdGet(requestParameters: ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse>;

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * @summary Get Ab Test Metrics
     * @param {ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters: ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestMetricsResponse>;

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * @summary Get Ab Test Performance
     * @param {ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters: ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * @summary Get Ab Test Results
     * @param {ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters: ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResultsResponse>;

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * @summary List Ab Tests
     * @param {ABTestingApiListAbTestsApiV1AbTestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    listAbTestsApiV1AbTestsGet(requestParameters?: ABTestingApiListAbTestsApiV1AbTestsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestListResponse>;

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Pause Ab Test
     * @param {ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters: ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse>;

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Start Ab Test
     * @param {ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    startAbTestApiV1AbTestsTestIdStartPost(requestParameters: ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestActionResponse>;

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * @summary Update Ab Test
     * @param {ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    updateAbTestApiV1AbTestsTestIdPut(requestParameters: ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ABTestResponse>;

}

/**
 * Request parameters for completeAbTestApiV1AbTestsTestIdCompletePost operation in ABTestingApi.
 * @export
 * @interface ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest
 */
export interface ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePost
     */
    readonly testId: string
}

/**
 * Request parameters for createAbTestApiV1AbTestsPost operation in ABTestingApi.
 * @export
 * @interface ABTestingApiCreateAbTestApiV1AbTestsPostRequest
 */
export interface ABTestingApiCreateAbTestApiV1AbTestsPostRequest {
    /**
     * 
     * @type {ABTestCreateRequest}
     * @memberof ABTestingApiCreateAbTestApiV1AbTestsPost
     */
    readonly aBTestCreateRequest: ABTestCreateRequest
}

/**
 * Request parameters for deleteAbTestApiV1AbTestsTestIdDelete operation in ABTestingApi.
 * @export
 * @interface ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest
 */
export interface ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiDeleteAbTestApiV1AbTestsTestIdDelete
     */
    readonly testId: string
}

/**
 * Request parameters for endAbTestApiV1AbTestsTestIdEndPost operation in ABTestingApi.
 * @export
 * @interface ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest
 */
export interface ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiEndAbTestApiV1AbTestsTestIdEndPost
     */
    readonly testId: string

    /**
     * 
     * @type {string}
     * @memberof ABTestingApiEndAbTestApiV1AbTestsTestIdEndPost
     */
    readonly winnerVariant: string
}

/**
 * Request parameters for getAbTestApiV1AbTestsTestIdGet operation in ABTestingApi.
 * @export
 * @interface ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest
 */
export interface ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiGetAbTestApiV1AbTestsTestIdGet
     */
    readonly testId: string
}

/**
 * Request parameters for getAbTestMetricsApiV1AbTestsTestIdMetricsGet operation in ABTestingApi.
 * @export
 * @interface ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest
 */
export interface ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGet
     */
    readonly testId: string
}

/**
 * Request parameters for getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet operation in ABTestingApi.
 * @export
 * @interface ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest
 */
export interface ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGet
     */
    readonly testId: string
}

/**
 * Request parameters for getAbTestResultsApiV1AbTestsTestIdResultsGet operation in ABTestingApi.
 * @export
 * @interface ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest
 */
export interface ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGet
     */
    readonly testId: string
}

/**
 * Request parameters for listAbTestsApiV1AbTestsGet operation in ABTestingApi.
 * @export
 * @interface ABTestingApiListAbTestsApiV1AbTestsGetRequest
 */
export interface ABTestingApiListAbTestsApiV1AbTestsGetRequest {
    /**
     * 
     * @type {TestStatus}
     * @memberof ABTestingApiListAbTestsApiV1AbTestsGet
     */
    readonly status?: TestStatus | null

    /**
     * 
     * @type {TestType}
     * @memberof ABTestingApiListAbTestsApiV1AbTestsGet
     */
    readonly testType?: TestType | null

    /**
     * 
     * @type {Array<string>}
     * @memberof ABTestingApiListAbTestsApiV1AbTestsGet
     */
    readonly requestBody?: Array<string> | null
}

/**
 * Request parameters for pauseAbTestApiV1AbTestsTestIdPausePost operation in ABTestingApi.
 * @export
 * @interface ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest
 */
export interface ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePost
     */
    readonly testId: string
}

/**
 * Request parameters for startAbTestApiV1AbTestsTestIdStartPost operation in ABTestingApi.
 * @export
 * @interface ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest
 */
export interface ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiStartAbTestApiV1AbTestsTestIdStartPost
     */
    readonly testId: string
}

/**
 * Request parameters for updateAbTestApiV1AbTestsTestIdPut operation in ABTestingApi.
 * @export
 * @interface ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest
 */
export interface ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ABTestingApiUpdateAbTestApiV1AbTestsTestIdPut
     */
    readonly testId: string

    /**
     * 
     * @type {ABTestUpdateRequest}
     * @memberof ABTestingApiUpdateAbTestApiV1AbTestsTestIdPut
     */
    readonly aBTestUpdateRequest: ABTestUpdateRequest
}

/**
 * ABTestingApi - object-oriented interface
 * @export
 * @class ABTestingApi
 * @extends {BaseAPI}
 */
export class ABTestingApi extends BaseAPI implements ABTestingApiInterface {
    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Complete Ab Test
     * @param {ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters: ABTestingApiCompleteAbTestApiV1AbTestsTestIdCompletePostRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * @summary Create Ab Test
     * @param {ABTestingApiCreateAbTestApiV1AbTestsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public createAbTestApiV1AbTestsPost(requestParameters: ABTestingApiCreateAbTestApiV1AbTestsPostRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).createAbTestApiV1AbTestsPost(requestParameters.aBTestCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * @summary Delete Ab Test
     * @param {ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public deleteAbTestApiV1AbTestsTestIdDelete(requestParameters: ABTestingApiDeleteAbTestApiV1AbTestsTestIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).deleteAbTestApiV1AbTestsTestIdDelete(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * @summary End Ab Test
     * @param {ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public endAbTestApiV1AbTestsTestIdEndPost(requestParameters: ABTestingApiEndAbTestApiV1AbTestsTestIdEndPostRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).endAbTestApiV1AbTestsTestIdEndPost(requestParameters.testId, requestParameters.winnerVariant, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * @summary Get Ab Test
     * @param {ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public getAbTestApiV1AbTestsTestIdGet(requestParameters: ABTestingApiGetAbTestApiV1AbTestsTestIdGetRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).getAbTestApiV1AbTestsTestIdGet(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * @summary Get Ab Test Metrics
     * @param {ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters: ABTestingApiGetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * @summary Get Ab Test Performance
     * @param {ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters: ABTestingApiGetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * @summary Get Ab Test Results
     * @param {ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters: ABTestingApiGetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * @summary List Ab Tests
     * @param {ABTestingApiListAbTestsApiV1AbTestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public listAbTestsApiV1AbTestsGet(requestParameters: ABTestingApiListAbTestsApiV1AbTestsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).listAbTestsApiV1AbTestsGet(requestParameters.status, requestParameters.testType, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Pause Ab Test
     * @param {ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters: ABTestingApiPauseAbTestApiV1AbTestsTestIdPausePostRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Start Ab Test
     * @param {ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public startAbTestApiV1AbTestsTestIdStartPost(requestParameters: ABTestingApiStartAbTestApiV1AbTestsTestIdStartPostRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).startAbTestApiV1AbTestsTestIdStartPost(requestParameters.testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * @summary Update Ab Test
     * @param {ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApi
     */
    public updateAbTestApiV1AbTestsTestIdPut(requestParameters: ABTestingApiUpdateAbTestApiV1AbTestsTestIdPutRequest, options?: RawAxiosRequestConfig) {
        return ABTestingApiFp(this.configuration).updateAbTestApiV1AbTestsTestIdPut(requestParameters.testId, requestParameters.aBTestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

