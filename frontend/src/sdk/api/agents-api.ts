/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AgentCreateRequest } from '../models';
// @ts-ignore
import type { AgentDeleteResponse } from '../models';
// @ts-ignore
import type { AgentInteractRequest } from '../models';
// @ts-ignore
import type { AgentInteractResponse } from '../models';
// @ts-ignore
import type { AgentListResponse } from '../models';
// @ts-ignore
import type { AgentResponse } from '../models';
// @ts-ignore
import type { AgentStatsResponse } from '../models';
// @ts-ignore
import type { AgentStatus } from '../models';
// @ts-ignore
import type { AgentType } from '../models';
// @ts-ignore
import type { AgentUpdateRequest } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export const AgentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new agent.  Args:     agent_data: Agent creation data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Created agent data
         * @summary Create Agent
         * @param {AgentCreateRequest} agentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentApiV1AgentsPost: async (agentCreateRequest: AgentCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentCreateRequest' is not null or undefined
            assertParamExists('createAgentApiV1AgentsPost', 'agentCreateRequest', agentCreateRequest)
            const localVarPath = `/api/v1/agents/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agentCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
         * @summary Delete Agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentApiV1AgentsAgentIdDelete: async (agentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('deleteAgentApiV1AgentsAgentIdDelete', 'agentId', agentId)
            const localVarPath = `/api/v1/agents/{agent_id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
         * @summary Get Agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentApiV1AgentsAgentIdGet: async (agentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('getAgentApiV1AgentsAgentIdGet', 'agentId', agentId)
            const localVarPath = `/api/v1/agents/{agent_id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get agent statistics.  Args:     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent statistics
         * @summary Get Agent Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentStatsApiV1AgentsStatsOverviewGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/agents/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a message to an agent and get a response.  Args:     agent_id: Agent ID     interaction_data: Interaction data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent response
         * @summary Interact With Agent
         * @param {string} agentId 
         * @param {AgentInteractRequest} agentInteractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interactWithAgentApiV1AgentsAgentIdInteractPost: async (agentId: string, agentInteractRequest: AgentInteractRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('interactWithAgentApiV1AgentsAgentIdInteractPost', 'agentId', agentId)
            // verify required parameter 'agentInteractRequest' is not null or undefined
            assertParamExists('interactWithAgentApiV1AgentsAgentIdInteractPost', 'agentInteractRequest', agentInteractRequest)
            const localVarPath = `/api/v1/agents/{agent_id}/interact`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agentInteractRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all agents with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     List of agents
         * @summary List Agents
         * @param {AgentType | null} [agentType] 
         * @param {AgentStatus | null} [status] 
         * @param {Array<string> | null} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgentsApiV1AgentsGet: async (agentType?: AgentType | null, status?: AgentStatus | null, requestBody?: Array<string> | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/agents/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (agentType !== undefined) {
                localVarQueryParameter['agent_type'] = agentType;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
         * @summary Update Agent
         * @param {string} agentId 
         * @param {AgentUpdateRequest} agentUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentApiV1AgentsAgentIdPut: async (agentId: string, agentUpdateRequest: AgentUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agentId' is not null or undefined
            assertParamExists('updateAgentApiV1AgentsAgentIdPut', 'agentId', agentId)
            // verify required parameter 'agentUpdateRequest' is not null or undefined
            assertParamExists('updateAgentApiV1AgentsAgentIdPut', 'agentUpdateRequest', agentUpdateRequest)
            const localVarPath = `/api/v1/agents/{agent_id}`
                .replace(`{${"agent_id"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agentUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentsApi - functional programming interface
 * @export
 */
export const AgentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new agent.  Args:     agent_data: Agent creation data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Created agent data
         * @summary Create Agent
         * @param {AgentCreateRequest} agentCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgentApiV1AgentsPost(agentCreateRequest: AgentCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAgentApiV1AgentsPost(agentCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.createAgentApiV1AgentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
         * @summary Delete Agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgentApiV1AgentsAgentIdDelete(agentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgentApiV1AgentsAgentIdDelete(agentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.deleteAgentApiV1AgentsAgentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
         * @summary Get Agent
         * @param {string} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgentApiV1AgentsAgentIdGet(agentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentApiV1AgentsAgentIdGet(agentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.getAgentApiV1AgentsAgentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get agent statistics.  Args:     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent statistics
         * @summary Get Agent Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgentStatsApiV1AgentsStatsOverviewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgentStatsApiV1AgentsStatsOverviewGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.getAgentStatsApiV1AgentsStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send a message to an agent and get a response.  Args:     agent_id: Agent ID     interaction_data: Interaction data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent response
         * @summary Interact With Agent
         * @param {string} agentId 
         * @param {AgentInteractRequest} agentInteractRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async interactWithAgentApiV1AgentsAgentIdInteractPost(agentId: string, agentInteractRequest: AgentInteractRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentInteractResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.interactWithAgentApiV1AgentsAgentIdInteractPost(agentId, agentInteractRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.interactWithAgentApiV1AgentsAgentIdInteractPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all agents with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     List of agents
         * @summary List Agents
         * @param {AgentType | null} [agentType] 
         * @param {AgentStatus | null} [status] 
         * @param {Array<string> | null} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAgentsApiV1AgentsGet(agentType?: AgentType | null, status?: AgentStatus | null, requestBody?: Array<string> | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAgentsApiV1AgentsGet(agentType, status, requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.listAgentsApiV1AgentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
         * @summary Update Agent
         * @param {string} agentId 
         * @param {AgentUpdateRequest} agentUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgentApiV1AgentsAgentIdPut(agentId: string, agentUpdateRequest: AgentUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAgentApiV1AgentsAgentIdPut(agentId, agentUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AgentsApi.updateAgentApiV1AgentsAgentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AgentsApi - factory interface
 * @export
 */
export const AgentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgentsApiFp(configuration)
    return {
        /**
         * Create a new agent.  Args:     agent_data: Agent creation data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Created agent data
         * @summary Create Agent
         * @param {AgentsApiCreateAgentApiV1AgentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgentApiV1AgentsPost(requestParameters: AgentsApiCreateAgentApiV1AgentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse> {
            return localVarFp.createAgentApiV1AgentsPost(requestParameters.agentCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
         * @summary Delete Agent
         * @param {AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgentApiV1AgentsAgentIdDelete(requestParameters: AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentDeleteResponse> {
            return localVarFp.deleteAgentApiV1AgentsAgentIdDelete(requestParameters.agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
         * @summary Get Agent
         * @param {AgentsApiGetAgentApiV1AgentsAgentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentApiV1AgentsAgentIdGet(requestParameters: AgentsApiGetAgentApiV1AgentsAgentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse> {
            return localVarFp.getAgentApiV1AgentsAgentIdGet(requestParameters.agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get agent statistics.  Args:     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent statistics
         * @summary Get Agent Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgentStatsApiV1AgentsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<AgentStatsResponse> {
            return localVarFp.getAgentStatsApiV1AgentsStatsOverviewGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Send a message to an agent and get a response.  Args:     agent_id: Agent ID     interaction_data: Interaction data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent response
         * @summary Interact With Agent
         * @param {AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters: AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentInteractResponse> {
            return localVarFp.interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters.agentId, requestParameters.agentInteractRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List all agents with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     List of agents
         * @summary List Agents
         * @param {AgentsApiListAgentsApiV1AgentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAgentsApiV1AgentsGet(requestParameters: AgentsApiListAgentsApiV1AgentsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AgentListResponse> {
            return localVarFp.listAgentsApiV1AgentsGet(requestParameters.agentType, requestParameters.status, requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
         * @summary Update Agent
         * @param {AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgentApiV1AgentsAgentIdPut(requestParameters: AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse> {
            return localVarFp.updateAgentApiV1AgentsAgentIdPut(requestParameters.agentId, requestParameters.agentUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentsApi - interface
 * @export
 * @interface AgentsApi
 */
export interface AgentsApiInterface {
    /**
     * Create a new agent.  Args:     agent_data: Agent creation data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Created agent data
     * @summary Create Agent
     * @param {AgentsApiCreateAgentApiV1AgentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    createAgentApiV1AgentsPost(requestParameters: AgentsApiCreateAgentApiV1AgentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse>;

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * @summary Delete Agent
     * @param {AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    deleteAgentApiV1AgentsAgentIdDelete(requestParameters: AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentDeleteResponse>;

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * @summary Get Agent
     * @param {AgentsApiGetAgentApiV1AgentsAgentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentApiV1AgentsAgentIdGet(requestParameters: AgentsApiGetAgentApiV1AgentsAgentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse>;

    /**
     * Get agent statistics.  Args:     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent statistics
     * @summary Get Agent Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentStatsApiV1AgentsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<AgentStatsResponse>;

    /**
     * Send a message to an agent and get a response.  Args:     agent_id: Agent ID     interaction_data: Interaction data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent response
     * @summary Interact With Agent
     * @param {AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters: AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentInteractResponse>;

    /**
     * List all agents with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     List of agents
     * @summary List Agents
     * @param {AgentsApiListAgentsApiV1AgentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    listAgentsApiV1AgentsGet(requestParameters?: AgentsApiListAgentsApiV1AgentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentListResponse>;

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * @summary Update Agent
     * @param {AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    updateAgentApiV1AgentsAgentIdPut(requestParameters: AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AgentResponse>;

}

/**
 * Request parameters for createAgentApiV1AgentsPost operation in AgentsApi.
 * @export
 * @interface AgentsApiCreateAgentApiV1AgentsPostRequest
 */
export interface AgentsApiCreateAgentApiV1AgentsPostRequest {
    /**
     * 
     * @type {AgentCreateRequest}
     * @memberof AgentsApiCreateAgentApiV1AgentsPost
     */
    readonly agentCreateRequest: AgentCreateRequest
}

/**
 * Request parameters for deleteAgentApiV1AgentsAgentIdDelete operation in AgentsApi.
 * @export
 * @interface AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest
 */
export interface AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentsApiDeleteAgentApiV1AgentsAgentIdDelete
     */
    readonly agentId: string
}

/**
 * Request parameters for getAgentApiV1AgentsAgentIdGet operation in AgentsApi.
 * @export
 * @interface AgentsApiGetAgentApiV1AgentsAgentIdGetRequest
 */
export interface AgentsApiGetAgentApiV1AgentsAgentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentsApiGetAgentApiV1AgentsAgentIdGet
     */
    readonly agentId: string
}

/**
 * Request parameters for interactWithAgentApiV1AgentsAgentIdInteractPost operation in AgentsApi.
 * @export
 * @interface AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest
 */
export interface AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPost
     */
    readonly agentId: string

    /**
     * 
     * @type {AgentInteractRequest}
     * @memberof AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPost
     */
    readonly agentInteractRequest: AgentInteractRequest
}

/**
 * Request parameters for listAgentsApiV1AgentsGet operation in AgentsApi.
 * @export
 * @interface AgentsApiListAgentsApiV1AgentsGetRequest
 */
export interface AgentsApiListAgentsApiV1AgentsGetRequest {
    /**
     * 
     * @type {AgentType}
     * @memberof AgentsApiListAgentsApiV1AgentsGet
     */
    readonly agentType?: AgentType | null

    /**
     * 
     * @type {AgentStatus}
     * @memberof AgentsApiListAgentsApiV1AgentsGet
     */
    readonly status?: AgentStatus | null

    /**
     * 
     * @type {Array<string>}
     * @memberof AgentsApiListAgentsApiV1AgentsGet
     */
    readonly requestBody?: Array<string> | null
}

/**
 * Request parameters for updateAgentApiV1AgentsAgentIdPut operation in AgentsApi.
 * @export
 * @interface AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest
 */
export interface AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AgentsApiUpdateAgentApiV1AgentsAgentIdPut
     */
    readonly agentId: string

    /**
     * 
     * @type {AgentUpdateRequest}
     * @memberof AgentsApiUpdateAgentApiV1AgentsAgentIdPut
     */
    readonly agentUpdateRequest: AgentUpdateRequest
}

/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export class AgentsApi extends BaseAPI implements AgentsApiInterface {
    /**
     * Create a new agent.  Args:     agent_data: Agent creation data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Created agent data
     * @summary Create Agent
     * @param {AgentsApiCreateAgentApiV1AgentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public createAgentApiV1AgentsPost(requestParameters: AgentsApiCreateAgentApiV1AgentsPostRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).createAgentApiV1AgentsPost(requestParameters.agentCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * @summary Delete Agent
     * @param {AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public deleteAgentApiV1AgentsAgentIdDelete(requestParameters: AgentsApiDeleteAgentApiV1AgentsAgentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).deleteAgentApiV1AgentsAgentIdDelete(requestParameters.agentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * @summary Get Agent
     * @param {AgentsApiGetAgentApiV1AgentsAgentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getAgentApiV1AgentsAgentIdGet(requestParameters: AgentsApiGetAgentApiV1AgentsAgentIdGetRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getAgentApiV1AgentsAgentIdGet(requestParameters.agentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get agent statistics.  Args:     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent statistics
     * @summary Get Agent Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public getAgentStatsApiV1AgentsStatsOverviewGet(options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).getAgentStatsApiV1AgentsStatsOverviewGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send a message to an agent and get a response.  Args:     agent_id: Agent ID     interaction_data: Interaction data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent response
     * @summary Interact With Agent
     * @param {AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters: AgentsApiInteractWithAgentApiV1AgentsAgentIdInteractPostRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters.agentId, requestParameters.agentInteractRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all agents with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     List of agents
     * @summary List Agents
     * @param {AgentsApiListAgentsApiV1AgentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public listAgentsApiV1AgentsGet(requestParameters: AgentsApiListAgentsApiV1AgentsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).listAgentsApiV1AgentsGet(requestParameters.agentType, requestParameters.status, requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * @summary Update Agent
     * @param {AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    public updateAgentApiV1AgentsAgentIdPut(requestParameters: AgentsApiUpdateAgentApiV1AgentsAgentIdPutRequest, options?: RawAxiosRequestConfig) {
        return AgentsApiFp(this.configuration).updateAgentApiV1AgentsAgentIdPut(requestParameters.agentId, requestParameters.agentUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

