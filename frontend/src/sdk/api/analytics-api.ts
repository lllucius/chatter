/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ConversationStatsResponse } from '../models';
// @ts-ignore
import type { DashboardResponse } from '../models';
// @ts-ignore
import type { DocumentAnalyticsResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PerformanceMetricsResponse } from '../models';
// @ts-ignore
import type { SystemAnalyticsResponse } from '../models';
// @ts-ignore
import type { UsageMetricsResponse } from '../models';
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export const AnalyticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
         * @summary Export Analytics
         * @param {Array<string>} metrics List of metrics to export
         * @param {string} [format] Export format (json, csv, xlsx)
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAnalyticsApiV1AnalyticsExportPost: async (metrics: Array<string>, format?: string, startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metrics' is not null or undefined
            assertParamExists('exportAnalyticsApiV1AnalyticsExportPost', 'metrics', metrics)
            const localVarPath = `/api/v1/analytics/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (metrics) {
                localVarQueryParameter['metrics'] = metrics;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
         * @summary Get Conversation Stats
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationStatsApiV1AnalyticsConversationsGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
         * @summary Get Dashboard
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardApiV1AnalyticsDashboardGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/dashboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
         * @summary Get Document Analytics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentAnalyticsApiV1AnalyticsDocumentsGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
         * @summary Get Performance Metrics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceMetricsApiV1AnalyticsPerformanceGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/performance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
         * @summary Get System Analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAnalyticsApiV1AnalyticsSystemGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
         * @summary Get Tool Server Analytics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToolServerAnalyticsApiV1AnalyticsToolserversGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/toolservers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
         * @summary Get Usage Metrics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageMetricsApiV1AnalyticsUsageGet: async (startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/analytics/usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
         * @summary Get User Analytics
         * @param {string} userId 
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAnalyticsApiV1AnalyticsUsersUserIdGet: async (userId: string, startDate?: string | null, endDate?: string | null, period?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserAnalyticsApiV1AnalyticsUsersUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/analytics/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (period !== undefined) {
                localVarQueryParameter['period'] = period;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export const AnalyticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnalyticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
         * @summary Export Analytics
         * @param {Array<string>} metrics List of metrics to export
         * @param {string} [format] Export format (json, csv, xlsx)
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAnalyticsApiV1AnalyticsExportPost(metrics: Array<string>, format?: string, startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAnalyticsApiV1AnalyticsExportPost(metrics, format, startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.exportAnalyticsApiV1AnalyticsExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
         * @summary Get Conversation Stats
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConversationStatsApiV1AnalyticsConversationsGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConversationStatsApiV1AnalyticsConversationsGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getConversationStatsApiV1AnalyticsConversationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
         * @summary Get Dashboard
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDashboardApiV1AnalyticsDashboardGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DashboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDashboardApiV1AnalyticsDashboardGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getDashboardApiV1AnalyticsDashboardGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
         * @summary Get Document Analytics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentAnalyticsApiV1AnalyticsDocumentsGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentAnalyticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentAnalyticsApiV1AnalyticsDocumentsGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getDocumentAnalyticsApiV1AnalyticsDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
         * @summary Get Performance Metrics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerformanceMetricsApiV1AnalyticsPerformanceGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerformanceMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerformanceMetricsApiV1AnalyticsPerformanceGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getPerformanceMetricsApiV1AnalyticsPerformanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
         * @summary Get System Analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemAnalyticsApiV1AnalyticsSystemGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemAnalyticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemAnalyticsApiV1AnalyticsSystemGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getSystemAnalyticsApiV1AnalyticsSystemGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
         * @summary Get Tool Server Analytics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToolServerAnalyticsApiV1AnalyticsToolserversGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToolServerAnalyticsApiV1AnalyticsToolserversGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getToolServerAnalyticsApiV1AnalyticsToolserversGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
         * @summary Get Usage Metrics
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageMetricsApiV1AnalyticsUsageGet(startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageMetricsApiV1AnalyticsUsageGet(startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getUsageMetricsApiV1AnalyticsUsageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
         * @summary Get User Analytics
         * @param {string} userId 
         * @param {string | null} [startDate] Start date for analytics
         * @param {string | null} [endDate] End date for analytics
         * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserAnalyticsApiV1AnalyticsUsersUserIdGet(userId: string, startDate?: string | null, endDate?: string | null, period?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserAnalyticsApiV1AnalyticsUsersUserIdGet(userId, startDate, endDate, period, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnalyticsApi.getUserAnalyticsApiV1AnalyticsUsersUserIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnalyticsApi - factory interface
 * @export
 */
export const AnalyticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnalyticsApiFp(configuration)
    return {
        /**
         * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
         * @summary Export Analytics
         * @param {AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAnalyticsApiV1AnalyticsExportPost(requestParameters: AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.exportAnalyticsApiV1AnalyticsExportPost(requestParameters.metrics, requestParameters.format, requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
         * @summary Get Conversation Stats
         * @param {AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConversationStatsApiV1AnalyticsConversationsGet(requestParameters: AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ConversationStatsResponse> {
            return localVarFp.getConversationStatsApiV1AnalyticsConversationsGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
         * @summary Get Dashboard
         * @param {AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDashboardApiV1AnalyticsDashboardGet(requestParameters: AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DashboardResponse> {
            return localVarFp.getDashboardApiV1AnalyticsDashboardGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
         * @summary Get Document Analytics
         * @param {AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters: AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DocumentAnalyticsResponse> {
            return localVarFp.getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
         * @summary Get Performance Metrics
         * @param {AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters: AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PerformanceMetricsResponse> {
            return localVarFp.getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
         * @summary Get System Analytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemAnalyticsApiV1AnalyticsSystemGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemAnalyticsResponse> {
            return localVarFp.getSystemAnalyticsApiV1AnalyticsSystemGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
         * @summary Get Tool Server Analytics
         * @param {AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters: AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
         * @summary Get Usage Metrics
         * @param {AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageMetricsApiV1AnalyticsUsageGet(requestParameters: AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UsageMetricsResponse> {
            return localVarFp.getUsageMetricsApiV1AnalyticsUsageGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
        /**
         * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
         * @summary Get User Analytics
         * @param {AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters: AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters.userId, requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnalyticsApi - interface
 * @export
 * @interface AnalyticsApi
 */
export interface AnalyticsApiInterface {
    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * @summary Export Analytics
     * @param {AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    exportAnalyticsApiV1AnalyticsExportPost(requestParameters: AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * @summary Get Conversation Stats
     * @param {AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getConversationStatsApiV1AnalyticsConversationsGet(requestParameters?: AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConversationStatsResponse>;

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * @summary Get Dashboard
     * @param {AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getDashboardApiV1AnalyticsDashboardGet(requestParameters?: AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DashboardResponse>;

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * @summary Get Document Analytics
     * @param {AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters?: AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentAnalyticsResponse>;

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * @summary Get Performance Metrics
     * @param {AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters?: AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PerformanceMetricsResponse>;

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * @summary Get System Analytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getSystemAnalyticsApiV1AnalyticsSystemGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemAnalyticsResponse>;

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * @summary Get Tool Server Analytics
     * @param {AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters?: AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * @summary Get Usage Metrics
     * @param {AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getUsageMetricsApiV1AnalyticsUsageGet(requestParameters?: AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsageMetricsResponse>;

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * @summary Get User Analytics
     * @param {AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters: AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

}

/**
 * Request parameters for exportAnalyticsApiV1AnalyticsExportPost operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest
 */
export interface AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest {
    /**
     * List of metrics to export
     * @type {Array<string>}
     * @memberof AnalyticsApiExportAnalyticsApiV1AnalyticsExportPost
     */
    readonly metrics: Array<string>

    /**
     * Export format (json, csv, xlsx)
     * @type {string}
     * @memberof AnalyticsApiExportAnalyticsApiV1AnalyticsExportPost
     */
    readonly format?: string

    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiExportAnalyticsApiV1AnalyticsExportPost
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiExportAnalyticsApiV1AnalyticsExportPost
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiExportAnalyticsApiV1AnalyticsExportPost
     */
    readonly period?: string
}

/**
 * Request parameters for getConversationStatsApiV1AnalyticsConversationsGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest
 */
export interface AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGet
     */
    readonly period?: string
}

/**
 * Request parameters for getDashboardApiV1AnalyticsDashboardGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest
 */
export interface AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetDashboardApiV1AnalyticsDashboardGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetDashboardApiV1AnalyticsDashboardGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetDashboardApiV1AnalyticsDashboardGet
     */
    readonly period?: string
}

/**
 * Request parameters for getDocumentAnalyticsApiV1AnalyticsDocumentsGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest
 */
export interface AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGet
     */
    readonly period?: string
}

/**
 * Request parameters for getPerformanceMetricsApiV1AnalyticsPerformanceGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest
 */
export interface AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGet
     */
    readonly period?: string
}

/**
 * Request parameters for getToolServerAnalyticsApiV1AnalyticsToolserversGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest
 */
export interface AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGet
     */
    readonly period?: string
}

/**
 * Request parameters for getUsageMetricsApiV1AnalyticsUsageGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest
 */
export interface AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest {
    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGet
     */
    readonly period?: string
}

/**
 * Request parameters for getUserAnalyticsApiV1AnalyticsUsersUserIdGet operation in AnalyticsApi.
 * @export
 * @interface AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest
 */
export interface AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGet
     */
    readonly userId: string

    /**
     * Start date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGet
     */
    readonly startDate?: string | null

    /**
     * End date for analytics
     * @type {string}
     * @memberof AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGet
     */
    readonly endDate?: string | null

    /**
     * Predefined period (1h, 24h, 7d, 30d, 90d)
     * @type {string}
     * @memberof AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGet
     */
    readonly period?: string
}

/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export class AnalyticsApi extends BaseAPI implements AnalyticsApiInterface {
    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * @summary Export Analytics
     * @param {AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public exportAnalyticsApiV1AnalyticsExportPost(requestParameters: AnalyticsApiExportAnalyticsApiV1AnalyticsExportPostRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).exportAnalyticsApiV1AnalyticsExportPost(requestParameters.metrics, requestParameters.format, requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * @summary Get Conversation Stats
     * @param {AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getConversationStatsApiV1AnalyticsConversationsGet(requestParameters: AnalyticsApiGetConversationStatsApiV1AnalyticsConversationsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getConversationStatsApiV1AnalyticsConversationsGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * @summary Get Dashboard
     * @param {AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getDashboardApiV1AnalyticsDashboardGet(requestParameters: AnalyticsApiGetDashboardApiV1AnalyticsDashboardGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getDashboardApiV1AnalyticsDashboardGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * @summary Get Document Analytics
     * @param {AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters: AnalyticsApiGetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * @summary Get Performance Metrics
     * @param {AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters: AnalyticsApiGetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * @summary Get System Analytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getSystemAnalyticsApiV1AnalyticsSystemGet(options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getSystemAnalyticsApiV1AnalyticsSystemGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * @summary Get Tool Server Analytics
     * @param {AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters: AnalyticsApiGetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * @summary Get Usage Metrics
     * @param {AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getUsageMetricsApiV1AnalyticsUsageGet(requestParameters: AnalyticsApiGetUsageMetricsApiV1AnalyticsUsageGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getUsageMetricsApiV1AnalyticsUsageGet(requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * @summary Get User Analytics
     * @param {AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    public getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters: AnalyticsApiGetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, options?: RawAxiosRequestConfig) {
        return AnalyticsApiFp(this.configuration).getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters.userId, requestParameters.startDate, requestParameters.endDate, requestParameters.period, options).then((request) => request(this.axios, this.basePath));
    }
}

