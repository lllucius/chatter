/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { APIKeyCreate } from '../models';
// @ts-ignore
import type { APIKeyResponse } from '../models';
// @ts-ignore
import type { APIKeyRevokeResponse } from '../models';
// @ts-ignore
import type { AccountDeactivateResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { LogoutResponse } from '../models';
// @ts-ignore
import type { PasswordChange } from '../models';
// @ts-ignore
import type { PasswordChangeResponse } from '../models';
// @ts-ignore
import type { PasswordResetConfirmResponse } from '../models';
// @ts-ignore
import type { PasswordResetRequestResponse } from '../models';
// @ts-ignore
import type { TokenRefresh } from '../models';
// @ts-ignore
import type { TokenRefreshResponse } from '../models';
// @ts-ignore
import type { TokenResponse } from '../models';
// @ts-ignore
import type { UserCreate } from '../models';
// @ts-ignore
import type { UserLogin } from '../models';
// @ts-ignore
import type { UserResponse } from '../models';
// @ts-ignore
import type { UserUpdate } from '../models';
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change user password.  Args:     password_data: Password change data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Change Password
         * @param {PasswordChange} passwordChange 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1AuthChangePasswordPost: async (passwordChange: PasswordChange, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChange' is not null or undefined
            assertParamExists('changePasswordApiV1AuthChangePasswordPost', 'passwordChange', passwordChange)
            const localVarPath = `/api/v1/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChange, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirm password reset.  Args:     token: Reset token     new_password: New password     auth_service: Authentication service  Returns:     Success message
         * @summary Confirm Password Reset
         * @param {string} token 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPasswordResetApiV1AuthPasswordResetConfirmPost: async (token: string, newPassword: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('confirmPasswordResetApiV1AuthPasswordResetConfirmPost', 'token', token)
            // verify required parameter 'newPassword' is not null or undefined
            assertParamExists('confirmPasswordResetApiV1AuthPasswordResetConfirmPost', 'newPassword', newPassword)
            const localVarPath = `/api/v1/auth/password-reset/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }

            if (newPassword !== undefined) {
                localVarQueryParameter['new_password'] = newPassword;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create API key for current user.  Args:     key_data: API key creation data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
         * @summary Create Api Key
         * @param {APIKeyCreate} aPIKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKeyApiV1AuthApiKeyPost: async (aPIKeyCreate: APIKeyCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aPIKeyCreate' is not null or undefined
            assertParamExists('createApiKeyApiV1AuthApiKeyPost', 'aPIKeyCreate', aPIKeyCreate)
            const localVarPath = `/api/v1/auth/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aPIKeyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivate current user account.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Deactivate Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateAccountApiV1AuthAccountDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiV1AuthMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
         * @summary List Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeysApiV1AuthApiKeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate user and return tokens.  Args:     user_data: User login data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Login
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost: async (userLogin: UserLogin, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLogin' is not null or undefined
            assertParamExists('loginApiV1AuthLoginPost', 'userLogin', userLogin)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout and revoke current token.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1AuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh access token.  Args:     token_data: Refresh token data     auth_service: Authentication service  Returns:     New access and refresh tokens
         * @summary Refresh Token
         * @param {TokenRefresh} tokenRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiV1AuthRefreshPost: async (tokenRefresh: TokenRefresh, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefresh' is not null or undefined
            assertParamExists('refreshTokenApiV1AuthRefreshPost', 'tokenRefresh', tokenRefresh)
            const localVarPath = `/api/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefresh, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user.  Args:     user_data: User registration data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('registerApiV1AuthRegisterPost', 'userCreate', userCreate)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request password reset.  Args:     email: User email     auth_service: Authentication service  Returns:     Success message
         * @summary Request Password Reset
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetApiV1AuthPasswordResetRequestPost: async (email: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('requestPasswordResetApiV1AuthPasswordResetRequestPost', 'email', email)
            const localVarPath = `/api/v1/auth/password-reset/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke current user\'s API key.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Revoke Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeApiKeyApiV1AuthApiKeyDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/api-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
         * @summary Update Profile
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileApiV1AuthMePut: async (userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('updateProfileApiV1AuthMePut', 'userUpdate', userUpdate)
            const localVarPath = `/api/v1/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Change user password.  Args:     password_data: Password change data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Change Password
         * @param {PasswordChange} passwordChange 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordApiV1AuthChangePasswordPost(passwordChange: PasswordChange, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordChangeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordApiV1AuthChangePasswordPost(passwordChange, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.changePasswordApiV1AuthChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Confirm password reset.  Args:     token: Reset token     new_password: New password     auth_service: Authentication service  Returns:     Success message
         * @summary Confirm Password Reset
         * @param {string} token 
         * @param {string} newPassword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPasswordResetApiV1AuthPasswordResetConfirmPost(token: string, newPassword: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordResetConfirmResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPasswordResetApiV1AuthPasswordResetConfirmPost(token, newPassword, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.confirmPasswordResetApiV1AuthPasswordResetConfirmPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create API key for current user.  Args:     key_data: API key creation data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
         * @summary Create Api Key
         * @param {APIKeyCreate} aPIKeyCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKeyApiV1AuthApiKeyPost(aPIKeyCreate: APIKeyCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKeyApiV1AuthApiKeyPost(aPIKeyCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.createApiKeyApiV1AuthApiKeyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deactivate current user account.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Deactivate Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deactivateAccountApiV1AuthAccountDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountDeactivateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deactivateAccountApiV1AuthAccountDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.deactivateAccountApiV1AuthAccountDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserInfoApiV1AuthMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserInfoApiV1AuthMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.getCurrentUserInfoApiV1AuthMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
         * @summary List Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApiKeysApiV1AuthApiKeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<APIKeyResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApiKeysApiV1AuthApiKeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.listApiKeysApiV1AuthApiKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticate user and return tokens.  Args:     user_data: User login data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Login
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiV1AuthLoginPost(userLogin: UserLogin, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApiV1AuthLoginPost(userLogin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.loginApiV1AuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logout and revoke current token.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutApiV1AuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutApiV1AuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.logoutApiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Refresh access token.  Args:     token_data: Refresh token data     auth_service: Authentication service  Returns:     New access and refresh tokens
         * @summary Refresh Token
         * @param {TokenRefresh} tokenRefresh 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshTokenApiV1AuthRefreshPost(tokenRefresh: TokenRefresh, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshTokenApiV1AuthRefreshPost(tokenRefresh, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.refreshTokenApiV1AuthRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new user.  Args:     user_data: User registration data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Register
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerApiV1AuthRegisterPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerApiV1AuthRegisterPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.registerApiV1AuthRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Request password reset.  Args:     email: User email     auth_service: Authentication service  Returns:     Success message
         * @summary Request Password Reset
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestPasswordResetApiV1AuthPasswordResetRequestPost(email: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PasswordResetRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestPasswordResetApiV1AuthPasswordResetRequestPost(email, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.requestPasswordResetApiV1AuthPasswordResetRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Revoke current user\'s API key.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Revoke Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeApiKeyApiV1AuthApiKeyDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<APIKeyRevokeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeApiKeyApiV1AuthApiKeyDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.revokeApiKeyApiV1AuthApiKeyDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
         * @summary Update Profile
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileApiV1AuthMePut(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfileApiV1AuthMePut(userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.updateProfileApiV1AuthMePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Change user password.  Args:     password_data: Password change data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Change Password
         * @param {AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1AuthChangePasswordPost(requestParameters: AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordChangeResponse> {
            return localVarFp.changePasswordApiV1AuthChangePasswordPost(requestParameters.passwordChange, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirm password reset.  Args:     token: Reset token     new_password: New password     auth_service: Authentication service  Returns:     Success message
         * @summary Confirm Password Reset
         * @param {AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters: AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordResetConfirmResponse> {
            return localVarFp.confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters.token, requestParameters.newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         * Create API key for current user.  Args:     key_data: API key creation data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
         * @summary Create Api Key
         * @param {AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKeyApiV1AuthApiKeyPost(requestParameters: AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIKeyResponse> {
            return localVarFp.createApiKeyApiV1AuthApiKeyPost(requestParameters.aPIKeyCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Deactivate current user account.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Deactivate Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deactivateAccountApiV1AuthAccountDelete(options?: RawAxiosRequestConfig): AxiosPromise<AccountDeactivateResponse> {
            return localVarFp.deactivateAccountApiV1AuthAccountDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
         * @summary Get Current User Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserInfoApiV1AuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.getCurrentUserInfoApiV1AuthMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
         * @summary List Api Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApiKeysApiV1AuthApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<APIKeyResponse>> {
            return localVarFp.listApiKeysApiV1AuthApiKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate user and return tokens.  Args:     user_data: User login data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Login
         * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.loginApiV1AuthLoginPost(requestParameters.userLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout and revoke current token.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<LogoutResponse> {
            return localVarFp.logoutApiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Refresh access token.  Args:     token_data: Refresh token data     auth_service: Authentication service  Returns:     New access and refresh tokens
         * @summary Refresh Token
         * @param {AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshTokenApiV1AuthRefreshPost(requestParameters: AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.refreshTokenApiV1AuthRefreshPost(requestParameters.tokenRefresh, options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new user.  Args:     user_data: User registration data     auth_service: Authentication service  Returns:     User data and authentication tokens
         * @summary Register
         * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.registerApiV1AuthRegisterPost(requestParameters.userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Request password reset.  Args:     email: User email     auth_service: Authentication service  Returns:     Success message
         * @summary Request Password Reset
         * @param {AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters: AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordResetRequestResponse> {
            return localVarFp.requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters.email, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke current user\'s API key.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
         * @summary Revoke Api Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeApiKeyApiV1AuthApiKeyDelete(options?: RawAxiosRequestConfig): AxiosPromise<APIKeyRevokeResponse> {
            return localVarFp.revokeApiKeyApiV1AuthApiKeyDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
         * @summary Update Profile
         * @param {AuthenticationApiUpdateProfileApiV1AuthMePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileApiV1AuthMePut(requestParameters: AuthenticationApiUpdateProfileApiV1AuthMePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse> {
            return localVarFp.updateProfileApiV1AuthMePut(requestParameters.userUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Change user password.  Args:     password_data: Password change data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Change Password
     * @param {AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    changePasswordApiV1AuthChangePasswordPost(requestParameters: AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordChangeResponse>;

    /**
     * Confirm password reset.  Args:     token: Reset token     new_password: New password     auth_service: Authentication service  Returns:     Success message
     * @summary Confirm Password Reset
     * @param {AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters: AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordResetConfirmResponse>;

    /**
     * Create API key for current user.  Args:     key_data: API key creation data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * @summary Create Api Key
     * @param {AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    createApiKeyApiV1AuthApiKeyPost(requestParameters: AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<APIKeyResponse>;

    /**
     * Deactivate current user account.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Deactivate Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    deactivateAccountApiV1AuthAccountDelete(options?: RawAxiosRequestConfig): AxiosPromise<AccountDeactivateResponse>;

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getCurrentUserInfoApiV1AuthMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserResponse>;

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    listApiKeysApiV1AuthApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<APIKeyResponse>>;

    /**
     * Authenticate user and return tokens.  Args:     user_data: User login data     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Login
     * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * Logout and revoke current token.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutApiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<LogoutResponse>;

    /**
     * Refresh access token.  Args:     token_data: Refresh token data     auth_service: Authentication service  Returns:     New access and refresh tokens
     * @summary Refresh Token
     * @param {AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    refreshTokenApiV1AuthRefreshPost(requestParameters: AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefreshResponse>;

    /**
     * Register a new user.  Args:     user_data: User registration data     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Register
     * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenResponse>;

    /**
     * Request password reset.  Args:     email: User email     auth_service: Authentication service  Returns:     Success message
     * @summary Request Password Reset
     * @param {AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters: AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PasswordResetRequestResponse>;

    /**
     * Revoke current user\'s API key.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Revoke Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    revokeApiKeyApiV1AuthApiKeyDelete(options?: RawAxiosRequestConfig): AxiosPromise<APIKeyRevokeResponse>;

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * @summary Update Profile
     * @param {AuthenticationApiUpdateProfileApiV1AuthMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    updateProfileApiV1AuthMePut(requestParameters: AuthenticationApiUpdateProfileApiV1AuthMePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse>;

}

/**
 * Request parameters for changePasswordApiV1AuthChangePasswordPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest
 */
export interface AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest {
    /**
     * 
     * @type {PasswordChange}
     * @memberof AuthenticationApiChangePasswordApiV1AuthChangePasswordPost
     */
    readonly passwordChange: PasswordChange
}

/**
 * Request parameters for confirmPasswordResetApiV1AuthPasswordResetConfirmPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest
 */
export interface AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPost
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPost
     */
    readonly newPassword: string
}

/**
 * Request parameters for createApiKeyApiV1AuthApiKeyPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest
 */
export interface AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest {
    /**
     * 
     * @type {APIKeyCreate}
     * @memberof AuthenticationApiCreateApiKeyApiV1AuthApiKeyPost
     */
    readonly aPIKeyCreate: APIKeyCreate
}

/**
 * Request parameters for loginApiV1AuthLoginPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiLoginApiV1AuthLoginPostRequest
 */
export interface AuthenticationApiLoginApiV1AuthLoginPostRequest {
    /**
     * 
     * @type {UserLogin}
     * @memberof AuthenticationApiLoginApiV1AuthLoginPost
     */
    readonly userLogin: UserLogin
}

/**
 * Request parameters for refreshTokenApiV1AuthRefreshPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest
 */
export interface AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest {
    /**
     * 
     * @type {TokenRefresh}
     * @memberof AuthenticationApiRefreshTokenApiV1AuthRefreshPost
     */
    readonly tokenRefresh: TokenRefresh
}

/**
 * Request parameters for registerApiV1AuthRegisterPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRegisterApiV1AuthRegisterPostRequest
 */
export interface AuthenticationApiRegisterApiV1AuthRegisterPostRequest {
    /**
     * 
     * @type {UserCreate}
     * @memberof AuthenticationApiRegisterApiV1AuthRegisterPost
     */
    readonly userCreate: UserCreate
}

/**
 * Request parameters for requestPasswordResetApiV1AuthPasswordResetRequestPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest
 */
export interface AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPost
     */
    readonly email: string
}

/**
 * Request parameters for updateProfileApiV1AuthMePut operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiUpdateProfileApiV1AuthMePutRequest
 */
export interface AuthenticationApiUpdateProfileApiV1AuthMePutRequest {
    /**
     * 
     * @type {UserUpdate}
     * @memberof AuthenticationApiUpdateProfileApiV1AuthMePut
     */
    readonly userUpdate: UserUpdate
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Change user password.  Args:     password_data: Password change data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Change Password
     * @param {AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public changePasswordApiV1AuthChangePasswordPost(requestParameters: AuthenticationApiChangePasswordApiV1AuthChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).changePasswordApiV1AuthChangePasswordPost(requestParameters.passwordChange, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirm password reset.  Args:     token: Reset token     new_password: New password     auth_service: Authentication service  Returns:     Success message
     * @summary Confirm Password Reset
     * @param {AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters: AuthenticationApiConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters.token, requestParameters.newPassword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create API key for current user.  Args:     key_data: API key creation data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * @summary Create Api Key
     * @param {AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public createApiKeyApiV1AuthApiKeyPost(requestParameters: AuthenticationApiCreateApiKeyApiV1AuthApiKeyPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).createApiKeyApiV1AuthApiKeyPost(requestParameters.aPIKeyCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deactivate current user account.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Deactivate Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public deactivateAccountApiV1AuthAccountDelete(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).deactivateAccountApiV1AuthAccountDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public getCurrentUserInfoApiV1AuthMeGet(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).getCurrentUserInfoApiV1AuthMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public listApiKeysApiV1AuthApiKeysGet(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).listApiKeysApiV1AuthApiKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticate user and return tokens.  Args:     user_data: User login data     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Login
     * @param {AuthenticationApiLoginApiV1AuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public loginApiV1AuthLoginPost(requestParameters: AuthenticationApiLoginApiV1AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).loginApiV1AuthLoginPost(requestParameters.userLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout and revoke current token.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public logoutApiV1AuthLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).logoutApiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refresh access token.  Args:     token_data: Refresh token data     auth_service: Authentication service  Returns:     New access and refresh tokens
     * @summary Refresh Token
     * @param {AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public refreshTokenApiV1AuthRefreshPost(requestParameters: AuthenticationApiRefreshTokenApiV1AuthRefreshPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).refreshTokenApiV1AuthRefreshPost(requestParameters.tokenRefresh, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new user.  Args:     user_data: User registration data     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Register
     * @param {AuthenticationApiRegisterApiV1AuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public registerApiV1AuthRegisterPost(requestParameters: AuthenticationApiRegisterApiV1AuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).registerApiV1AuthRegisterPost(requestParameters.userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request password reset.  Args:     email: User email     auth_service: Authentication service  Returns:     Success message
     * @summary Request Password Reset
     * @param {AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters: AuthenticationApiRequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters.email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke current user\'s API key.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Revoke Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public revokeApiKeyApiV1AuthApiKeyDelete(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).revokeApiKeyApiV1AuthApiKeyDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * @summary Update Profile
     * @param {AuthenticationApiUpdateProfileApiV1AuthMePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public updateProfileApiV1AuthMePut(requestParameters: AuthenticationApiUpdateProfileApiV1AuthMePutRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).updateProfileApiV1AuthMePut(requestParameters.userUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

