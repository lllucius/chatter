/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BackupListResponse } from '../models';
// @ts-ignore
import type { BackupRequest } from '../models';
// @ts-ignore
import type { BackupResponse } from '../models';
// @ts-ignore
import type { BackupType } from '../models';
// @ts-ignore
import type { ExportDataRequest } from '../models';
// @ts-ignore
import type { ExportDataResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { RestoreRequest } from '../models';
// @ts-ignore
import type { RestoreResponse } from '../models';
// @ts-ignore
import type { StorageStatsResponse } from '../models';
/**
 * DataManagementApi - axios parameter creator
 * @export
 */
export const DataManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Bulk delete conversations.
         * @summary Bulk Delete Conversations
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost: async (requestBody: Array<string | null>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost', 'requestBody', requestBody)
            const localVarPath = `/api/v1/data/bulk/delete-conversations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk delete documents.
         * @summary Bulk Delete Documents
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost: async (requestBody: Array<string | null>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost', 'requestBody', requestBody)
            const localVarPath = `/api/v1/data/bulk/delete-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bulk delete prompts.
         * @summary Bulk Delete Prompts
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeletePromptsApiV1DataBulkDeletePromptsPost: async (requestBody: Array<string | null>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkDeletePromptsApiV1DataBulkDeletePromptsPost', 'requestBody', requestBody)
            const localVarPath = `/api/v1/data/bulk/delete-prompts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a data backup.
         * @summary Create Backup
         * @param {BackupRequest} backupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackupApiV1DataBackupPost: async (backupRequest: BackupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'backupRequest' is not null or undefined
            assertParamExists('createBackupApiV1DataBackupPost', 'backupRequest', backupRequest)
            const localVarPath = `/api/v1/data/backup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(backupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export data in specified format.
         * @summary Export Data
         * @param {ExportDataRequest} exportDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportDataApiV1DataExportPost: async (exportDataRequest: ExportDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportDataRequest' is not null or undefined
            assertParamExists('exportDataApiV1DataExportPost', 'exportDataRequest', exportDataRequest)
            const localVarPath = `/api/v1/data/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exportDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get storage statistics and usage information.
         * @summary Get Storage Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageStatsApiV1DataStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available backups.
         * @summary List Backups
         * @param {BackupType | null} [backupType] 
         * @param {string | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBackupsApiV1DataBackupsGet: async (backupType?: BackupType | null, status?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/data/backups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (backupType !== undefined) {
                localVarQueryParameter['backup_type'] = backupType;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restore data from a backup.
         * @summary Restore From Backup
         * @param {RestoreRequest} restoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreFromBackupApiV1DataRestorePost: async (restoreRequest: RestoreRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restoreRequest' is not null or undefined
            assertParamExists('restoreFromBackupApiV1DataRestorePost', 'restoreRequest', restoreRequest)
            const localVarPath = `/api/v1/data/restore`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restoreRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataManagementApi - functional programming interface
 * @export
 */
export const DataManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Bulk delete conversations.
         * @summary Bulk Delete Conversations
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestBody: Array<string | null>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Bulk delete documents.
         * @summary Bulk Delete Documents
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestBody: Array<string | null>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Bulk delete prompts.
         * @summary Bulk Delete Prompts
         * @param {Array<string | null>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestBody: Array<string | null>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.bulkDeletePromptsApiV1DataBulkDeletePromptsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a data backup.
         * @summary Create Backup
         * @param {BackupRequest} backupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBackupApiV1DataBackupPost(backupRequest: BackupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBackupApiV1DataBackupPost(backupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.createBackupApiV1DataBackupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Export data in specified format.
         * @summary Export Data
         * @param {ExportDataRequest} exportDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportDataApiV1DataExportPost(exportDataRequest: ExportDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportDataApiV1DataExportPost(exportDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.exportDataApiV1DataExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get storage statistics and usage information.
         * @summary Get Storage Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStorageStatsApiV1DataStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStorageStatsApiV1DataStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.getStorageStatsApiV1DataStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List available backups.
         * @summary List Backups
         * @param {BackupType | null} [backupType] 
         * @param {string | null} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBackupsApiV1DataBackupsGet(backupType?: BackupType | null, status?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackupListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBackupsApiV1DataBackupsGet(backupType, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.listBackupsApiV1DataBackupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Restore data from a backup.
         * @summary Restore From Backup
         * @param {RestoreRequest} restoreRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restoreFromBackupApiV1DataRestorePost(restoreRequest: RestoreRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestoreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restoreFromBackupApiV1DataRestorePost(restoreRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DataManagementApi.restoreFromBackupApiV1DataRestorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DataManagementApi - factory interface
 * @export
 */
export const DataManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataManagementApiFp(configuration)
    return {
        /**
         * Bulk delete conversations.
         * @summary Bulk Delete Conversations
         * @param {DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters: DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk delete documents.
         * @summary Bulk Delete Documents
         * @param {DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters: DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Bulk delete prompts.
         * @summary Bulk Delete Prompts
         * @param {DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters: DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters.requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a data backup.
         * @summary Create Backup
         * @param {DataManagementApiCreateBackupApiV1DataBackupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBackupApiV1DataBackupPost(requestParameters: DataManagementApiCreateBackupApiV1DataBackupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BackupResponse> {
            return localVarFp.createBackupApiV1DataBackupPost(requestParameters.backupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Export data in specified format.
         * @summary Export Data
         * @param {DataManagementApiExportDataApiV1DataExportPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportDataApiV1DataExportPost(requestParameters: DataManagementApiExportDataApiV1DataExportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExportDataResponse> {
            return localVarFp.exportDataApiV1DataExportPost(requestParameters.exportDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get storage statistics and usage information.
         * @summary Get Storage Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStorageStatsApiV1DataStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<StorageStatsResponse> {
            return localVarFp.getStorageStatsApiV1DataStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List available backups.
         * @summary List Backups
         * @param {DataManagementApiListBackupsApiV1DataBackupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBackupsApiV1DataBackupsGet(requestParameters: DataManagementApiListBackupsApiV1DataBackupsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<BackupListResponse> {
            return localVarFp.listBackupsApiV1DataBackupsGet(requestParameters.backupType, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * Restore data from a backup.
         * @summary Restore From Backup
         * @param {DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreFromBackupApiV1DataRestorePost(requestParameters: DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestoreResponse> {
            return localVarFp.restoreFromBackupApiV1DataRestorePost(requestParameters.restoreRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataManagementApi - interface
 * @export
 * @interface DataManagementApi
 */
export interface DataManagementApiInterface {
    /**
     * Bulk delete conversations.
     * @summary Bulk Delete Conversations
     * @param {DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters: DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Bulk delete documents.
     * @summary Bulk Delete Documents
     * @param {DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters: DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Bulk delete prompts.
     * @summary Bulk Delete Prompts
     * @param {DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters: DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Create a data backup.
     * @summary Create Backup
     * @param {DataManagementApiCreateBackupApiV1DataBackupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    createBackupApiV1DataBackupPost(requestParameters: DataManagementApiCreateBackupApiV1DataBackupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BackupResponse>;

    /**
     * Export data in specified format.
     * @summary Export Data
     * @param {DataManagementApiExportDataApiV1DataExportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    exportDataApiV1DataExportPost(requestParameters: DataManagementApiExportDataApiV1DataExportPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExportDataResponse>;

    /**
     * Get storage statistics and usage information.
     * @summary Get Storage Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    getStorageStatsApiV1DataStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<StorageStatsResponse>;

    /**
     * List available backups.
     * @summary List Backups
     * @param {DataManagementApiListBackupsApiV1DataBackupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    listBackupsApiV1DataBackupsGet(requestParameters?: DataManagementApiListBackupsApiV1DataBackupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BackupListResponse>;

    /**
     * Restore data from a backup.
     * @summary Restore From Backup
     * @param {DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    restoreFromBackupApiV1DataRestorePost(requestParameters: DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<RestoreResponse>;

}

/**
 * Request parameters for bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest
 */
export interface DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest {
    /**
     * 
     * @type {Array<string | null>}
     * @memberof DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPost
     */
    readonly requestBody: Array<string | null>
}

/**
 * Request parameters for bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest
 */
export interface DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest {
    /**
     * 
     * @type {Array<string | null>}
     * @memberof DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost
     */
    readonly requestBody: Array<string | null>
}

/**
 * Request parameters for bulkDeletePromptsApiV1DataBulkDeletePromptsPost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest
 */
export interface DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest {
    /**
     * 
     * @type {Array<string | null>}
     * @memberof DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPost
     */
    readonly requestBody: Array<string | null>
}

/**
 * Request parameters for createBackupApiV1DataBackupPost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiCreateBackupApiV1DataBackupPostRequest
 */
export interface DataManagementApiCreateBackupApiV1DataBackupPostRequest {
    /**
     * 
     * @type {BackupRequest}
     * @memberof DataManagementApiCreateBackupApiV1DataBackupPost
     */
    readonly backupRequest: BackupRequest
}

/**
 * Request parameters for exportDataApiV1DataExportPost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiExportDataApiV1DataExportPostRequest
 */
export interface DataManagementApiExportDataApiV1DataExportPostRequest {
    /**
     * 
     * @type {ExportDataRequest}
     * @memberof DataManagementApiExportDataApiV1DataExportPost
     */
    readonly exportDataRequest: ExportDataRequest
}

/**
 * Request parameters for listBackupsApiV1DataBackupsGet operation in DataManagementApi.
 * @export
 * @interface DataManagementApiListBackupsApiV1DataBackupsGetRequest
 */
export interface DataManagementApiListBackupsApiV1DataBackupsGetRequest {
    /**
     * 
     * @type {BackupType}
     * @memberof DataManagementApiListBackupsApiV1DataBackupsGet
     */
    readonly backupType?: BackupType | null

    /**
     * 
     * @type {string}
     * @memberof DataManagementApiListBackupsApiV1DataBackupsGet
     */
    readonly status?: string | null
}

/**
 * Request parameters for restoreFromBackupApiV1DataRestorePost operation in DataManagementApi.
 * @export
 * @interface DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest
 */
export interface DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest {
    /**
     * 
     * @type {RestoreRequest}
     * @memberof DataManagementApiRestoreFromBackupApiV1DataRestorePost
     */
    readonly restoreRequest: RestoreRequest
}

/**
 * DataManagementApi - object-oriented interface
 * @export
 * @class DataManagementApi
 * @extends {BaseAPI}
 */
export class DataManagementApi extends BaseAPI implements DataManagementApiInterface {
    /**
     * Bulk delete conversations.
     * @summary Bulk Delete Conversations
     * @param {DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters: DataManagementApiBulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk delete documents.
     * @summary Bulk Delete Documents
     * @param {DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters: DataManagementApiBulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Bulk delete prompts.
     * @summary Bulk Delete Prompts
     * @param {DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters: DataManagementApiBulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters.requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a data backup.
     * @summary Create Backup
     * @param {DataManagementApiCreateBackupApiV1DataBackupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public createBackupApiV1DataBackupPost(requestParameters: DataManagementApiCreateBackupApiV1DataBackupPostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).createBackupApiV1DataBackupPost(requestParameters.backupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export data in specified format.
     * @summary Export Data
     * @param {DataManagementApiExportDataApiV1DataExportPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public exportDataApiV1DataExportPost(requestParameters: DataManagementApiExportDataApiV1DataExportPostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).exportDataApiV1DataExportPost(requestParameters.exportDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get storage statistics and usage information.
     * @summary Get Storage Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public getStorageStatsApiV1DataStatsGet(options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).getStorageStatsApiV1DataStatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available backups.
     * @summary List Backups
     * @param {DataManagementApiListBackupsApiV1DataBackupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public listBackupsApiV1DataBackupsGet(requestParameters: DataManagementApiListBackupsApiV1DataBackupsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).listBackupsApiV1DataBackupsGet(requestParameters.backupType, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restore data from a backup.
     * @summary Restore From Backup
     * @param {DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApi
     */
    public restoreFromBackupApiV1DataRestorePost(requestParameters: DataManagementApiRestoreFromBackupApiV1DataRestorePostRequest, options?: RawAxiosRequestConfig) {
        return DataManagementApiFp(this.configuration).restoreFromBackupApiV1DataRestorePost(requestParameters.restoreRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

