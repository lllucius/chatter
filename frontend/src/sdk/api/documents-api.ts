/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DocumentChunksResponse } from '../models';
// @ts-ignore
import type { DocumentListResponse } from '../models';
// @ts-ignore
import type { DocumentProcessingRequest } from '../models';
// @ts-ignore
import type { DocumentProcessingResponse } from '../models';
// @ts-ignore
import type { DocumentResponse } from '../models';
// @ts-ignore
import type { DocumentSearchRequest } from '../models';
// @ts-ignore
import type { DocumentSearchResponse } from '../models';
// @ts-ignore
import type { DocumentStatsResponse } from '../models';
// @ts-ignore
import type { DocumentStatus } from '../models';
// @ts-ignore
import type { DocumentType } from '../models';
// @ts-ignore
import type { DocumentUpdate } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete document.  Args:     document_id: Document ID     request: Delete request parameters     current_user: Current authenticated user     document_service: Document service  Returns:     Success message
         * @summary Delete Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentApiV1DocumentsDocumentIdDelete: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteDocumentApiV1DocumentsDocumentIdDelete', 'documentId', documentId)
            const localVarPath = `/api/v1/documents/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download original document file.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     File download response
         * @summary Download Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadDocumentApiV1DocumentsDocumentIdDownloadGet: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('downloadDocumentApiV1DocumentsDocumentIdDownloadGet', 'documentId', documentId)
            const localVarPath = `/api/v1/documents/{document_id}/download`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document details.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Document information
         * @summary Get Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentApiV1DocumentsDocumentIdGet: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentApiV1DocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/api/v1/documents/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document chunks.  Args:     document_id: Document ID     limit: Maximum number of results     offset: Number of results to skip     current_user: Current authenticated user     document_service: Document service  Returns:     List of document chunks with pagination
         * @summary Get Document Chunks
         * @param {string} documentId 
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentChunksApiV1DocumentsDocumentIdChunksGet: async (documentId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('getDocumentChunksApiV1DocumentsDocumentIdChunksGet', 'documentId', documentId)
            const localVarPath = `/api/v1/documents/{document_id}/chunks`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get document statistics.  Args:     current_user: Current authenticated user     document_service: Document service  Returns:     Document statistics
         * @summary Get Document Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentStatsApiV1DocumentsStatsOverviewGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/documents/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user\'s documents.  Args:     status: Filter by document status     document_type: Filter by document type     tags: Filter by tags     owner_id: Filter by owner (admin only)     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     document_service: Document service  Returns:     List of documents with pagination info
         * @summary List Documents
         * @param {DocumentStatus | null} [status] Filter by status
         * @param {DocumentType | null} [documentType] Filter by document type
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {string | null} [ownerId] Filter by owner (admin only)
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentsApiV1DocumentsGet: async (status?: DocumentStatus | null, documentType?: DocumentType | null, tags?: Array<string> | null, ownerId?: string | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (documentType !== undefined) {
                localVarQueryParameter['document_type'] = documentType;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (ownerId !== undefined) {
                localVarQueryParameter['owner_id'] = ownerId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger document processing.  Args:     document_id: Document ID     processing_request: Processing request     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Process Document
         * @param {string} documentId 
         * @param {DocumentProcessingRequest} documentProcessingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processDocumentApiV1DocumentsDocumentIdProcessPost: async (documentId: string, documentProcessingRequest: DocumentProcessingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('processDocumentApiV1DocumentsDocumentIdProcessPost', 'documentId', documentId)
            // verify required parameter 'documentProcessingRequest' is not null or undefined
            assertParamExists('processDocumentApiV1DocumentsDocumentIdProcessPost', 'documentProcessingRequest', documentProcessingRequest)
            const localVarPath = `/api/v1/documents/{document_id}/process`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentProcessingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reprocess an existing document.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Reprocess Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reprocessDocumentApiV1DocumentsDocumentIdReprocessPost: async (documentId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('reprocessDocumentApiV1DocumentsDocumentIdReprocessPost', 'documentId', documentId)
            const localVarPath = `/api/v1/documents/{document_id}/reprocess`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search documents using vector similarity.  Args:     search_request: Search request     current_user: Current authenticated user     document_service: Document service  Returns:     Search results
         * @summary Search Documents
         * @param {DocumentSearchRequest} documentSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDocumentsApiV1DocumentsSearchPost: async (documentSearchRequest: DocumentSearchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentSearchRequest' is not null or undefined
            assertParamExists('searchDocumentsApiV1DocumentsSearchPost', 'documentSearchRequest', documentSearchRequest)
            const localVarPath = `/api/v1/documents/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentSearchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update document metadata.  Args:     document_id: Document ID     update_data: Update data     current_user: Current authenticated user     document_service: Document service  Returns:     Updated document information
         * @summary Update Document
         * @param {string} documentId 
         * @param {DocumentUpdate} documentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentApiV1DocumentsDocumentIdPut: async (documentId: string, documentUpdate: DocumentUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('updateDocumentApiV1DocumentsDocumentIdPut', 'documentId', documentId)
            // verify required parameter 'documentUpdate' is not null or undefined
            assertParamExists('updateDocumentApiV1DocumentsDocumentIdPut', 'documentUpdate', documentUpdate)
            const localVarPath = `/api/v1/documents/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a document.  Args:     file: Document file to upload     title: Document title     description: Document description     tags: Document tags (JSON array string)     chunk_size: Text chunk size for processing     chunk_overlap: Text chunk overlap     is_public: Whether document is public     current_user: Current authenticated user     document_service: Document service  Returns:     Created document information
         * @summary Upload Document
         * @param {File} file 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [tags] 
         * @param {number} [chunkSize] 
         * @param {number} [chunkOverlap] 
         * @param {boolean} [isPublic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocumentApiV1DocumentsUploadPost: async (file: File, title?: string, description?: string, tags?: string, chunkSize?: number, chunkOverlap?: number, isPublic?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadDocumentApiV1DocumentsUploadPost', 'file', file)
            const localVarPath = `/api/v1/documents/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (tags !== undefined) { 
                localVarFormParams.append('tags', tags as any);
            }
    
            if (chunkSize !== undefined) { 
                localVarFormParams.append('chunk_size', chunkSize as any);
            }
    
            if (chunkOverlap !== undefined) { 
                localVarFormParams.append('chunk_overlap', chunkOverlap as any);
            }
    
            if (isPublic !== undefined) { 
                localVarFormParams.append('is_public', String(isPublic) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete document.  Args:     document_id: Document ID     request: Delete request parameters     current_user: Current authenticated user     document_service: Document service  Returns:     Success message
         * @summary Delete Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocumentApiV1DocumentsDocumentIdDelete(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentApiV1DocumentsDocumentIdDelete(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.deleteDocumentApiV1DocumentsDocumentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Download original document file.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     File download response
         * @summary Download Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadDocumentApiV1DocumentsDocumentIdDownloadGet(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadDocumentApiV1DocumentsDocumentIdDownloadGet(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.downloadDocumentApiV1DocumentsDocumentIdDownloadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document details.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Document information
         * @summary Get Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentApiV1DocumentsDocumentIdGet(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentApiV1DocumentsDocumentIdGet(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.getDocumentApiV1DocumentsDocumentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document chunks.  Args:     document_id: Document ID     limit: Maximum number of results     offset: Number of results to skip     current_user: Current authenticated user     document_service: Document service  Returns:     List of document chunks with pagination
         * @summary Get Document Chunks
         * @param {string} documentId 
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentChunksApiV1DocumentsDocumentIdChunksGet(documentId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentChunksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentChunksApiV1DocumentsDocumentIdChunksGet(documentId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.getDocumentChunksApiV1DocumentsDocumentIdChunksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get document statistics.  Args:     current_user: Current authenticated user     document_service: Document service  Returns:     Document statistics
         * @summary Get Document Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentStatsApiV1DocumentsStatsOverviewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentStatsApiV1DocumentsStatsOverviewGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.getDocumentStatsApiV1DocumentsStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List user\'s documents.  Args:     status: Filter by document status     document_type: Filter by document type     tags: Filter by tags     owner_id: Filter by owner (admin only)     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     document_service: Document service  Returns:     List of documents with pagination info
         * @summary List Documents
         * @param {DocumentStatus | null} [status] Filter by status
         * @param {DocumentType | null} [documentType] Filter by document type
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {string | null} [ownerId] Filter by owner (admin only)
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDocumentsApiV1DocumentsGet(status?: DocumentStatus | null, documentType?: DocumentType | null, tags?: Array<string> | null, ownerId?: string | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDocumentsApiV1DocumentsGet(status, documentType, tags, ownerId, limit, offset, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.listDocumentsApiV1DocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trigger document processing.  Args:     document_id: Document ID     processing_request: Processing request     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Process Document
         * @param {string} documentId 
         * @param {DocumentProcessingRequest} documentProcessingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processDocumentApiV1DocumentsDocumentIdProcessPost(documentId: string, documentProcessingRequest: DocumentProcessingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentProcessingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processDocumentApiV1DocumentsDocumentIdProcessPost(documentId, documentProcessingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.processDocumentApiV1DocumentsDocumentIdProcessPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reprocess an existing document.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Reprocess Document
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(documentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentProcessingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(documentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.reprocessDocumentApiV1DocumentsDocumentIdReprocessPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search documents using vector similarity.  Args:     search_request: Search request     current_user: Current authenticated user     document_service: Document service  Returns:     Search results
         * @summary Search Documents
         * @param {DocumentSearchRequest} documentSearchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDocumentsApiV1DocumentsSearchPost(documentSearchRequest: DocumentSearchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchDocumentsApiV1DocumentsSearchPost(documentSearchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.searchDocumentsApiV1DocumentsSearchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update document metadata.  Args:     document_id: Document ID     update_data: Update data     current_user: Current authenticated user     document_service: Document service  Returns:     Updated document information
         * @summary Update Document
         * @param {string} documentId 
         * @param {DocumentUpdate} documentUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDocumentApiV1DocumentsDocumentIdPut(documentId: string, documentUpdate: DocumentUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentApiV1DocumentsDocumentIdPut(documentId, documentUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.updateDocumentApiV1DocumentsDocumentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload a document.  Args:     file: Document file to upload     title: Document title     description: Document description     tags: Document tags (JSON array string)     chunk_size: Text chunk size for processing     chunk_overlap: Text chunk overlap     is_public: Whether document is public     current_user: Current authenticated user     document_service: Document service  Returns:     Created document information
         * @summary Upload Document
         * @param {File} file 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [tags] 
         * @param {number} [chunkSize] 
         * @param {number} [chunkOverlap] 
         * @param {boolean} [isPublic] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDocumentApiV1DocumentsUploadPost(file: File, title?: string, description?: string, tags?: string, chunkSize?: number, chunkOverlap?: number, isPublic?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDocumentApiV1DocumentsUploadPost(file, title, description, tags, chunkSize, chunkOverlap, isPublic, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DocumentsApi.uploadDocumentApiV1DocumentsUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * Delete document.  Args:     document_id: Document ID     request: Delete request parameters     current_user: Current authenticated user     document_service: Document service  Returns:     Success message
         * @summary Delete Document
         * @param {DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocumentApiV1DocumentsDocumentIdDelete(requestParameters: DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.deleteDocumentApiV1DocumentsDocumentIdDelete(requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Download original document file.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     File download response
         * @summary Download Document
         * @param {DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadDocumentApiV1DocumentsDocumentIdDownloadGet(requestParameters: DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.downloadDocumentApiV1DocumentsDocumentIdDownloadGet(requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get document details.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Document information
         * @summary Get Document
         * @param {DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentApiV1DocumentsDocumentIdGet(requestParameters: DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse> {
            return localVarFp.getDocumentApiV1DocumentsDocumentIdGet(requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get document chunks.  Args:     document_id: Document ID     limit: Maximum number of results     offset: Number of results to skip     current_user: Current authenticated user     document_service: Document service  Returns:     List of document chunks with pagination
         * @summary Get Document Chunks
         * @param {DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentChunksApiV1DocumentsDocumentIdChunksGet(requestParameters: DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentChunksResponse> {
            return localVarFp.getDocumentChunksApiV1DocumentsDocumentIdChunksGet(requestParameters.documentId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get document statistics.  Args:     current_user: Current authenticated user     document_service: Document service  Returns:     Document statistics
         * @summary Get Document Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentStatsApiV1DocumentsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<DocumentStatsResponse> {
            return localVarFp.getDocumentStatsApiV1DocumentsStatsOverviewGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List user\'s documents.  Args:     status: Filter by document status     document_type: Filter by document type     tags: Filter by tags     owner_id: Filter by owner (admin only)     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     document_service: Document service  Returns:     List of documents with pagination info
         * @summary List Documents
         * @param {DocumentsApiListDocumentsApiV1DocumentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDocumentsApiV1DocumentsGet(requestParameters: DocumentsApiListDocumentsApiV1DocumentsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<DocumentListResponse> {
            return localVarFp.listDocumentsApiV1DocumentsGet(requestParameters.status, requestParameters.documentType, requestParameters.tags, requestParameters.ownerId, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger document processing.  Args:     document_id: Document ID     processing_request: Processing request     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Process Document
         * @param {DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processDocumentApiV1DocumentsDocumentIdProcessPost(requestParameters: DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentProcessingResponse> {
            return localVarFp.processDocumentApiV1DocumentsDocumentIdProcessPost(requestParameters.documentId, requestParameters.documentProcessingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Reprocess an existing document.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
         * @summary Reprocess Document
         * @param {DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(requestParameters: DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentProcessingResponse> {
            return localVarFp.reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(requestParameters.documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Search documents using vector similarity.  Args:     search_request: Search request     current_user: Current authenticated user     document_service: Document service  Returns:     Search results
         * @summary Search Documents
         * @param {DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDocumentsApiV1DocumentsSearchPost(requestParameters: DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentSearchResponse> {
            return localVarFp.searchDocumentsApiV1DocumentsSearchPost(requestParameters.documentSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update document metadata.  Args:     document_id: Document ID     update_data: Update data     current_user: Current authenticated user     document_service: Document service  Returns:     Updated document information
         * @summary Update Document
         * @param {DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDocumentApiV1DocumentsDocumentIdPut(requestParameters: DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse> {
            return localVarFp.updateDocumentApiV1DocumentsDocumentIdPut(requestParameters.documentId, requestParameters.documentUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload a document.  Args:     file: Document file to upload     title: Document title     description: Document description     tags: Document tags (JSON array string)     chunk_size: Text chunk size for processing     chunk_overlap: Text chunk overlap     is_public: Whether document is public     current_user: Current authenticated user     document_service: Document service  Returns:     Created document information
         * @summary Upload Document
         * @param {DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDocumentApiV1DocumentsUploadPost(requestParameters: DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse> {
            return localVarFp.uploadDocumentApiV1DocumentsUploadPost(requestParameters.file, requestParameters.title, requestParameters.description, requestParameters.tags, requestParameters.chunkSize, requestParameters.chunkOverlap, requestParameters.isPublic, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - interface
 * @export
 * @interface DocumentsApi
 */
export interface DocumentsApiInterface {
    /**
     * Delete document.  Args:     document_id: Document ID     request: Delete request parameters     current_user: Current authenticated user     document_service: Document service  Returns:     Success message
     * @summary Delete Document
     * @param {DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    deleteDocumentApiV1DocumentsDocumentIdDelete(requestParameters: DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Download original document file.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     File download response
     * @summary Download Document
     * @param {DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    downloadDocumentApiV1DocumentsDocumentIdDownloadGet(requestParameters: DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get document details.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Document information
     * @summary Get Document
     * @param {DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentApiV1DocumentsDocumentIdGet(requestParameters: DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse>;

    /**
     * Get document chunks.  Args:     document_id: Document ID     limit: Maximum number of results     offset: Number of results to skip     current_user: Current authenticated user     document_service: Document service  Returns:     List of document chunks with pagination
     * @summary Get Document Chunks
     * @param {DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentChunksApiV1DocumentsDocumentIdChunksGet(requestParameters: DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentChunksResponse>;

    /**
     * Get document statistics.  Args:     current_user: Current authenticated user     document_service: Document service  Returns:     Document statistics
     * @summary Get Document Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    getDocumentStatsApiV1DocumentsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<DocumentStatsResponse>;

    /**
     * List user\'s documents.  Args:     status: Filter by document status     document_type: Filter by document type     tags: Filter by tags     owner_id: Filter by owner (admin only)     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     document_service: Document service  Returns:     List of documents with pagination info
     * @summary List Documents
     * @param {DocumentsApiListDocumentsApiV1DocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    listDocumentsApiV1DocumentsGet(requestParameters?: DocumentsApiListDocumentsApiV1DocumentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentListResponse>;

    /**
     * Trigger document processing.  Args:     document_id: Document ID     processing_request: Processing request     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
     * @summary Process Document
     * @param {DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    processDocumentApiV1DocumentsDocumentIdProcessPost(requestParameters: DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentProcessingResponse>;

    /**
     * Reprocess an existing document.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
     * @summary Reprocess Document
     * @param {DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(requestParameters: DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentProcessingResponse>;

    /**
     * Search documents using vector similarity.  Args:     search_request: Search request     current_user: Current authenticated user     document_service: Document service  Returns:     Search results
     * @summary Search Documents
     * @param {DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    searchDocumentsApiV1DocumentsSearchPost(requestParameters: DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentSearchResponse>;

    /**
     * Update document metadata.  Args:     document_id: Document ID     update_data: Update data     current_user: Current authenticated user     document_service: Document service  Returns:     Updated document information
     * @summary Update Document
     * @param {DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    updateDocumentApiV1DocumentsDocumentIdPut(requestParameters: DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse>;

    /**
     * Upload a document.  Args:     file: Document file to upload     title: Document title     description: Document description     tags: Document tags (JSON array string)     chunk_size: Text chunk size for processing     chunk_overlap: Text chunk overlap     is_public: Whether document is public     current_user: Current authenticated user     document_service: Document service  Returns:     Created document information
     * @summary Upload Document
     * @param {DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApiInterface
     */
    uploadDocumentApiV1DocumentsUploadPost(requestParameters: DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DocumentResponse>;

}

/**
 * Request parameters for deleteDocumentApiV1DocumentsDocumentIdDelete operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest
 */
export interface DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDelete
     */
    readonly documentId: string
}

/**
 * Request parameters for downloadDocumentApiV1DocumentsDocumentIdDownloadGet operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest
 */
export interface DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGet
     */
    readonly documentId: string
}

/**
 * Request parameters for getDocumentApiV1DocumentsDocumentIdGet operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest
 */
export interface DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiGetDocumentApiV1DocumentsDocumentIdGet
     */
    readonly documentId: string
}

/**
 * Request parameters for getDocumentChunksApiV1DocumentsDocumentIdChunksGet operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest
 */
export interface DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGet
     */
    readonly documentId: string

    /**
     * Maximum number of results
     * @type {number}
     * @memberof DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGet
     */
    readonly limit?: number

    /**
     * Number of results to skip
     * @type {number}
     * @memberof DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGet
     */
    readonly offset?: number
}

/**
 * Request parameters for listDocumentsApiV1DocumentsGet operation in DocumentsApi.
 * @export
 * @interface DocumentsApiListDocumentsApiV1DocumentsGetRequest
 */
export interface DocumentsApiListDocumentsApiV1DocumentsGetRequest {
    /**
     * Filter by status
     * @type {DocumentStatus}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly status?: DocumentStatus | null

    /**
     * Filter by document type
     * @type {DocumentType}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly documentType?: DocumentType | null

    /**
     * Filter by tags
     * @type {Array<string>}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly tags?: Array<string> | null

    /**
     * Filter by owner (admin only)
     * @type {string}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly ownerId?: string | null

    /**
     * Maximum number of results
     * @type {number}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly limit?: number

    /**
     * Number of results to skip
     * @type {number}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly offset?: number

    /**
     * Sort field
     * @type {string}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly sortBy?: string

    /**
     * Sort order
     * @type {string}
     * @memberof DocumentsApiListDocumentsApiV1DocumentsGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for processDocumentApiV1DocumentsDocumentIdProcessPost operation in DocumentsApi.
 * @export
 * @interface DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest
 */
export interface DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPost
     */
    readonly documentId: string

    /**
     * 
     * @type {DocumentProcessingRequest}
     * @memberof DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPost
     */
    readonly documentProcessingRequest: DocumentProcessingRequest
}

/**
 * Request parameters for reprocessDocumentApiV1DocumentsDocumentIdReprocessPost operation in DocumentsApi.
 * @export
 * @interface DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest
 */
export interface DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPost
     */
    readonly documentId: string
}

/**
 * Request parameters for searchDocumentsApiV1DocumentsSearchPost operation in DocumentsApi.
 * @export
 * @interface DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest
 */
export interface DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest {
    /**
     * 
     * @type {DocumentSearchRequest}
     * @memberof DocumentsApiSearchDocumentsApiV1DocumentsSearchPost
     */
    readonly documentSearchRequest: DocumentSearchRequest
}

/**
 * Request parameters for updateDocumentApiV1DocumentsDocumentIdPut operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest
 */
export interface DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPut
     */
    readonly documentId: string

    /**
     * 
     * @type {DocumentUpdate}
     * @memberof DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPut
     */
    readonly documentUpdate: DocumentUpdate
}

/**
 * Request parameters for uploadDocumentApiV1DocumentsUploadPost operation in DocumentsApi.
 * @export
 * @interface DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest
 */
export interface DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest {
    /**
     * 
     * @type {File}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly file: File

    /**
     * 
     * @type {string}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly title?: string

    /**
     * 
     * @type {string}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly description?: string

    /**
     * 
     * @type {string}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly tags?: string

    /**
     * 
     * @type {number}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly chunkSize?: number

    /**
     * 
     * @type {number}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly chunkOverlap?: number

    /**
     * 
     * @type {boolean}
     * @memberof DocumentsApiUploadDocumentApiV1DocumentsUploadPost
     */
    readonly isPublic?: boolean
}

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI implements DocumentsApiInterface {
    /**
     * Delete document.  Args:     document_id: Document ID     request: Delete request parameters     current_user: Current authenticated user     document_service: Document service  Returns:     Success message
     * @summary Delete Document
     * @param {DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public deleteDocumentApiV1DocumentsDocumentIdDelete(requestParameters: DocumentsApiDeleteDocumentApiV1DocumentsDocumentIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).deleteDocumentApiV1DocumentsDocumentIdDelete(requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Download original document file.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     File download response
     * @summary Download Document
     * @param {DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public downloadDocumentApiV1DocumentsDocumentIdDownloadGet(requestParameters: DocumentsApiDownloadDocumentApiV1DocumentsDocumentIdDownloadGetRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).downloadDocumentApiV1DocumentsDocumentIdDownloadGet(requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document details.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Document information
     * @summary Get Document
     * @param {DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocumentApiV1DocumentsDocumentIdGet(requestParameters: DocumentsApiGetDocumentApiV1DocumentsDocumentIdGetRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).getDocumentApiV1DocumentsDocumentIdGet(requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document chunks.  Args:     document_id: Document ID     limit: Maximum number of results     offset: Number of results to skip     current_user: Current authenticated user     document_service: Document service  Returns:     List of document chunks with pagination
     * @summary Get Document Chunks
     * @param {DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocumentChunksApiV1DocumentsDocumentIdChunksGet(requestParameters: DocumentsApiGetDocumentChunksApiV1DocumentsDocumentIdChunksGetRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).getDocumentChunksApiV1DocumentsDocumentIdChunksGet(requestParameters.documentId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get document statistics.  Args:     current_user: Current authenticated user     document_service: Document service  Returns:     Document statistics
     * @summary Get Document Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocumentStatsApiV1DocumentsStatsOverviewGet(options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).getDocumentStatsApiV1DocumentsStatsOverviewGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user\'s documents.  Args:     status: Filter by document status     document_type: Filter by document type     tags: Filter by tags     owner_id: Filter by owner (admin only)     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     document_service: Document service  Returns:     List of documents with pagination info
     * @summary List Documents
     * @param {DocumentsApiListDocumentsApiV1DocumentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public listDocumentsApiV1DocumentsGet(requestParameters: DocumentsApiListDocumentsApiV1DocumentsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).listDocumentsApiV1DocumentsGet(requestParameters.status, requestParameters.documentType, requestParameters.tags, requestParameters.ownerId, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger document processing.  Args:     document_id: Document ID     processing_request: Processing request     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
     * @summary Process Document
     * @param {DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public processDocumentApiV1DocumentsDocumentIdProcessPost(requestParameters: DocumentsApiProcessDocumentApiV1DocumentsDocumentIdProcessPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).processDocumentApiV1DocumentsDocumentIdProcessPost(requestParameters.documentId, requestParameters.documentProcessingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reprocess an existing document.  Args:     document_id: Document ID     current_user: Current authenticated user     document_service: Document service  Returns:     Processing status
     * @summary Reprocess Document
     * @param {DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(requestParameters: DocumentsApiReprocessDocumentApiV1DocumentsDocumentIdReprocessPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).reprocessDocumentApiV1DocumentsDocumentIdReprocessPost(requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search documents using vector similarity.  Args:     search_request: Search request     current_user: Current authenticated user     document_service: Document service  Returns:     Search results
     * @summary Search Documents
     * @param {DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public searchDocumentsApiV1DocumentsSearchPost(requestParameters: DocumentsApiSearchDocumentsApiV1DocumentsSearchPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).searchDocumentsApiV1DocumentsSearchPost(requestParameters.documentSearchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update document metadata.  Args:     document_id: Document ID     update_data: Update data     current_user: Current authenticated user     document_service: Document service  Returns:     Updated document information
     * @summary Update Document
     * @param {DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public updateDocumentApiV1DocumentsDocumentIdPut(requestParameters: DocumentsApiUpdateDocumentApiV1DocumentsDocumentIdPutRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).updateDocumentApiV1DocumentsDocumentIdPut(requestParameters.documentId, requestParameters.documentUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload a document.  Args:     file: Document file to upload     title: Document title     description: Document description     tags: Document tags (JSON array string)     chunk_size: Text chunk size for processing     chunk_overlap: Text chunk overlap     is_public: Whether document is public     current_user: Current authenticated user     document_service: Document service  Returns:     Created document information
     * @summary Upload Document
     * @param {DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public uploadDocumentApiV1DocumentsUploadPost(requestParameters: DocumentsApiUploadDocumentApiV1DocumentsUploadPostRequest, options?: RawAxiosRequestConfig) {
        return DocumentsApiFp(this.configuration).uploadDocumentApiV1DocumentsUploadPost(requestParameters.file, requestParameters.title, requestParameters.description, requestParameters.tags, requestParameters.chunkSize, requestParameters.chunkOverlap, requestParameters.isPublic, options).then((request) => request(this.axios, this.basePath));
    }
}

