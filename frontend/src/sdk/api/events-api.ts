/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SSEStatsResponse } from '../models';
// @ts-ignore
import type { TestEventResponse } from '../models';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated user (must be admin)  Returns:     StreamingResponse with SSE format for all events
         * @summary Admin Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEventsStreamApiV1EventsAdminStreamGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events/admin/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
         * @summary Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsStreamApiV1EventsStreamGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SSE service statistics.  Args:     current_user: Current authenticated user  Returns:     SSE service statistics
         * @summary Get Sse Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSseStatsApiV1EventsStatsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Broadcast Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerBroadcastTestApiV1EventsBroadcastTestPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events/broadcast-test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Test Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTestEventApiV1EventsTestEventPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/events/test-event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated user (must be admin)  Returns:     StreamingResponse with SSE format for all events
         * @summary Admin Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminEventsStreamApiV1EventsAdminStreamGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminEventsStreamApiV1EventsAdminStreamGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.adminEventsStreamApiV1EventsAdminStreamGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
         * @summary Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventsStreamApiV1EventsStreamGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventsStreamApiV1EventsStreamGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.eventsStreamApiV1EventsStreamGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get SSE service statistics.  Args:     current_user: Current authenticated user  Returns:     SSE service statistics
         * @summary Get Sse Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSseStatsApiV1EventsStatsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SSEStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSseStatsApiV1EventsStatsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.getSseStatsApiV1EventsStatsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Broadcast Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerBroadcastTestApiV1EventsBroadcastTestPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerBroadcastTestApiV1EventsBroadcastTestPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.triggerBroadcastTestApiV1EventsBroadcastTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Test Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerTestEventApiV1EventsTestEventPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerTestEventApiV1EventsTestEventPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.triggerTestEventApiV1EventsTestEventPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated user (must be admin)  Returns:     StreamingResponse with SSE format for all events
         * @summary Admin Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminEventsStreamApiV1EventsAdminStreamGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.adminEventsStreamApiV1EventsAdminStreamGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
         * @summary Events Stream
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventsStreamApiV1EventsStreamGet(options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.eventsStreamApiV1EventsStreamGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get SSE service statistics.  Args:     current_user: Current authenticated user  Returns:     SSE service statistics
         * @summary Get Sse Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSseStatsApiV1EventsStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<SSEStatsResponse> {
            return localVarFp.getSseStatsApiV1EventsStatsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Broadcast Test
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerBroadcastTestApiV1EventsBroadcastTestPost(options?: RawAxiosRequestConfig): AxiosPromise<TestEventResponse> {
            return localVarFp.triggerBroadcastTestApiV1EventsBroadcastTestPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
         * @summary Trigger Test Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTestEventApiV1EventsTestEventPost(options?: RawAxiosRequestConfig): AxiosPromise<TestEventResponse> {
            return localVarFp.triggerTestEventApiV1EventsTestEventPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsApi - interface
 * @export
 * @interface EventsApi
 */
export interface EventsApiInterface {
    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated user (must be admin)  Returns:     StreamingResponse with SSE format for all events
     * @summary Admin Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    adminEventsStreamApiV1EventsAdminStreamGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * @summary Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsStreamApiV1EventsStreamGet(options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated user  Returns:     SSE service statistics
     * @summary Get Sse Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getSseStatsApiV1EventsStatsGet(options?: RawAxiosRequestConfig): AxiosPromise<SSEStatsResponse>;

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * @summary Trigger Broadcast Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    triggerBroadcastTestApiV1EventsBroadcastTestPost(options?: RawAxiosRequestConfig): AxiosPromise<TestEventResponse>;

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * @summary Trigger Test Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    triggerTestEventApiV1EventsTestEventPost(options?: RawAxiosRequestConfig): AxiosPromise<TestEventResponse>;

}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI implements EventsApiInterface {
    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated user (must be admin)  Returns:     StreamingResponse with SSE format for all events
     * @summary Admin Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public adminEventsStreamApiV1EventsAdminStreamGet(options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).adminEventsStreamApiV1EventsAdminStreamGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * @summary Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public eventsStreamApiV1EventsStreamGet(options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).eventsStreamApiV1EventsStreamGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated user  Returns:     SSE service statistics
     * @summary Get Sse Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getSseStatsApiV1EventsStatsGet(options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).getSseStatsApiV1EventsStatsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * @summary Trigger Broadcast Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public triggerBroadcastTestApiV1EventsBroadcastTestPost(options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).triggerBroadcastTestApiV1EventsBroadcastTestPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * @summary Trigger Test Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public triggerTestEventApiV1EventsTestEventPost(options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).triggerTestEventApiV1EventsTestEventPost(options).then((request) => request(this.axios, this.basePath));
    }
}

