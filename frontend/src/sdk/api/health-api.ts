/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HealthCheckResponse } from '../models';
// @ts-ignore
import type { ReadinessCheckResponse } from '../models';
/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Basic health check endpoint.  Returns:     Health status
         * @summary Health Check Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckEndpointHealthzGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Liveness check endpoint for Kubernetes (alias for /healthz).  Returns:     Health status (same as /healthz)
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckLiveGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/live`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Readiness check endpoint with database connectivity.  Args:     session: Database session  Returns:     Readiness status with detailed checks
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckReadyzGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/readyz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Basic health check endpoint.  Returns:     Health status
         * @summary Health Check Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckEndpointHealthzGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckEndpointHealthzGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheckEndpointHealthzGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Liveness check endpoint for Kubernetes (alias for /healthz).  Returns:     Health status (same as /healthz)
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livenessCheckLiveGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.livenessCheckLiveGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.livenessCheckLiveGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Readiness check endpoint with database connectivity.  Args:     session: Database session  Returns:     Readiness status with detailed checks
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessCheckReadyzGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReadinessCheckResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessCheckReadyzGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessCheckReadyzGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Basic health check endpoint.  Returns:     Health status
         * @summary Health Check Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckEndpointHealthzGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckResponse> {
            return localVarFp.healthCheckEndpointHealthzGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Liveness check endpoint for Kubernetes (alias for /healthz).  Returns:     Health status (same as /healthz)
         * @summary Liveness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livenessCheckLiveGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckResponse> {
            return localVarFp.livenessCheckLiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Readiness check endpoint with database connectivity.  Args:     session: Database session  Returns:     Readiness status with detailed checks
         * @summary Readiness Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessCheckReadyzGet(options?: RawAxiosRequestConfig): AxiosPromise<ReadinessCheckResponse> {
            return localVarFp.readinessCheckReadyzGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - interface
 * @export
 * @interface HealthApi
 */
export interface HealthApiInterface {
    /**
     * Basic health check endpoint.  Returns:     Health status
     * @summary Health Check Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthCheckEndpointHealthzGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckResponse>;

    /**
     * Liveness check endpoint for Kubernetes (alias for /healthz).  Returns:     Health status (same as /healthz)
     * @summary Liveness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    livenessCheckLiveGet(options?: RawAxiosRequestConfig): AxiosPromise<HealthCheckResponse>;

    /**
     * Readiness check endpoint with database connectivity.  Args:     session: Database session  Returns:     Readiness status with detailed checks
     * @summary Readiness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    readinessCheckReadyzGet(options?: RawAxiosRequestConfig): AxiosPromise<ReadinessCheckResponse>;

}

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI implements HealthApiInterface {
    /**
     * Basic health check endpoint.  Returns:     Health status
     * @summary Health Check Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheckEndpointHealthzGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheckEndpointHealthzGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Liveness check endpoint for Kubernetes (alias for /healthz).  Returns:     Health status (same as /healthz)
     * @summary Liveness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public livenessCheckLiveGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).livenessCheckLiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Readiness check endpoint with database connectivity.  Args:     session: Database session  Returns:     Readiness status with detailed checks
     * @summary Readiness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessCheckReadyzGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessCheckReadyzGet(options).then((request) => request(this.axios, this.basePath));
    }
}

