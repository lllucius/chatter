/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { JobActionResponse } from '../models';
// @ts-ignore
import type { JobCreateRequest } from '../models';
// @ts-ignore
import type { JobListResponse } from '../models';
// @ts-ignore
import type { JobPriority } from '../models';
// @ts-ignore
import type { JobResponse } from '../models';
// @ts-ignore
import type { JobStatsResponse } from '../models';
// @ts-ignore
import type { JobStatus } from '../models';
/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
         * @summary Cancel Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobApiV1JobsJobIdCancelPost: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('cancelJobApiV1JobsJobIdCancelPost', 'jobId', jobId)
            const localVarPath = `/api/v1/jobs/{job_id}/cancel`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
         * @summary Create Job
         * @param {JobCreateRequest} jobCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobApiV1JobsPost: async (jobCreateRequest: JobCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobCreateRequest' is not null or undefined
            assertParamExists('createJobApiV1JobsPost', 'jobCreateRequest', jobCreateRequest)
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
         * @summary Get Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiV1JobsJobIdGet: async (jobId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('getJobApiV1JobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/api/v1/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
         * @summary Get Job Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatsApiV1JobsStatsOverviewGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List jobs with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs
         * @summary List Jobs
         * @param {JobStatus | null} [status] 
         * @param {JobPriority | null} [priority] 
         * @param {string | null} [functionName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobsApiV1JobsGet: async (status?: JobStatus | null, priority?: JobPriority | null, functionName?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/jobs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (functionName !== undefined) {
                localVarQueryParameter['function_name'] = functionName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
         * @summary Cancel Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelJobApiV1JobsJobIdCancelPost(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelJobApiV1JobsJobIdCancelPost(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.cancelJobApiV1JobsJobIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
         * @summary Create Job
         * @param {JobCreateRequest} jobCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJobApiV1JobsPost(jobCreateRequest: JobCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJobApiV1JobsPost(jobCreateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.createJobApiV1JobsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
         * @summary Get Job
         * @param {string} jobId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobApiV1JobsJobIdGet(jobId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobApiV1JobsJobIdGet(jobId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJobApiV1JobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
         * @summary Get Job Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobStatsApiV1JobsStatsOverviewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobStatsApiV1JobsStatsOverviewGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJobStatsApiV1JobsStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List jobs with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs
         * @summary List Jobs
         * @param {JobStatus | null} [status] 
         * @param {JobPriority | null} [priority] 
         * @param {string | null} [functionName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobsApiV1JobsGet(status?: JobStatus | null, priority?: JobPriority | null, functionName?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobsApiV1JobsGet(status, priority, functionName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.listJobsApiV1JobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
         * @summary Cancel Job
         * @param {JobsApiCancelJobApiV1JobsJobIdCancelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelJobApiV1JobsJobIdCancelPost(requestParameters: JobsApiCancelJobApiV1JobsJobIdCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobActionResponse> {
            return localVarFp.cancelJobApiV1JobsJobIdCancelPost(requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
         * @summary Create Job
         * @param {JobsApiCreateJobApiV1JobsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJobApiV1JobsPost(requestParameters: JobsApiCreateJobApiV1JobsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobResponse> {
            return localVarFp.createJobApiV1JobsPost(requestParameters.jobCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
         * @summary Get Job
         * @param {JobsApiGetJobApiV1JobsJobIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobApiV1JobsJobIdGet(requestParameters: JobsApiGetJobApiV1JobsJobIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobResponse> {
            return localVarFp.getJobApiV1JobsJobIdGet(requestParameters.jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
         * @summary Get Job Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobStatsApiV1JobsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<JobStatsResponse> {
            return localVarFp.getJobStatsApiV1JobsStatsOverviewGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List jobs with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs
         * @summary List Jobs
         * @param {JobsApiListJobsApiV1JobsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobsApiV1JobsGet(requestParameters: JobsApiListJobsApiV1JobsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<JobListResponse> {
            return localVarFp.listJobsApiV1JobsGet(requestParameters.status, requestParameters.priority, requestParameters.functionName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - interface
 * @export
 * @interface JobsApi
 */
export interface JobsApiInterface {
    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * @summary Cancel Job
     * @param {JobsApiCancelJobApiV1JobsJobIdCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    cancelJobApiV1JobsJobIdCancelPost(requestParameters: JobsApiCancelJobApiV1JobsJobIdCancelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobActionResponse>;

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * @summary Create Job
     * @param {JobsApiCreateJobApiV1JobsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    createJobApiV1JobsPost(requestParameters: JobsApiCreateJobApiV1JobsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobResponse>;

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * @summary Get Job
     * @param {JobsApiGetJobApiV1JobsJobIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobApiV1JobsJobIdGet(requestParameters: JobsApiGetJobApiV1JobsJobIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobResponse>;

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * @summary Get Job Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobStatsApiV1JobsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<JobStatsResponse>;

    /**
     * List jobs with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs
     * @summary List Jobs
     * @param {JobsApiListJobsApiV1JobsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    listJobsApiV1JobsGet(requestParameters?: JobsApiListJobsApiV1JobsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobListResponse>;

}

/**
 * Request parameters for cancelJobApiV1JobsJobIdCancelPost operation in JobsApi.
 * @export
 * @interface JobsApiCancelJobApiV1JobsJobIdCancelPostRequest
 */
export interface JobsApiCancelJobApiV1JobsJobIdCancelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiCancelJobApiV1JobsJobIdCancelPost
     */
    readonly jobId: string
}

/**
 * Request parameters for createJobApiV1JobsPost operation in JobsApi.
 * @export
 * @interface JobsApiCreateJobApiV1JobsPostRequest
 */
export interface JobsApiCreateJobApiV1JobsPostRequest {
    /**
     * 
     * @type {JobCreateRequest}
     * @memberof JobsApiCreateJobApiV1JobsPost
     */
    readonly jobCreateRequest: JobCreateRequest
}

/**
 * Request parameters for getJobApiV1JobsJobIdGet operation in JobsApi.
 * @export
 * @interface JobsApiGetJobApiV1JobsJobIdGetRequest
 */
export interface JobsApiGetJobApiV1JobsJobIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof JobsApiGetJobApiV1JobsJobIdGet
     */
    readonly jobId: string
}

/**
 * Request parameters for listJobsApiV1JobsGet operation in JobsApi.
 * @export
 * @interface JobsApiListJobsApiV1JobsGetRequest
 */
export interface JobsApiListJobsApiV1JobsGetRequest {
    /**
     * 
     * @type {JobStatus}
     * @memberof JobsApiListJobsApiV1JobsGet
     */
    readonly status?: JobStatus | null

    /**
     * 
     * @type {JobPriority}
     * @memberof JobsApiListJobsApiV1JobsGet
     */
    readonly priority?: JobPriority | null

    /**
     * 
     * @type {string}
     * @memberof JobsApiListJobsApiV1JobsGet
     */
    readonly functionName?: string | null
}

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI implements JobsApiInterface {
    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * @summary Cancel Job
     * @param {JobsApiCancelJobApiV1JobsJobIdCancelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public cancelJobApiV1JobsJobIdCancelPost(requestParameters: JobsApiCancelJobApiV1JobsJobIdCancelPostRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).cancelJobApiV1JobsJobIdCancelPost(requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * @summary Create Job
     * @param {JobsApiCreateJobApiV1JobsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public createJobApiV1JobsPost(requestParameters: JobsApiCreateJobApiV1JobsPostRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).createJobApiV1JobsPost(requestParameters.jobCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * @summary Get Job
     * @param {JobsApiGetJobApiV1JobsJobIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobApiV1JobsJobIdGet(requestParameters: JobsApiGetJobApiV1JobsJobIdGetRequest, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobApiV1JobsJobIdGet(requestParameters.jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * @summary Get Job Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJobStatsApiV1JobsStatsOverviewGet(options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobStatsApiV1JobsStatsOverviewGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List jobs with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs
     * @summary List Jobs
     * @param {JobsApiListJobsApiV1JobsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public listJobsApiV1JobsGet(requestParameters: JobsApiListJobsApiV1JobsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).listJobsApiV1JobsGet(requestParameters.status, requestParameters.priority, requestParameters.functionName, options).then((request) => request(this.axios, this.basePath));
    }
}

