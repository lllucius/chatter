/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DefaultProvider } from '../models';
// @ts-ignore
import type { EmbeddingSpaceCreate } from '../models';
// @ts-ignore
import type { EmbeddingSpaceList } from '../models';
// @ts-ignore
import type { EmbeddingSpaceUpdate } from '../models';
// @ts-ignore
import type { EmbeddingSpaceWithModel } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ModelDefCreate } from '../models';
// @ts-ignore
import type { ModelDefList } from '../models';
// @ts-ignore
import type { ModelDefUpdate } from '../models';
// @ts-ignore
import type { ModelDefWithProvider } from '../models';
// @ts-ignore
import type { ModelType } from '../models';
// @ts-ignore
import type { Provider } from '../models';
// @ts-ignore
import type { ProviderCreate } from '../models';
// @ts-ignore
import type { ProviderList } from '../models';
// @ts-ignore
import type { ProviderUpdate } from '../models';
/**
 * ModelRegistryApi - axios parameter creator
 * @export
 */
export const ModelRegistryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new embedding space with backing table and index.
         * @summary Create Embedding Space
         * @param {EmbeddingSpaceCreate} embeddingSpaceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost: async (embeddingSpaceCreate: EmbeddingSpaceCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'embeddingSpaceCreate' is not null or undefined
            assertParamExists('createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost', 'embeddingSpaceCreate', embeddingSpaceCreate)
            const localVarPath = `/api/v1/models/embedding-spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(embeddingSpaceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new model definition.
         * @summary Create Model
         * @param {ModelDefCreate} modelDefCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelApiV1ModelsModelsPost: async (modelDefCreate: ModelDefCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelDefCreate' is not null or undefined
            assertParamExists('createModelApiV1ModelsModelsPost', 'modelDefCreate', modelDefCreate)
            const localVarPath = `/api/v1/models/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelDefCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new provider.
         * @summary Create Provider
         * @param {ProviderCreate} providerCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProviderApiV1ModelsProvidersPost: async (providerCreate: ProviderCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerCreate' is not null or undefined
            assertParamExists('createProviderApiV1ModelsProvidersPost', 'providerCreate', providerCreate)
            const localVarPath = `/api/v1/models/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(providerCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an embedding space (does not drop the table).
         * @summary Delete Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete: async (spaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            assertParamExists('deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete', 'spaceId', spaceId)
            const localVarPath = `/api/v1/models/embedding-spaces/{space_id}`
                .replace(`{${"space_id"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a model definition.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelApiV1ModelsModelsModelIdDelete: async (modelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('deleteModelApiV1ModelsModelsModelIdDelete', 'modelId', modelId)
            const localVarPath = `/api/v1/models/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a provider.
         * @summary Delete Provider
         * @param {string} providerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProviderApiV1ModelsProvidersProviderIdDelete: async (providerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('deleteProviderApiV1ModelsProvidersProviderIdDelete', 'providerId', providerId)
            const localVarPath = `/api/v1/models/providers/{provider_id}`
                .replace(`{${"provider_id"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the default embedding space.
         * @summary Get Default Embedding Space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models/defaults/embedding-space`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the default model for a type.
         * @summary Get Default Model
         * @param {ModelType} modelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultModelApiV1ModelsDefaultsModelModelTypeGet: async (modelType: ModelType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelType' is not null or undefined
            assertParamExists('getDefaultModelApiV1ModelsDefaultsModelModelTypeGet', 'modelType', modelType)
            const localVarPath = `/api/v1/models/defaults/model/{model_type}`
                .replace(`{${"model_type"}}`, encodeURIComponent(String(modelType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the default provider for a model type.
         * @summary Get Default Provider
         * @param {ModelType} modelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet: async (modelType: ModelType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelType' is not null or undefined
            assertParamExists('getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet', 'modelType', modelType)
            const localVarPath = `/api/v1/models/defaults/provider/{model_type}`
                .replace(`{${"model_type"}}`, encodeURIComponent(String(modelType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific embedding space.
         * @summary Get Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet: async (spaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            assertParamExists('getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet', 'spaceId', spaceId)
            const localVarPath = `/api/v1/models/embedding-spaces/{space_id}`
                .replace(`{${"space_id"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific model definition.
         * @summary Get Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelApiV1ModelsModelsModelIdGet: async (modelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('getModelApiV1ModelsModelsModelIdGet', 'modelId', modelId)
            const localVarPath = `/api/v1/models/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific provider.
         * @summary Get Provider
         * @param {string} providerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProviderApiV1ModelsProvidersProviderIdGet: async (providerId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('getProviderApiV1ModelsProvidersProviderIdGet', 'providerId', providerId)
            const localVarPath = `/api/v1/models/providers/{provider_id}`
                .replace(`{${"provider_id"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all embedding spaces.
         * @summary List Embedding Spaces
         * @param {string} [modelId] Filter by model ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet: async (modelId?: string, page?: number, perPage?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models/embedding-spaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['active_only'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all model definitions.
         * @summary List Models
         * @param {string} [providerId] Filter by provider ID
         * @param {ModelType} [modelType] Filter by model type
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsApiV1ModelsModelsGet: async (providerId?: string, modelType?: ModelType, page?: number, perPage?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models/models`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (providerId !== undefined) {
                localVarQueryParameter['provider_id'] = providerId;
            }

            if (modelType !== undefined) {
                localVarQueryParameter['model_type'] = modelType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['active_only'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all providers.
         * @summary List Providers
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProvidersApiV1ModelsProvidersGet: async (page?: number, perPage?: number, activeOnly?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/models/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (activeOnly !== undefined) {
                localVarQueryParameter['active_only'] = activeOnly;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set an embedding space as default.
         * @summary Set Default Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost: async (spaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            assertParamExists('setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost', 'spaceId', spaceId)
            const localVarPath = `/api/v1/models/embedding-spaces/{space_id}/set-default`
                .replace(`{${"space_id"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set a model as default for its type.
         * @summary Set Default Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost: async (modelId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost', 'modelId', modelId)
            const localVarPath = `/api/v1/models/models/{model_id}/set-default`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set a provider as default for a model type.
         * @summary Set Default Provider
         * @param {string} providerId 
         * @param {DefaultProvider} defaultProvider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost: async (providerId: string, defaultProvider: DefaultProvider, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost', 'providerId', providerId)
            // verify required parameter 'defaultProvider' is not null or undefined
            assertParamExists('setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost', 'defaultProvider', defaultProvider)
            const localVarPath = `/api/v1/models/providers/{provider_id}/set-default`
                .replace(`{${"provider_id"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(defaultProvider, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an embedding space.
         * @summary Update Embedding Space
         * @param {string} spaceId 
         * @param {EmbeddingSpaceUpdate} embeddingSpaceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut: async (spaceId: string, embeddingSpaceUpdate: EmbeddingSpaceUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'spaceId' is not null or undefined
            assertParamExists('updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut', 'spaceId', spaceId)
            // verify required parameter 'embeddingSpaceUpdate' is not null or undefined
            assertParamExists('updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut', 'embeddingSpaceUpdate', embeddingSpaceUpdate)
            const localVarPath = `/api/v1/models/embedding-spaces/{space_id}`
                .replace(`{${"space_id"}}`, encodeURIComponent(String(spaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(embeddingSpaceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a model definition.
         * @summary Update Model
         * @param {string} modelId 
         * @param {ModelDefUpdate} modelDefUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelApiV1ModelsModelsModelIdPut: async (modelId: string, modelDefUpdate: ModelDefUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'modelId' is not null or undefined
            assertParamExists('updateModelApiV1ModelsModelsModelIdPut', 'modelId', modelId)
            // verify required parameter 'modelDefUpdate' is not null or undefined
            assertParamExists('updateModelApiV1ModelsModelsModelIdPut', 'modelDefUpdate', modelDefUpdate)
            const localVarPath = `/api/v1/models/models/{model_id}`
                .replace(`{${"model_id"}}`, encodeURIComponent(String(modelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modelDefUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a provider.
         * @summary Update Provider
         * @param {string} providerId 
         * @param {ProviderUpdate} providerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProviderApiV1ModelsProvidersProviderIdPut: async (providerId: string, providerUpdate: ProviderUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('updateProviderApiV1ModelsProvidersProviderIdPut', 'providerId', providerId)
            // verify required parameter 'providerUpdate' is not null or undefined
            assertParamExists('updateProviderApiV1ModelsProvidersProviderIdPut', 'providerUpdate', providerUpdate)
            const localVarPath = `/api/v1/models/providers/{provider_id}`
                .replace(`{${"provider_id"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(providerUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelRegistryApi - functional programming interface
 * @export
 */
export const ModelRegistryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelRegistryApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new embedding space with backing table and index.
         * @summary Create Embedding Space
         * @param {EmbeddingSpaceCreate} embeddingSpaceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(embeddingSpaceCreate: EmbeddingSpaceCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingSpaceWithModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(embeddingSpaceCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new model definition.
         * @summary Create Model
         * @param {ModelDefCreate} modelDefCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createModelApiV1ModelsModelsPost(modelDefCreate: ModelDefCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDefWithProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createModelApiV1ModelsModelsPost(modelDefCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.createModelApiV1ModelsModelsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new provider.
         * @summary Create Provider
         * @param {ProviderCreate} providerCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProviderApiV1ModelsProvidersPost(providerCreate: ProviderCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProviderApiV1ModelsProvidersPost(providerCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.createProviderApiV1ModelsProvidersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an embedding space (does not drop the table).
         * @summary Delete Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(spaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(spaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a model definition.
         * @summary Delete Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteModelApiV1ModelsModelsModelIdDelete(modelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteModelApiV1ModelsModelsModelIdDelete(modelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.deleteModelApiV1ModelsModelsModelIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a provider.
         * @summary Delete Provider
         * @param {string} providerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProviderApiV1ModelsProvidersProviderIdDelete(providerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProviderApiV1ModelsProvidersProviderIdDelete(providerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.deleteProviderApiV1ModelsProvidersProviderIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the default embedding space.
         * @summary Get Default Embedding Space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingSpaceWithModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the default model for a type.
         * @summary Get Default Model
         * @param {ModelType} modelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(modelType: ModelType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDefWithProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(modelType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getDefaultModelApiV1ModelsDefaultsModelModelTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the default provider for a model type.
         * @summary Get Default Provider
         * @param {ModelType} modelType 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(modelType: ModelType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(modelType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific embedding space.
         * @summary Get Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(spaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingSpaceWithModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(spaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific model definition.
         * @summary Get Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getModelApiV1ModelsModelsModelIdGet(modelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDefWithProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getModelApiV1ModelsModelsModelIdGet(modelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getModelApiV1ModelsModelsModelIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific provider.
         * @summary Get Provider
         * @param {string} providerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProviderApiV1ModelsProvidersProviderIdGet(providerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProviderApiV1ModelsProvidersProviderIdGet(providerId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.getProviderApiV1ModelsProvidersProviderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all embedding spaces.
         * @summary List Embedding Spaces
         * @param {string} [modelId] Filter by model ID
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active spaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(modelId?: string, page?: number, perPage?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingSpaceList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(modelId, page, perPage, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all model definitions.
         * @summary List Models
         * @param {string} [providerId] Filter by provider ID
         * @param {ModelType} [modelType] Filter by model type
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelsApiV1ModelsModelsGet(providerId?: string, modelType?: ModelType, page?: number, perPage?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDefList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelsApiV1ModelsModelsGet(providerId, modelType, page, perPage, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.listModelsApiV1ModelsModelsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all providers.
         * @summary List Providers
         * @param {number} [page] Page number
         * @param {number} [perPage] Items per page
         * @param {boolean} [activeOnly] Show only active providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProvidersApiV1ModelsProvidersGet(page?: number, perPage?: number, activeOnly?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProvidersApiV1ModelsProvidersGet(page, perPage, activeOnly, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.listProvidersApiV1ModelsProvidersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set an embedding space as default.
         * @summary Set Default Embedding Space
         * @param {string} spaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(spaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(spaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set a model as default for its type.
         * @summary Set Default Model
         * @param {string} modelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(modelId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(modelId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set a provider as default for a model type.
         * @summary Set Default Provider
         * @param {string} providerId 
         * @param {DefaultProvider} defaultProvider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(providerId: string, defaultProvider: DefaultProvider, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(providerId, defaultProvider, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an embedding space.
         * @summary Update Embedding Space
         * @param {string} spaceId 
         * @param {EmbeddingSpaceUpdate} embeddingSpaceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(spaceId: string, embeddingSpaceUpdate: EmbeddingSpaceUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmbeddingSpaceWithModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(spaceId, embeddingSpaceUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a model definition.
         * @summary Update Model
         * @param {string} modelId 
         * @param {ModelDefUpdate} modelDefUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateModelApiV1ModelsModelsModelIdPut(modelId: string, modelDefUpdate: ModelDefUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelDefWithProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateModelApiV1ModelsModelsModelIdPut(modelId, modelDefUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.updateModelApiV1ModelsModelsModelIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a provider.
         * @summary Update Provider
         * @param {string} providerId 
         * @param {ProviderUpdate} providerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProviderApiV1ModelsProvidersProviderIdPut(providerId: string, providerUpdate: ProviderUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Provider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProviderApiV1ModelsProvidersProviderIdPut(providerId, providerUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModelRegistryApi.updateProviderApiV1ModelsProvidersProviderIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ModelRegistryApi - factory interface
 * @export
 */
export const ModelRegistryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelRegistryApiFp(configuration)
    return {
        /**
         * Create a new embedding space with backing table and index.
         * @summary Create Embedding Space
         * @param {ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters: ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel> {
            return localVarFp.createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters.embeddingSpaceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new model definition.
         * @summary Create Model
         * @param {ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModelApiV1ModelsModelsPost(requestParameters: ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider> {
            return localVarFp.createModelApiV1ModelsModelsPost(requestParameters.modelDefCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new provider.
         * @summary Create Provider
         * @param {ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProviderApiV1ModelsProvidersPost(requestParameters: ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider> {
            return localVarFp.createProviderApiV1ModelsProvidersPost(requestParameters.providerCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an embedding space (does not drop the table).
         * @summary Delete Embedding Space
         * @param {ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters: ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters.spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a model definition.
         * @summary Delete Model
         * @param {ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModelApiV1ModelsModelsModelIdDelete(requestParameters: ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteModelApiV1ModelsModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a provider.
         * @summary Delete Provider
         * @param {ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters: ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters.providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the default embedding space.
         * @summary Get Default Embedding Space
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel> {
            return localVarFp.getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the default model for a type.
         * @summary Get Default Model
         * @param {ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters: ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider> {
            return localVarFp.getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters.modelType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the default provider for a model type.
         * @summary Get Default Provider
         * @param {ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters: ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider> {
            return localVarFp.getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters.modelType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific embedding space.
         * @summary Get Embedding Space
         * @param {ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters: ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel> {
            return localVarFp.getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters.spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific model definition.
         * @summary Get Model
         * @param {ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getModelApiV1ModelsModelsModelIdGet(requestParameters: ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider> {
            return localVarFp.getModelApiV1ModelsModelsModelIdGet(requestParameters.modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific provider.
         * @summary Get Provider
         * @param {ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProviderApiV1ModelsProvidersProviderIdGet(requestParameters: ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider> {
            return localVarFp.getProviderApiV1ModelsProvidersProviderIdGet(requestParameters.providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all embedding spaces.
         * @summary List Embedding Spaces
         * @param {ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters: ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceList> {
            return localVarFp.listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters.modelId, requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List all model definitions.
         * @summary List Models
         * @param {ModelRegistryApiListModelsApiV1ModelsModelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelsApiV1ModelsModelsGet(requestParameters: ModelRegistryApiListModelsApiV1ModelsModelsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefList> {
            return localVarFp.listModelsApiV1ModelsModelsGet(requestParameters.providerId, requestParameters.modelType, requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * List all providers.
         * @summary List Providers
         * @param {ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProvidersApiV1ModelsProvidersGet(requestParameters: ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProviderList> {
            return localVarFp.listProvidersApiV1ModelsProvidersGet(requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(axios, basePath));
        },
        /**
         * Set an embedding space as default.
         * @summary Set Default Embedding Space
         * @param {ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters.spaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set a model as default for its type.
         * @summary Set Default Model
         * @param {ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters.modelId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set a provider as default for a model type.
         * @summary Set Default Provider
         * @param {ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters.providerId, requestParameters.defaultProvider, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an embedding space.
         * @summary Update Embedding Space
         * @param {ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters: ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel> {
            return localVarFp.updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters.spaceId, requestParameters.embeddingSpaceUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a model definition.
         * @summary Update Model
         * @param {ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateModelApiV1ModelsModelsModelIdPut(requestParameters: ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider> {
            return localVarFp.updateModelApiV1ModelsModelsModelIdPut(requestParameters.modelId, requestParameters.modelDefUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a provider.
         * @summary Update Provider
         * @param {ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters: ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider> {
            return localVarFp.updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters.providerId, requestParameters.providerUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelRegistryApi - interface
 * @export
 * @interface ModelRegistryApi
 */
export interface ModelRegistryApiInterface {
    /**
     * Create a new embedding space with backing table and index.
     * @summary Create Embedding Space
     * @param {ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters: ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel>;

    /**
     * Create a new model definition.
     * @summary Create Model
     * @param {ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createModelApiV1ModelsModelsPost(requestParameters: ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider>;

    /**
     * Create a new provider.
     * @summary Create Provider
     * @param {ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createProviderApiV1ModelsProvidersPost(requestParameters: ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider>;

    /**
     * Delete an embedding space (does not drop the table).
     * @summary Delete Embedding Space
     * @param {ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters: ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Delete a model definition.
     * @summary Delete Model
     * @param {ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteModelApiV1ModelsModelsModelIdDelete(requestParameters: ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Delete a provider.
     * @summary Delete Provider
     * @param {ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters: ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Get the default embedding space.
     * @summary Get Default Embedding Space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel>;

    /**
     * Get the default model for a type.
     * @summary Get Default Model
     * @param {ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters: ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider>;

    /**
     * Get the default provider for a model type.
     * @summary Get Default Provider
     * @param {ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters: ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider>;

    /**
     * Get a specific embedding space.
     * @summary Get Embedding Space
     * @param {ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters: ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel>;

    /**
     * Get a specific model definition.
     * @summary Get Model
     * @param {ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getModelApiV1ModelsModelsModelIdGet(requestParameters: ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider>;

    /**
     * Get a specific provider.
     * @summary Get Provider
     * @param {ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getProviderApiV1ModelsProvidersProviderIdGet(requestParameters: ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider>;

    /**
     * List all embedding spaces.
     * @summary List Embedding Spaces
     * @param {ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters?: ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceList>;

    /**
     * List all model definitions.
     * @summary List Models
     * @param {ModelRegistryApiListModelsApiV1ModelsModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listModelsApiV1ModelsModelsGet(requestParameters?: ModelRegistryApiListModelsApiV1ModelsModelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefList>;

    /**
     * List all providers.
     * @summary List Providers
     * @param {ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listProvidersApiV1ModelsProvidersGet(requestParameters?: ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProviderList>;

    /**
     * Set an embedding space as default.
     * @summary Set Default Embedding Space
     * @param {ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Set a model as default for its type.
     * @summary Set Default Model
     * @param {ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Set a provider as default for a model type.
     * @summary Set Default Provider
     * @param {ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * Update an embedding space.
     * @summary Update Embedding Space
     * @param {ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters: ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmbeddingSpaceWithModel>;

    /**
     * Update a model definition.
     * @summary Update Model
     * @param {ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateModelApiV1ModelsModelsModelIdPut(requestParameters: ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelDefWithProvider>;

    /**
     * Update a provider.
     * @summary Update Provider
     * @param {ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters: ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Provider>;

}

/**
 * Request parameters for createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest
 */
export interface ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest {
    /**
     * 
     * @type {EmbeddingSpaceCreate}
     * @memberof ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost
     */
    readonly embeddingSpaceCreate: EmbeddingSpaceCreate
}

/**
 * Request parameters for createModelApiV1ModelsModelsPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest
 */
export interface ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest {
    /**
     * 
     * @type {ModelDefCreate}
     * @memberof ModelRegistryApiCreateModelApiV1ModelsModelsPost
     */
    readonly modelDefCreate: ModelDefCreate
}

/**
 * Request parameters for createProviderApiV1ModelsProvidersPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest
 */
export interface ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest {
    /**
     * 
     * @type {ProviderCreate}
     * @memberof ModelRegistryApiCreateProviderApiV1ModelsProvidersPost
     */
    readonly providerCreate: ProviderCreate
}

/**
 * Request parameters for deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest
 */
export interface ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete
     */
    readonly spaceId: string
}

/**
 * Request parameters for deleteModelApiV1ModelsModelsModelIdDelete operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest
 */
export interface ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDelete
     */
    readonly modelId: string
}

/**
 * Request parameters for deleteProviderApiV1ModelsProvidersProviderIdDelete operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest
 */
export interface ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDelete
     */
    readonly providerId: string
}

/**
 * Request parameters for getDefaultModelApiV1ModelsDefaultsModelModelTypeGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest
 */
export interface ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest {
    /**
     * 
     * @type {ModelType}
     * @memberof ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGet
     */
    readonly modelType: ModelType
}

/**
 * Request parameters for getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest
 */
export interface ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest {
    /**
     * 
     * @type {ModelType}
     * @memberof ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet
     */
    readonly modelType: ModelType
}

/**
 * Request parameters for getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest
 */
export interface ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet
     */
    readonly spaceId: string
}

/**
 * Request parameters for getModelApiV1ModelsModelsModelIdGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest
 */
export interface ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiGetModelApiV1ModelsModelsModelIdGet
     */
    readonly modelId: string
}

/**
 * Request parameters for getProviderApiV1ModelsProvidersProviderIdGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest
 */
export interface ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGet
     */
    readonly providerId: string
}

/**
 * Request parameters for listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest
 */
export interface ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest {
    /**
     * Filter by model ID
     * @type {string}
     * @memberof ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet
     */
    readonly modelId?: string

    /**
     * Page number
     * @type {number}
     * @memberof ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet
     */
    readonly page?: number

    /**
     * Items per page
     * @type {number}
     * @memberof ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet
     */
    readonly perPage?: number

    /**
     * Show only active spaces
     * @type {boolean}
     * @memberof ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet
     */
    readonly activeOnly?: boolean
}

/**
 * Request parameters for listModelsApiV1ModelsModelsGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiListModelsApiV1ModelsModelsGetRequest
 */
export interface ModelRegistryApiListModelsApiV1ModelsModelsGetRequest {
    /**
     * Filter by provider ID
     * @type {string}
     * @memberof ModelRegistryApiListModelsApiV1ModelsModelsGet
     */
    readonly providerId?: string

    /**
     * Filter by model type
     * @type {ModelType}
     * @memberof ModelRegistryApiListModelsApiV1ModelsModelsGet
     */
    readonly modelType?: ModelType

    /**
     * Page number
     * @type {number}
     * @memberof ModelRegistryApiListModelsApiV1ModelsModelsGet
     */
    readonly page?: number

    /**
     * Items per page
     * @type {number}
     * @memberof ModelRegistryApiListModelsApiV1ModelsModelsGet
     */
    readonly perPage?: number

    /**
     * Show only active models
     * @type {boolean}
     * @memberof ModelRegistryApiListModelsApiV1ModelsModelsGet
     */
    readonly activeOnly?: boolean
}

/**
 * Request parameters for listProvidersApiV1ModelsProvidersGet operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest
 */
export interface ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest {
    /**
     * Page number
     * @type {number}
     * @memberof ModelRegistryApiListProvidersApiV1ModelsProvidersGet
     */
    readonly page?: number

    /**
     * Items per page
     * @type {number}
     * @memberof ModelRegistryApiListProvidersApiV1ModelsProvidersGet
     */
    readonly perPage?: number

    /**
     * Show only active providers
     * @type {boolean}
     * @memberof ModelRegistryApiListProvidersApiV1ModelsProvidersGet
     */
    readonly activeOnly?: boolean
}

/**
 * Request parameters for setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest
 */
export interface ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost
     */
    readonly spaceId: string
}

/**
 * Request parameters for setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest
 */
export interface ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPost
     */
    readonly modelId: string
}

/**
 * Request parameters for setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest
 */
export interface ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost
     */
    readonly providerId: string

    /**
     * 
     * @type {DefaultProvider}
     * @memberof ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost
     */
    readonly defaultProvider: DefaultProvider
}

/**
 * Request parameters for updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest
 */
export interface ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut
     */
    readonly spaceId: string

    /**
     * 
     * @type {EmbeddingSpaceUpdate}
     * @memberof ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut
     */
    readonly embeddingSpaceUpdate: EmbeddingSpaceUpdate
}

/**
 * Request parameters for updateModelApiV1ModelsModelsModelIdPut operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest
 */
export interface ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPut
     */
    readonly modelId: string

    /**
     * 
     * @type {ModelDefUpdate}
     * @memberof ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPut
     */
    readonly modelDefUpdate: ModelDefUpdate
}

/**
 * Request parameters for updateProviderApiV1ModelsProvidersProviderIdPut operation in ModelRegistryApi.
 * @export
 * @interface ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest
 */
export interface ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPut
     */
    readonly providerId: string

    /**
     * 
     * @type {ProviderUpdate}
     * @memberof ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPut
     */
    readonly providerUpdate: ProviderUpdate
}

/**
 * ModelRegistryApi - object-oriented interface
 * @export
 * @class ModelRegistryApi
 * @extends {BaseAPI}
 */
export class ModelRegistryApi extends BaseAPI implements ModelRegistryApiInterface {
    /**
     * Create a new embedding space with backing table and index.
     * @summary Create Embedding Space
     * @param {ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters: ModelRegistryApiCreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters.embeddingSpaceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new model definition.
     * @summary Create Model
     * @param {ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public createModelApiV1ModelsModelsPost(requestParameters: ModelRegistryApiCreateModelApiV1ModelsModelsPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).createModelApiV1ModelsModelsPost(requestParameters.modelDefCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new provider.
     * @summary Create Provider
     * @param {ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public createProviderApiV1ModelsProvidersPost(requestParameters: ModelRegistryApiCreateProviderApiV1ModelsProvidersPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).createProviderApiV1ModelsProvidersPost(requestParameters.providerCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an embedding space (does not drop the table).
     * @summary Delete Embedding Space
     * @param {ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters: ModelRegistryApiDeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters.spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a model definition.
     * @summary Delete Model
     * @param {ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public deleteModelApiV1ModelsModelsModelIdDelete(requestParameters: ModelRegistryApiDeleteModelApiV1ModelsModelsModelIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).deleteModelApiV1ModelsModelsModelIdDelete(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a provider.
     * @summary Delete Provider
     * @param {ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters: ModelRegistryApiDeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters.providerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the default embedding space.
     * @summary Get Default Embedding Space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the default model for a type.
     * @summary Get Default Model
     * @param {ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters: ModelRegistryApiGetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters.modelType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the default provider for a model type.
     * @summary Get Default Provider
     * @param {ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters: ModelRegistryApiGetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters.modelType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific embedding space.
     * @summary Get Embedding Space
     * @param {ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters: ModelRegistryApiGetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters.spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific model definition.
     * @summary Get Model
     * @param {ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getModelApiV1ModelsModelsModelIdGet(requestParameters: ModelRegistryApiGetModelApiV1ModelsModelsModelIdGetRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getModelApiV1ModelsModelsModelIdGet(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific provider.
     * @summary Get Provider
     * @param {ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public getProviderApiV1ModelsProvidersProviderIdGet(requestParameters: ModelRegistryApiGetProviderApiV1ModelsProvidersProviderIdGetRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).getProviderApiV1ModelsProvidersProviderIdGet(requestParameters.providerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all embedding spaces.
     * @summary List Embedding Spaces
     * @param {ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters: ModelRegistryApiListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters.modelId, requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all model definitions.
     * @summary List Models
     * @param {ModelRegistryApiListModelsApiV1ModelsModelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public listModelsApiV1ModelsModelsGet(requestParameters: ModelRegistryApiListModelsApiV1ModelsModelsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).listModelsApiV1ModelsModelsGet(requestParameters.providerId, requestParameters.modelType, requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all providers.
     * @summary List Providers
     * @param {ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public listProvidersApiV1ModelsProvidersGet(requestParameters: ModelRegistryApiListProvidersApiV1ModelsProvidersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).listProvidersApiV1ModelsProvidersGet(requestParameters.page, requestParameters.perPage, requestParameters.activeOnly, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set an embedding space as default.
     * @summary Set Default Embedding Space
     * @param {ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters.spaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set a model as default for its type.
     * @summary Set Default Model
     * @param {ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters.modelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set a provider as default for a model type.
     * @summary Set Default Provider
     * @param {ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters: ModelRegistryApiSetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters.providerId, requestParameters.defaultProvider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an embedding space.
     * @summary Update Embedding Space
     * @param {ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters: ModelRegistryApiUpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters.spaceId, requestParameters.embeddingSpaceUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a model definition.
     * @summary Update Model
     * @param {ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public updateModelApiV1ModelsModelsModelIdPut(requestParameters: ModelRegistryApiUpdateModelApiV1ModelsModelsModelIdPutRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).updateModelApiV1ModelsModelsModelIdPut(requestParameters.modelId, requestParameters.modelDefUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a provider.
     * @summary Update Provider
     * @param {ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApi
     */
    public updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters: ModelRegistryApiUpdateProviderApiV1ModelsProvidersProviderIdPutRequest, options?: RawAxiosRequestConfig) {
        return ModelRegistryApiFp(this.configuration).updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters.providerId, requestParameters.providerUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

