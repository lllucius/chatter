/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PluginActionResponse } from '../models';
// @ts-ignore
import type { PluginDeleteResponse } from '../models';
// @ts-ignore
import type { PluginInstallRequest } from '../models';
// @ts-ignore
import type { PluginListResponse } from '../models';
// @ts-ignore
import type { PluginResponse } from '../models';
// @ts-ignore
import type { PluginStatus } from '../models';
// @ts-ignore
import type { PluginType } from '../models';
// @ts-ignore
import type { PluginUpdateRequest } from '../models';
/**
 * PluginsApi - axios parameter creator
 * @export
 */
export const PluginsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Disable Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePluginApiV1PluginsPluginIdDisablePost: async (pluginId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('disablePluginApiV1PluginsPluginIdDisablePost', 'pluginId', pluginId)
            const localVarPath = `/api/v1/plugins/{plugin_id}/disable`
                .replace(`{${"plugin_id"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Enable Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePluginApiV1PluginsPluginIdEnablePost: async (pluginId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('enablePluginApiV1PluginsPluginIdEnablePost', 'pluginId', pluginId)
            const localVarPath = `/api/v1/plugins/{plugin_id}/enable`
                .replace(`{${"plugin_id"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
         * @summary Get Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginApiV1PluginsPluginIdGet: async (pluginId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('getPluginApiV1PluginsPluginIdGet', 'pluginId', pluginId)
            const localVarPath = `/api/v1/plugins/{plugin_id}`
                .replace(`{${"plugin_id"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
         * @summary Install Plugin
         * @param {PluginInstallRequest} pluginInstallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installPluginApiV1PluginsInstallPost: async (pluginInstallRequest: PluginInstallRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginInstallRequest' is not null or undefined
            assertParamExists('installPluginApiV1PluginsInstallPost', 'pluginInstallRequest', pluginInstallRequest)
            const localVarPath = `/api/v1/plugins/install`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginInstallRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
         * @summary List Plugins
         * @param {PluginType | null} [pluginType] 
         * @param {PluginStatus | null} [status] 
         * @param {boolean | null} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPluginsApiV1PluginsGet: async (pluginType?: PluginType | null, status?: PluginStatus | null, enabled?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/plugins/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (pluginType !== undefined) {
                localVarQueryParameter['plugin_type'] = pluginType;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
         * @summary Uninstall Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstallPluginApiV1PluginsPluginIdDelete: async (pluginId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('uninstallPluginApiV1PluginsPluginIdDelete', 'pluginId', pluginId)
            const localVarPath = `/api/v1/plugins/{plugin_id}`
                .replace(`{${"plugin_id"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
         * @summary Update Plugin
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} pluginUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePluginApiV1PluginsPluginIdPut: async (pluginId: string, pluginUpdateRequest: PluginUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pluginId' is not null or undefined
            assertParamExists('updatePluginApiV1PluginsPluginIdPut', 'pluginId', pluginId)
            // verify required parameter 'pluginUpdateRequest' is not null or undefined
            assertParamExists('updatePluginApiV1PluginsPluginIdPut', 'pluginUpdateRequest', pluginUpdateRequest)
            const localVarPath = `/api/v1/plugins/{plugin_id}`
                .replace(`{${"plugin_id"}}`, encodeURIComponent(String(pluginId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pluginUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginsApi - functional programming interface
 * @export
 */
export const PluginsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PluginsApiAxiosParamCreator(configuration)
    return {
        /**
         * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Disable Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disablePluginApiV1PluginsPluginIdDisablePost(pluginId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disablePluginApiV1PluginsPluginIdDisablePost(pluginId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.disablePluginApiV1PluginsPluginIdDisablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Enable Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enablePluginApiV1PluginsPluginIdEnablePost(pluginId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginActionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enablePluginApiV1PluginsPluginIdEnablePost(pluginId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.enablePluginApiV1PluginsPluginIdEnablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
         * @summary Get Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPluginApiV1PluginsPluginIdGet(pluginId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPluginApiV1PluginsPluginIdGet(pluginId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.getPluginApiV1PluginsPluginIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
         * @summary Install Plugin
         * @param {PluginInstallRequest} pluginInstallRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async installPluginApiV1PluginsInstallPost(pluginInstallRequest: PluginInstallRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.installPluginApiV1PluginsInstallPost(pluginInstallRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.installPluginApiV1PluginsInstallPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
         * @summary List Plugins
         * @param {PluginType | null} [pluginType] 
         * @param {PluginStatus | null} [status] 
         * @param {boolean | null} [enabled] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPluginsApiV1PluginsGet(pluginType?: PluginType | null, status?: PluginStatus | null, enabled?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPluginsApiV1PluginsGet(pluginType, status, enabled, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.listPluginsApiV1PluginsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
         * @summary Uninstall Plugin
         * @param {string} pluginId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uninstallPluginApiV1PluginsPluginIdDelete(pluginId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uninstallPluginApiV1PluginsPluginIdDelete(pluginId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.uninstallPluginApiV1PluginsPluginIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
         * @summary Update Plugin
         * @param {string} pluginId 
         * @param {PluginUpdateRequest} pluginUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePluginApiV1PluginsPluginIdPut(pluginId: string, pluginUpdateRequest: PluginUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PluginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePluginApiV1PluginsPluginIdPut(pluginId, pluginUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PluginsApi.updatePluginApiV1PluginsPluginIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PluginsApi - factory interface
 * @export
 */
export const PluginsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PluginsApiFp(configuration)
    return {
        /**
         * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Disable Plugin
         * @param {PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disablePluginApiV1PluginsPluginIdDisablePost(requestParameters: PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginActionResponse> {
            return localVarFp.disablePluginApiV1PluginsPluginIdDisablePost(requestParameters.pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
         * @summary Enable Plugin
         * @param {PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enablePluginApiV1PluginsPluginIdEnablePost(requestParameters: PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginActionResponse> {
            return localVarFp.enablePluginApiV1PluginsPluginIdEnablePost(requestParameters.pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
         * @summary Get Plugin
         * @param {PluginsApiGetPluginApiV1PluginsPluginIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginApiV1PluginsPluginIdGet(requestParameters: PluginsApiGetPluginApiV1PluginsPluginIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse> {
            return localVarFp.getPluginApiV1PluginsPluginIdGet(requestParameters.pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
         * @summary Install Plugin
         * @param {PluginsApiInstallPluginApiV1PluginsInstallPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        installPluginApiV1PluginsInstallPost(requestParameters: PluginsApiInstallPluginApiV1PluginsInstallPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse> {
            return localVarFp.installPluginApiV1PluginsInstallPost(requestParameters.pluginInstallRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
         * @summary List Plugins
         * @param {PluginsApiListPluginsApiV1PluginsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPluginsApiV1PluginsGet(requestParameters: PluginsApiListPluginsApiV1PluginsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PluginListResponse> {
            return localVarFp.listPluginsApiV1PluginsGet(requestParameters.pluginType, requestParameters.status, requestParameters.enabled, options).then((request) => request(axios, basePath));
        },
        /**
         * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
         * @summary Uninstall Plugin
         * @param {PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uninstallPluginApiV1PluginsPluginIdDelete(requestParameters: PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginDeleteResponse> {
            return localVarFp.uninstallPluginApiV1PluginsPluginIdDelete(requestParameters.pluginId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
         * @summary Update Plugin
         * @param {PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePluginApiV1PluginsPluginIdPut(requestParameters: PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse> {
            return localVarFp.updatePluginApiV1PluginsPluginIdPut(requestParameters.pluginId, requestParameters.pluginUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PluginsApi - interface
 * @export
 * @interface PluginsApi
 */
export interface PluginsApiInterface {
    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Disable Plugin
     * @param {PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    disablePluginApiV1PluginsPluginIdDisablePost(requestParameters: PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginActionResponse>;

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Enable Plugin
     * @param {PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    enablePluginApiV1PluginsPluginIdEnablePost(requestParameters: PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginActionResponse>;

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * @summary Get Plugin
     * @param {PluginsApiGetPluginApiV1PluginsPluginIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    getPluginApiV1PluginsPluginIdGet(requestParameters: PluginsApiGetPluginApiV1PluginsPluginIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse>;

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * @summary Install Plugin
     * @param {PluginsApiInstallPluginApiV1PluginsInstallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    installPluginApiV1PluginsInstallPost(requestParameters: PluginsApiInstallPluginApiV1PluginsInstallPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse>;

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * @summary List Plugins
     * @param {PluginsApiListPluginsApiV1PluginsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    listPluginsApiV1PluginsGet(requestParameters?: PluginsApiListPluginsApiV1PluginsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginListResponse>;

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * @summary Uninstall Plugin
     * @param {PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    uninstallPluginApiV1PluginsPluginIdDelete(requestParameters: PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginDeleteResponse>;

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * @summary Update Plugin
     * @param {PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    updatePluginApiV1PluginsPluginIdPut(requestParameters: PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PluginResponse>;

}

/**
 * Request parameters for disablePluginApiV1PluginsPluginIdDisablePost operation in PluginsApi.
 * @export
 * @interface PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest
 */
export interface PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiDisablePluginApiV1PluginsPluginIdDisablePost
     */
    readonly pluginId: string
}

/**
 * Request parameters for enablePluginApiV1PluginsPluginIdEnablePost operation in PluginsApi.
 * @export
 * @interface PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest
 */
export interface PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiEnablePluginApiV1PluginsPluginIdEnablePost
     */
    readonly pluginId: string
}

/**
 * Request parameters for getPluginApiV1PluginsPluginIdGet operation in PluginsApi.
 * @export
 * @interface PluginsApiGetPluginApiV1PluginsPluginIdGetRequest
 */
export interface PluginsApiGetPluginApiV1PluginsPluginIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiGetPluginApiV1PluginsPluginIdGet
     */
    readonly pluginId: string
}

/**
 * Request parameters for installPluginApiV1PluginsInstallPost operation in PluginsApi.
 * @export
 * @interface PluginsApiInstallPluginApiV1PluginsInstallPostRequest
 */
export interface PluginsApiInstallPluginApiV1PluginsInstallPostRequest {
    /**
     * 
     * @type {PluginInstallRequest}
     * @memberof PluginsApiInstallPluginApiV1PluginsInstallPost
     */
    readonly pluginInstallRequest: PluginInstallRequest
}

/**
 * Request parameters for listPluginsApiV1PluginsGet operation in PluginsApi.
 * @export
 * @interface PluginsApiListPluginsApiV1PluginsGetRequest
 */
export interface PluginsApiListPluginsApiV1PluginsGetRequest {
    /**
     * 
     * @type {PluginType}
     * @memberof PluginsApiListPluginsApiV1PluginsGet
     */
    readonly pluginType?: PluginType | null

    /**
     * 
     * @type {PluginStatus}
     * @memberof PluginsApiListPluginsApiV1PluginsGet
     */
    readonly status?: PluginStatus | null

    /**
     * 
     * @type {boolean}
     * @memberof PluginsApiListPluginsApiV1PluginsGet
     */
    readonly enabled?: boolean | null
}

/**
 * Request parameters for uninstallPluginApiV1PluginsPluginIdDelete operation in PluginsApi.
 * @export
 * @interface PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest
 */
export interface PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiUninstallPluginApiV1PluginsPluginIdDelete
     */
    readonly pluginId: string
}

/**
 * Request parameters for updatePluginApiV1PluginsPluginIdPut operation in PluginsApi.
 * @export
 * @interface PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest
 */
export interface PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PluginsApiUpdatePluginApiV1PluginsPluginIdPut
     */
    readonly pluginId: string

    /**
     * 
     * @type {PluginUpdateRequest}
     * @memberof PluginsApiUpdatePluginApiV1PluginsPluginIdPut
     */
    readonly pluginUpdateRequest: PluginUpdateRequest
}

/**
 * PluginsApi - object-oriented interface
 * @export
 * @class PluginsApi
 * @extends {BaseAPI}
 */
export class PluginsApi extends BaseAPI implements PluginsApiInterface {
    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Disable Plugin
     * @param {PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public disablePluginApiV1PluginsPluginIdDisablePost(requestParameters: PluginsApiDisablePluginApiV1PluginsPluginIdDisablePostRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).disablePluginApiV1PluginsPluginIdDisablePost(requestParameters.pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Enable Plugin
     * @param {PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public enablePluginApiV1PluginsPluginIdEnablePost(requestParameters: PluginsApiEnablePluginApiV1PluginsPluginIdEnablePostRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).enablePluginApiV1PluginsPluginIdEnablePost(requestParameters.pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * @summary Get Plugin
     * @param {PluginsApiGetPluginApiV1PluginsPluginIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public getPluginApiV1PluginsPluginIdGet(requestParameters: PluginsApiGetPluginApiV1PluginsPluginIdGetRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).getPluginApiV1PluginsPluginIdGet(requestParameters.pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * @summary Install Plugin
     * @param {PluginsApiInstallPluginApiV1PluginsInstallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public installPluginApiV1PluginsInstallPost(requestParameters: PluginsApiInstallPluginApiV1PluginsInstallPostRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).installPluginApiV1PluginsInstallPost(requestParameters.pluginInstallRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * @summary List Plugins
     * @param {PluginsApiListPluginsApiV1PluginsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public listPluginsApiV1PluginsGet(requestParameters: PluginsApiListPluginsApiV1PluginsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).listPluginsApiV1PluginsGet(requestParameters.pluginType, requestParameters.status, requestParameters.enabled, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * @summary Uninstall Plugin
     * @param {PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public uninstallPluginApiV1PluginsPluginIdDelete(requestParameters: PluginsApiUninstallPluginApiV1PluginsPluginIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).uninstallPluginApiV1PluginsPluginIdDelete(requestParameters.pluginId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * @summary Update Plugin
     * @param {PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApi
     */
    public updatePluginApiV1PluginsPluginIdPut(requestParameters: PluginsApiUpdatePluginApiV1PluginsPluginIdPutRequest, options?: RawAxiosRequestConfig) {
        return PluginsApiFp(this.configuration).updatePluginApiV1PluginsPluginIdPut(requestParameters.pluginId, requestParameters.pluginUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

