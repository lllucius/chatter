/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AvailableProvidersResponse } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ProfileCloneRequest } from '../models';
// @ts-ignore
import type { ProfileCreate } from '../models';
// @ts-ignore
import type { ProfileDeleteResponse } from '../models';
// @ts-ignore
import type { ProfileListResponse } from '../models';
// @ts-ignore
import type { ProfileResponse } from '../models';
// @ts-ignore
import type { ProfileStatsResponse } from '../models';
// @ts-ignore
import type { ProfileTestRequest } from '../models';
// @ts-ignore
import type { ProfileTestResponse } from '../models';
// @ts-ignore
import type { ProfileType } from '../models';
// @ts-ignore
import type { ProfileUpdate } from '../models';
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
         * @summary Clone Profile
         * @param {string} profileId 
         * @param {ProfileCloneRequest} profileCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneProfileApiV1ProfilesProfileIdClonePost: async (profileId: string, profileCloneRequest: ProfileCloneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('cloneProfileApiV1ProfilesProfileIdClonePost', 'profileId', profileId)
            // verify required parameter 'profileCloneRequest' is not null or undefined
            assertParamExists('cloneProfileApiV1ProfilesProfileIdClonePost', 'profileCloneRequest', profileCloneRequest)
            const localVarPath = `/api/v1/profiles/{profile_id}/clone`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileCloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
         * @summary Create Profile
         * @param {ProfileCreate} profileCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfileApiV1ProfilesPost: async (profileCreate: ProfileCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileCreate' is not null or undefined
            assertParamExists('createProfileApiV1ProfilesPost', 'profileCreate', profileCreate)
            const localVarPath = `/api/v1/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
         * @summary Delete Profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfileApiV1ProfilesProfileIdDelete: async (profileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('deleteProfileApiV1ProfilesProfileIdDelete', 'profileId', profileId)
            const localVarPath = `/api/v1/profiles/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
         * @summary Get Available Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableProvidersApiV1ProfilesProvidersAvailableGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profiles/providers/available`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
         * @summary Get Profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileApiV1ProfilesProfileIdGet: async (profileId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('getProfileApiV1ProfilesProfileIdGet', 'profileId', profileId)
            const localVarPath = `/api/v1/profiles/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
         * @summary Get Profile Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileStatsApiV1ProfilesStatsOverviewGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profiles/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
         * @summary List Profiles
         * @param {ProfileType | null} [profileType] Filter by profile type
         * @param {string | null} [llmProvider] Filter by LLM provider
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {boolean | null} [isPublic] Filter by public status
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfilesApiV1ProfilesGet: async (profileType?: ProfileType | null, llmProvider?: string | null, tags?: Array<string> | null, isPublic?: boolean | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (profileType !== undefined) {
                localVarQueryParameter['profile_type'] = profileType;
            }

            if (llmProvider !== undefined) {
                localVarQueryParameter['llm_provider'] = llmProvider;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (isPublic !== undefined) {
                localVarQueryParameter['is_public'] = isPublic;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
         * @summary Test Profile
         * @param {string} profileId 
         * @param {ProfileTestRequest} profileTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProfileApiV1ProfilesProfileIdTestPost: async (profileId: string, profileTestRequest: ProfileTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('testProfileApiV1ProfilesProfileIdTestPost', 'profileId', profileId)
            // verify required parameter 'profileTestRequest' is not null or undefined
            assertParamExists('testProfileApiV1ProfilesProfileIdTestPost', 'profileTestRequest', profileTestRequest)
            const localVarPath = `/api/v1/profiles/{profile_id}/test`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
         * @summary Update Profile
         * @param {string} profileId 
         * @param {ProfileUpdate} profileUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileApiV1ProfilesProfileIdPut: async (profileId: string, profileUpdate: ProfileUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('updateProfileApiV1ProfilesProfileIdPut', 'profileId', profileId)
            // verify required parameter 'profileUpdate' is not null or undefined
            assertParamExists('updateProfileApiV1ProfilesProfileIdPut', 'profileUpdate', profileUpdate)
            const localVarPath = `/api/v1/profiles/{profile_id}`
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
         * @summary Clone Profile
         * @param {string} profileId 
         * @param {ProfileCloneRequest} profileCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloneProfileApiV1ProfilesProfileIdClonePost(profileId: string, profileCloneRequest: ProfileCloneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cloneProfileApiV1ProfilesProfileIdClonePost(profileId, profileCloneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.cloneProfileApiV1ProfilesProfileIdClonePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
         * @summary Create Profile
         * @param {ProfileCreate} profileCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfileApiV1ProfilesPost(profileCreate: ProfileCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProfileApiV1ProfilesPost(profileCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.createProfileApiV1ProfilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
         * @summary Delete Profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfileApiV1ProfilesProfileIdDelete(profileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProfileApiV1ProfilesProfileIdDelete(profileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.deleteProfileApiV1ProfilesProfileIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
         * @summary Get Available Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailableProvidersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.getAvailableProvidersApiV1ProfilesProvidersAvailableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
         * @summary Get Profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileApiV1ProfilesProfileIdGet(profileId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileApiV1ProfilesProfileIdGet(profileId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.getProfileApiV1ProfilesProfileIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
         * @summary Get Profile Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileStatsApiV1ProfilesStatsOverviewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileStatsApiV1ProfilesStatsOverviewGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.getProfileStatsApiV1ProfilesStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
         * @summary List Profiles
         * @param {ProfileType | null} [profileType] Filter by profile type
         * @param {string | null} [llmProvider] Filter by LLM provider
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {boolean | null} [isPublic] Filter by public status
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfilesApiV1ProfilesGet(profileType?: ProfileType | null, llmProvider?: string | null, tags?: Array<string> | null, isPublic?: boolean | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProfilesApiV1ProfilesGet(profileType, llmProvider, tags, isPublic, limit, offset, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.listProfilesApiV1ProfilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
         * @summary Test Profile
         * @param {string} profileId 
         * @param {ProfileTestRequest} profileTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testProfileApiV1ProfilesProfileIdTestPost(profileId: string, profileTestRequest: ProfileTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testProfileApiV1ProfilesProfileIdTestPost(profileId, profileTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.testProfileApiV1ProfilesProfileIdTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
         * @summary Update Profile
         * @param {string} profileId 
         * @param {ProfileUpdate} profileUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileApiV1ProfilesProfileIdPut(profileId: string, profileUpdate: ProfileUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfileApiV1ProfilesProfileIdPut(profileId, profileUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProfilesApi.updateProfileApiV1ProfilesProfileIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
         * @summary Clone Profile
         * @param {ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters: ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters.profileId, requestParameters.profileCloneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
         * @summary Create Profile
         * @param {ProfilesApiCreateProfileApiV1ProfilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfileApiV1ProfilesPost(requestParameters: ProfilesApiCreateProfileApiV1ProfilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.createProfileApiV1ProfilesPost(requestParameters.profileCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
         * @summary Delete Profile
         * @param {ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfileApiV1ProfilesProfileIdDelete(requestParameters: ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileDeleteResponse> {
            return localVarFp.deleteProfileApiV1ProfilesProfileIdDelete(requestParameters.profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
         * @summary Get Available Providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options?: RawAxiosRequestConfig): AxiosPromise<AvailableProvidersResponse> {
            return localVarFp.getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
         * @summary Get Profile
         * @param {ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileApiV1ProfilesProfileIdGet(requestParameters: ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.getProfileApiV1ProfilesProfileIdGet(requestParameters.profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
         * @summary Get Profile Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileStatsApiV1ProfilesStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<ProfileStatsResponse> {
            return localVarFp.getProfileStatsApiV1ProfilesStatsOverviewGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
         * @summary List Profiles
         * @param {ProfilesApiListProfilesApiV1ProfilesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfilesApiV1ProfilesGet(requestParameters: ProfilesApiListProfilesApiV1ProfilesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProfileListResponse> {
            return localVarFp.listProfilesApiV1ProfilesGet(requestParameters.profileType, requestParameters.llmProvider, requestParameters.tags, requestParameters.isPublic, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
         * @summary Test Profile
         * @param {ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testProfileApiV1ProfilesProfileIdTestPost(requestParameters: ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileTestResponse> {
            return localVarFp.testProfileApiV1ProfilesProfileIdTestPost(requestParameters.profileId, requestParameters.profileTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
         * @summary Update Profile
         * @param {ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileApiV1ProfilesProfileIdPut(requestParameters: ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse> {
            return localVarFp.updateProfileApiV1ProfilesProfileIdPut(requestParameters.profileId, requestParameters.profileUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - interface
 * @export
 * @interface ProfilesApi
 */
export interface ProfilesApiInterface {
    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * @summary Clone Profile
     * @param {ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters: ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse>;

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * @summary Create Profile
     * @param {ProfilesApiCreateProfileApiV1ProfilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    createProfileApiV1ProfilesPost(requestParameters: ProfilesApiCreateProfileApiV1ProfilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse>;

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * @summary Delete Profile
     * @param {ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    deleteProfileApiV1ProfilesProfileIdDelete(requestParameters: ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileDeleteResponse>;

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * @summary Get Available Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options?: RawAxiosRequestConfig): AxiosPromise<AvailableProvidersResponse>;

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * @summary Get Profile
     * @param {ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getProfileApiV1ProfilesProfileIdGet(requestParameters: ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse>;

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * @summary Get Profile Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getProfileStatsApiV1ProfilesStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<ProfileStatsResponse>;

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * @summary List Profiles
     * @param {ProfilesApiListProfilesApiV1ProfilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    listProfilesApiV1ProfilesGet(requestParameters?: ProfilesApiListProfilesApiV1ProfilesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileListResponse>;

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * @summary Test Profile
     * @param {ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    testProfileApiV1ProfilesProfileIdTestPost(requestParameters: ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileTestResponse>;

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * @summary Update Profile
     * @param {ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    updateProfileApiV1ProfilesProfileIdPut(requestParameters: ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProfileResponse>;

}

/**
 * Request parameters for cloneProfileApiV1ProfilesProfileIdClonePost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest
 */
export interface ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePost
     */
    readonly profileId: string

    /**
     * 
     * @type {ProfileCloneRequest}
     * @memberof ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePost
     */
    readonly profileCloneRequest: ProfileCloneRequest
}

/**
 * Request parameters for createProfileApiV1ProfilesPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiCreateProfileApiV1ProfilesPostRequest
 */
export interface ProfilesApiCreateProfileApiV1ProfilesPostRequest {
    /**
     * 
     * @type {ProfileCreate}
     * @memberof ProfilesApiCreateProfileApiV1ProfilesPost
     */
    readonly profileCreate: ProfileCreate
}

/**
 * Request parameters for deleteProfileApiV1ProfilesProfileIdDelete operation in ProfilesApi.
 * @export
 * @interface ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest
 */
export interface ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiDeleteProfileApiV1ProfilesProfileIdDelete
     */
    readonly profileId: string
}

/**
 * Request parameters for getProfileApiV1ProfilesProfileIdGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest
 */
export interface ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiGetProfileApiV1ProfilesProfileIdGet
     */
    readonly profileId: string
}

/**
 * Request parameters for listProfilesApiV1ProfilesGet operation in ProfilesApi.
 * @export
 * @interface ProfilesApiListProfilesApiV1ProfilesGetRequest
 */
export interface ProfilesApiListProfilesApiV1ProfilesGetRequest {
    /**
     * Filter by profile type
     * @type {ProfileType}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly profileType?: ProfileType | null

    /**
     * Filter by LLM provider
     * @type {string}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly llmProvider?: string | null

    /**
     * Filter by tags
     * @type {Array<string>}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly tags?: Array<string> | null

    /**
     * Filter by public status
     * @type {boolean}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly isPublic?: boolean | null

    /**
     * Maximum number of results
     * @type {number}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly limit?: number

    /**
     * Number of results to skip
     * @type {number}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly offset?: number

    /**
     * Sort field
     * @type {string}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly sortBy?: string

    /**
     * Sort order
     * @type {string}
     * @memberof ProfilesApiListProfilesApiV1ProfilesGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for testProfileApiV1ProfilesProfileIdTestPost operation in ProfilesApi.
 * @export
 * @interface ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest
 */
export interface ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiTestProfileApiV1ProfilesProfileIdTestPost
     */
    readonly profileId: string

    /**
     * 
     * @type {ProfileTestRequest}
     * @memberof ProfilesApiTestProfileApiV1ProfilesProfileIdTestPost
     */
    readonly profileTestRequest: ProfileTestRequest
}

/**
 * Request parameters for updateProfileApiV1ProfilesProfileIdPut operation in ProfilesApi.
 * @export
 * @interface ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest
 */
export interface ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilesApiUpdateProfileApiV1ProfilesProfileIdPut
     */
    readonly profileId: string

    /**
     * 
     * @type {ProfileUpdate}
     * @memberof ProfilesApiUpdateProfileApiV1ProfilesProfileIdPut
     */
    readonly profileUpdate: ProfileUpdate
}

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI implements ProfilesApiInterface {
    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * @summary Clone Profile
     * @param {ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters: ProfilesApiCloneProfileApiV1ProfilesProfileIdClonePostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters.profileId, requestParameters.profileCloneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * @summary Create Profile
     * @param {ProfilesApiCreateProfileApiV1ProfilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public createProfileApiV1ProfilesPost(requestParameters: ProfilesApiCreateProfileApiV1ProfilesPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).createProfileApiV1ProfilesPost(requestParameters.profileCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * @summary Delete Profile
     * @param {ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public deleteProfileApiV1ProfilesProfileIdDelete(requestParameters: ProfilesApiDeleteProfileApiV1ProfilesProfileIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).deleteProfileApiV1ProfilesProfileIdDelete(requestParameters.profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * @summary Get Available Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getAvailableProvidersApiV1ProfilesProvidersAvailableGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * @summary Get Profile
     * @param {ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getProfileApiV1ProfilesProfileIdGet(requestParameters: ProfilesApiGetProfileApiV1ProfilesProfileIdGetRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getProfileApiV1ProfilesProfileIdGet(requestParameters.profileId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * @summary Get Profile Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public getProfileStatsApiV1ProfilesStatsOverviewGet(options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).getProfileStatsApiV1ProfilesStatsOverviewGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * @summary List Profiles
     * @param {ProfilesApiListProfilesApiV1ProfilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public listProfilesApiV1ProfilesGet(requestParameters: ProfilesApiListProfilesApiV1ProfilesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).listProfilesApiV1ProfilesGet(requestParameters.profileType, requestParameters.llmProvider, requestParameters.tags, requestParameters.isPublic, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * @summary Test Profile
     * @param {ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public testProfileApiV1ProfilesProfileIdTestPost(requestParameters: ProfilesApiTestProfileApiV1ProfilesProfileIdTestPostRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).testProfileApiV1ProfilesProfileIdTestPost(requestParameters.profileId, requestParameters.profileTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * @summary Update Profile
     * @param {ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public updateProfileApiV1ProfilesProfileIdPut(requestParameters: ProfilesApiUpdateProfileApiV1ProfilesProfileIdPutRequest, options?: RawAxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).updateProfileApiV1ProfilesProfileIdPut(requestParameters.profileId, requestParameters.profileUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

