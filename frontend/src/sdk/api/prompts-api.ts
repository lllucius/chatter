/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { PromptCategory } from '../models';
// @ts-ignore
import type { PromptCloneRequest } from '../models';
// @ts-ignore
import type { PromptCreate } from '../models';
// @ts-ignore
import type { PromptDeleteResponse } from '../models';
// @ts-ignore
import type { PromptListResponse } from '../models';
// @ts-ignore
import type { PromptResponse } from '../models';
// @ts-ignore
import type { PromptStatsResponse } from '../models';
// @ts-ignore
import type { PromptTestRequest } from '../models';
// @ts-ignore
import type { PromptTestResponse } from '../models';
// @ts-ignore
import type { PromptType } from '../models';
// @ts-ignore
import type { PromptUpdate } from '../models';
/**
 * PromptsApi - axios parameter creator
 * @export
 */
export const PromptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
         * @summary Clone Prompt
         * @param {string} promptId 
         * @param {PromptCloneRequest} promptCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clonePromptApiV1PromptsPromptIdClonePost: async (promptId: string, promptCloneRequest: PromptCloneRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('clonePromptApiV1PromptsPromptIdClonePost', 'promptId', promptId)
            // verify required parameter 'promptCloneRequest' is not null or undefined
            assertParamExists('clonePromptApiV1PromptsPromptIdClonePost', 'promptCloneRequest', promptCloneRequest)
            const localVarPath = `/api/v1/prompts/{prompt_id}/clone`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptCloneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
         * @summary Create Prompt
         * @param {PromptCreate} promptCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromptApiV1PromptsPost: async (promptCreate: PromptCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptCreate' is not null or undefined
            assertParamExists('createPromptApiV1PromptsPost', 'promptCreate', promptCreate)
            const localVarPath = `/api/v1/prompts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
         * @summary Delete Prompt
         * @param {string} promptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromptApiV1PromptsPromptIdDelete: async (promptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('deletePromptApiV1PromptsPromptIdDelete', 'promptId', promptId)
            const localVarPath = `/api/v1/prompts/{prompt_id}`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
         * @summary Get Prompt
         * @param {string} promptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromptApiV1PromptsPromptIdGet: async (promptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('getPromptApiV1PromptsPromptIdGet', 'promptId', promptId)
            const localVarPath = `/api/v1/prompts/{prompt_id}`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get prompt statistics.  Args:     request: Stats request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
         * @summary Get Prompt Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromptStatsApiV1PromptsStatsOverviewGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/prompts/stats/overview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
         * @summary List Prompts
         * @param {PromptType | null} [promptType] Filter by prompt type
         * @param {PromptCategory | null} [category] Filter by category
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {boolean | null} [isPublic] Filter by public status
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPromptsApiV1PromptsGet: async (promptType?: PromptType | null, category?: PromptCategory | null, tags?: Array<string> | null, isPublic?: boolean | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/prompts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (promptType !== undefined) {
                localVarQueryParameter['prompt_type'] = promptType;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (isPublic !== undefined) {
                localVarQueryParameter['is_public'] = isPublic;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
         * @summary Test Prompt
         * @param {string} promptId 
         * @param {PromptTestRequest} promptTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testPromptApiV1PromptsPromptIdTestPost: async (promptId: string, promptTestRequest: PromptTestRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('testPromptApiV1PromptsPromptIdTestPost', 'promptId', promptId)
            // verify required parameter 'promptTestRequest' is not null or undefined
            assertParamExists('testPromptApiV1PromptsPromptIdTestPost', 'promptTestRequest', promptTestRequest)
            const localVarPath = `/api/v1/prompts/{prompt_id}/test`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
         * @summary Update Prompt
         * @param {string} promptId 
         * @param {PromptUpdate} promptUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromptApiV1PromptsPromptIdPut: async (promptId: string, promptUpdate: PromptUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promptId' is not null or undefined
            assertParamExists('updatePromptApiV1PromptsPromptIdPut', 'promptId', promptId)
            // verify required parameter 'promptUpdate' is not null or undefined
            assertParamExists('updatePromptApiV1PromptsPromptIdPut', 'promptUpdate', promptUpdate)
            const localVarPath = `/api/v1/prompts/{prompt_id}`
                .replace(`{${"prompt_id"}}`, encodeURIComponent(String(promptId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(promptUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PromptsApi - functional programming interface
 * @export
 */
export const PromptsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PromptsApiAxiosParamCreator(configuration)
    return {
        /**
         * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
         * @summary Clone Prompt
         * @param {string} promptId 
         * @param {PromptCloneRequest} promptCloneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clonePromptApiV1PromptsPromptIdClonePost(promptId: string, promptCloneRequest: PromptCloneRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clonePromptApiV1PromptsPromptIdClonePost(promptId, promptCloneRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.clonePromptApiV1PromptsPromptIdClonePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
         * @summary Create Prompt
         * @param {PromptCreate} promptCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPromptApiV1PromptsPost(promptCreate: PromptCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPromptApiV1PromptsPost(promptCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.createPromptApiV1PromptsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
         * @summary Delete Prompt
         * @param {string} promptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePromptApiV1PromptsPromptIdDelete(promptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePromptApiV1PromptsPromptIdDelete(promptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.deletePromptApiV1PromptsPromptIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
         * @summary Get Prompt
         * @param {string} promptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromptApiV1PromptsPromptIdGet(promptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromptApiV1PromptsPromptIdGet(promptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.getPromptApiV1PromptsPromptIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get prompt statistics.  Args:     request: Stats request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
         * @summary Get Prompt Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPromptStatsApiV1PromptsStatsOverviewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPromptStatsApiV1PromptsStatsOverviewGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.getPromptStatsApiV1PromptsStatsOverviewGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
         * @summary List Prompts
         * @param {PromptType | null} [promptType] Filter by prompt type
         * @param {PromptCategory | null} [category] Filter by category
         * @param {Array<string> | null} [tags] Filter by tags
         * @param {boolean | null} [isPublic] Filter by public status
         * @param {number} [limit] Maximum number of results
         * @param {number} [offset] Number of results to skip
         * @param {string} [sortBy] Sort field
         * @param {string} [sortOrder] Sort order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPromptsApiV1PromptsGet(promptType?: PromptType | null, category?: PromptCategory | null, tags?: Array<string> | null, isPublic?: boolean | null, limit?: number, offset?: number, sortBy?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPromptsApiV1PromptsGet(promptType, category, tags, isPublic, limit, offset, sortBy, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.listPromptsApiV1PromptsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
         * @summary Test Prompt
         * @param {string} promptId 
         * @param {PromptTestRequest} promptTestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testPromptApiV1PromptsPromptIdTestPost(promptId: string, promptTestRequest: PromptTestRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptTestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testPromptApiV1PromptsPromptIdTestPost(promptId, promptTestRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.testPromptApiV1PromptsPromptIdTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
         * @summary Update Prompt
         * @param {string} promptId 
         * @param {PromptUpdate} promptUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePromptApiV1PromptsPromptIdPut(promptId: string, promptUpdate: PromptUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PromptResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePromptApiV1PromptsPromptIdPut(promptId, promptUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PromptsApi.updatePromptApiV1PromptsPromptIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PromptsApi - factory interface
 * @export
 */
export const PromptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PromptsApiFp(configuration)
    return {
        /**
         * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
         * @summary Clone Prompt
         * @param {PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clonePromptApiV1PromptsPromptIdClonePost(requestParameters: PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse> {
            return localVarFp.clonePromptApiV1PromptsPromptIdClonePost(requestParameters.promptId, requestParameters.promptCloneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
         * @summary Create Prompt
         * @param {PromptsApiCreatePromptApiV1PromptsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPromptApiV1PromptsPost(requestParameters: PromptsApiCreatePromptApiV1PromptsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse> {
            return localVarFp.createPromptApiV1PromptsPost(requestParameters.promptCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
         * @summary Delete Prompt
         * @param {PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePromptApiV1PromptsPromptIdDelete(requestParameters: PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptDeleteResponse> {
            return localVarFp.deletePromptApiV1PromptsPromptIdDelete(requestParameters.promptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
         * @summary Get Prompt
         * @param {PromptsApiGetPromptApiV1PromptsPromptIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromptApiV1PromptsPromptIdGet(requestParameters: PromptsApiGetPromptApiV1PromptsPromptIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse> {
            return localVarFp.getPromptApiV1PromptsPromptIdGet(requestParameters.promptId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get prompt statistics.  Args:     request: Stats request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
         * @summary Get Prompt Stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPromptStatsApiV1PromptsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<PromptStatsResponse> {
            return localVarFp.getPromptStatsApiV1PromptsStatsOverviewGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
         * @summary List Prompts
         * @param {PromptsApiListPromptsApiV1PromptsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPromptsApiV1PromptsGet(requestParameters: PromptsApiListPromptsApiV1PromptsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PromptListResponse> {
            return localVarFp.listPromptsApiV1PromptsGet(requestParameters.promptType, requestParameters.category, requestParameters.tags, requestParameters.isPublic, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
         * @summary Test Prompt
         * @param {PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testPromptApiV1PromptsPromptIdTestPost(requestParameters: PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptTestResponse> {
            return localVarFp.testPromptApiV1PromptsPromptIdTestPost(requestParameters.promptId, requestParameters.promptTestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
         * @summary Update Prompt
         * @param {PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePromptApiV1PromptsPromptIdPut(requestParameters: PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse> {
            return localVarFp.updatePromptApiV1PromptsPromptIdPut(requestParameters.promptId, requestParameters.promptUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PromptsApi - interface
 * @export
 * @interface PromptsApi
 */
export interface PromptsApiInterface {
    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * @summary Clone Prompt
     * @param {PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    clonePromptApiV1PromptsPromptIdClonePost(requestParameters: PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse>;

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * @summary Create Prompt
     * @param {PromptsApiCreatePromptApiV1PromptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    createPromptApiV1PromptsPost(requestParameters: PromptsApiCreatePromptApiV1PromptsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse>;

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * @summary Delete Prompt
     * @param {PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    deletePromptApiV1PromptsPromptIdDelete(requestParameters: PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptDeleteResponse>;

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * @summary Get Prompt
     * @param {PromptsApiGetPromptApiV1PromptsPromptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    getPromptApiV1PromptsPromptIdGet(requestParameters: PromptsApiGetPromptApiV1PromptsPromptIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse>;

    /**
     * Get prompt statistics.  Args:     request: Stats request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * @summary Get Prompt Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    getPromptStatsApiV1PromptsStatsOverviewGet(options?: RawAxiosRequestConfig): AxiosPromise<PromptStatsResponse>;

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * @summary List Prompts
     * @param {PromptsApiListPromptsApiV1PromptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    listPromptsApiV1PromptsGet(requestParameters?: PromptsApiListPromptsApiV1PromptsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptListResponse>;

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * @summary Test Prompt
     * @param {PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    testPromptApiV1PromptsPromptIdTestPost(requestParameters: PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptTestResponse>;

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * @summary Update Prompt
     * @param {PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    updatePromptApiV1PromptsPromptIdPut(requestParameters: PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PromptResponse>;

}

/**
 * Request parameters for clonePromptApiV1PromptsPromptIdClonePost operation in PromptsApi.
 * @export
 * @interface PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest
 */
export interface PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PromptsApiClonePromptApiV1PromptsPromptIdClonePost
     */
    readonly promptId: string

    /**
     * 
     * @type {PromptCloneRequest}
     * @memberof PromptsApiClonePromptApiV1PromptsPromptIdClonePost
     */
    readonly promptCloneRequest: PromptCloneRequest
}

/**
 * Request parameters for createPromptApiV1PromptsPost operation in PromptsApi.
 * @export
 * @interface PromptsApiCreatePromptApiV1PromptsPostRequest
 */
export interface PromptsApiCreatePromptApiV1PromptsPostRequest {
    /**
     * 
     * @type {PromptCreate}
     * @memberof PromptsApiCreatePromptApiV1PromptsPost
     */
    readonly promptCreate: PromptCreate
}

/**
 * Request parameters for deletePromptApiV1PromptsPromptIdDelete operation in PromptsApi.
 * @export
 * @interface PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest
 */
export interface PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PromptsApiDeletePromptApiV1PromptsPromptIdDelete
     */
    readonly promptId: string
}

/**
 * Request parameters for getPromptApiV1PromptsPromptIdGet operation in PromptsApi.
 * @export
 * @interface PromptsApiGetPromptApiV1PromptsPromptIdGetRequest
 */
export interface PromptsApiGetPromptApiV1PromptsPromptIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PromptsApiGetPromptApiV1PromptsPromptIdGet
     */
    readonly promptId: string
}

/**
 * Request parameters for listPromptsApiV1PromptsGet operation in PromptsApi.
 * @export
 * @interface PromptsApiListPromptsApiV1PromptsGetRequest
 */
export interface PromptsApiListPromptsApiV1PromptsGetRequest {
    /**
     * Filter by prompt type
     * @type {PromptType}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly promptType?: PromptType | null

    /**
     * Filter by category
     * @type {PromptCategory}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly category?: PromptCategory | null

    /**
     * Filter by tags
     * @type {Array<string>}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly tags?: Array<string> | null

    /**
     * Filter by public status
     * @type {boolean}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly isPublic?: boolean | null

    /**
     * Maximum number of results
     * @type {number}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly limit?: number

    /**
     * Number of results to skip
     * @type {number}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly offset?: number

    /**
     * Sort field
     * @type {string}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly sortBy?: string

    /**
     * Sort order
     * @type {string}
     * @memberof PromptsApiListPromptsApiV1PromptsGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for testPromptApiV1PromptsPromptIdTestPost operation in PromptsApi.
 * @export
 * @interface PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest
 */
export interface PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PromptsApiTestPromptApiV1PromptsPromptIdTestPost
     */
    readonly promptId: string

    /**
     * 
     * @type {PromptTestRequest}
     * @memberof PromptsApiTestPromptApiV1PromptsPromptIdTestPost
     */
    readonly promptTestRequest: PromptTestRequest
}

/**
 * Request parameters for updatePromptApiV1PromptsPromptIdPut operation in PromptsApi.
 * @export
 * @interface PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest
 */
export interface PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PromptsApiUpdatePromptApiV1PromptsPromptIdPut
     */
    readonly promptId: string

    /**
     * 
     * @type {PromptUpdate}
     * @memberof PromptsApiUpdatePromptApiV1PromptsPromptIdPut
     */
    readonly promptUpdate: PromptUpdate
}

/**
 * PromptsApi - object-oriented interface
 * @export
 * @class PromptsApi
 * @extends {BaseAPI}
 */
export class PromptsApi extends BaseAPI implements PromptsApiInterface {
    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * @summary Clone Prompt
     * @param {PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public clonePromptApiV1PromptsPromptIdClonePost(requestParameters: PromptsApiClonePromptApiV1PromptsPromptIdClonePostRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).clonePromptApiV1PromptsPromptIdClonePost(requestParameters.promptId, requestParameters.promptCloneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * @summary Create Prompt
     * @param {PromptsApiCreatePromptApiV1PromptsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public createPromptApiV1PromptsPost(requestParameters: PromptsApiCreatePromptApiV1PromptsPostRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).createPromptApiV1PromptsPost(requestParameters.promptCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * @summary Delete Prompt
     * @param {PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public deletePromptApiV1PromptsPromptIdDelete(requestParameters: PromptsApiDeletePromptApiV1PromptsPromptIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).deletePromptApiV1PromptsPromptIdDelete(requestParameters.promptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * @summary Get Prompt
     * @param {PromptsApiGetPromptApiV1PromptsPromptIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public getPromptApiV1PromptsPromptIdGet(requestParameters: PromptsApiGetPromptApiV1PromptsPromptIdGetRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).getPromptApiV1PromptsPromptIdGet(requestParameters.promptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get prompt statistics.  Args:     request: Stats request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * @summary Get Prompt Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public getPromptStatsApiV1PromptsStatsOverviewGet(options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).getPromptStatsApiV1PromptsStatsOverviewGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * @summary List Prompts
     * @param {PromptsApiListPromptsApiV1PromptsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public listPromptsApiV1PromptsGet(requestParameters: PromptsApiListPromptsApiV1PromptsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).listPromptsApiV1PromptsGet(requestParameters.promptType, requestParameters.category, requestParameters.tags, requestParameters.isPublic, requestParameters.limit, requestParameters.offset, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * @summary Test Prompt
     * @param {PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public testPromptApiV1PromptsPromptIdTestPost(requestParameters: PromptsApiTestPromptApiV1PromptsPromptIdTestPostRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).testPromptApiV1PromptsPromptIdTestPost(requestParameters.promptId, requestParameters.promptTestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * @summary Update Prompt
     * @param {PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApi
     */
    public updatePromptApiV1PromptsPromptIdPut(requestParameters: PromptsApiUpdatePromptApiV1PromptsPromptIdPutRequest, options?: RawAxiosRequestConfig) {
        return PromptsApiFp(this.configuration).updatePromptApiV1PromptsPromptIdPut(requestParameters.promptId, requestParameters.promptUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

