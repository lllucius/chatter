/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * # Advanced AI Chatbot Backend API Platform  A comprehensive Python-based backend API platform for building advanced AI chatbots, implemented with FastAPI, LangChain, LangGraph, Postgres, PGVector, and SQLAlchemy.  ## Features  ### Core API Features - **RESTful API** with FastAPI and OpenAPI/Swagger documentation - **Async-first architecture** with uvloop and hypercorn - **Streaming responses** for real-time LLM output - **Authentication** with JWT/OAuth2 and session management - **Rate limiting** and security validations - **Health checks** with `/healthz` and `/readyz` endpoints - **API versioning** with modular router architecture  ### LLM & AI Features - **LangChain integration** for LLM orchestration and chain management - **LangGraph workflows** for advanced conversation logic - **Multiple LLM providers** with pluggable architecture (OpenAI, Anthropic, etc.) - **Prompt management** with storage and versioning - **Tool calling** with MCP (Model Context Protocol) integration - **Multi-turn context** management and conversation history - **Profile management** for LLM parameters (temperature, top_k, etc.)  ### Vector Store & Knowledge Base - **Multiple vector stores** (PGVector, Pinecone, Qdrant, ChromaDB) - **Document processing** with unstructured data support - **Semantic search** and retrieval-augmented generation (RAG) - **Chunking strategies** for optimal retrieval - **Embedding management** with multiple providers  ### Data & Analytics - **Comprehensive analytics** for conversations, usage, and performance - **Cost tracking** and token usage monitoring - **User behavior analytics** and system health metrics - **Export capabilities** for reporting and analysis  ## Authentication  All API endpoints (except health checks and documentation) require authentication. Use the `/api/v1/auth/login` endpoint to obtain access tokens.  ## Rate Limiting  API requests are rate-limited. Check response headers for current limits.  ## SDK  A Python SDK is available for easy integration. See the SDK documentation for details.  ## Support  - GitHub: https://github.com/lllucius/chatter - Documentation: https://github.com/lllucius/chatter#readme - Issues: https://github.com/lllucius/chatter/issues
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@chatter.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BulkOperationResult } from '../models';
// @ts-ignore
import type { BulkToolServerOperation } from '../models';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { ServerStatus } from '../models';
// @ts-ignore
import type { ServerToolsResponse } from '../models';
// @ts-ignore
import type { ToolOperationResponse } from '../models';
// @ts-ignore
import type { ToolServerCreate } from '../models';
// @ts-ignore
import type { ToolServerDeleteResponse } from '../models';
// @ts-ignore
import type { ToolServerHealthCheck } from '../models';
// @ts-ignore
import type { ToolServerMetrics } from '../models';
// @ts-ignore
import type { ToolServerOperationResponse } from '../models';
// @ts-ignore
import type { ToolServerResponse } from '../models';
// @ts-ignore
import type { ToolServerUpdate } from '../models';
/**
 * ToolServersApi - axios parameter creator
 * @export
 */
export const ToolServersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
         * @summary Bulk Server Operation
         * @param {BulkToolServerOperation} bulkToolServerOperation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkServerOperationApiV1ToolserversServersBulkPost: async (bulkToolServerOperation: BulkToolServerOperation, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkToolServerOperation' is not null or undefined
            assertParamExists('bulkServerOperationApiV1ToolserversServersBulkPost', 'bulkToolServerOperation', bulkToolServerOperation)
            const localVarPath = `/api/v1/toolservers/servers/bulk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkToolServerOperation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
         * @summary Check Server Health
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkServerHealthApiV1ToolserversServersServerIdHealthGet: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('checkServerHealthApiV1ToolserversServersServerIdHealthGet', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/health`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
         * @summary Create Tool Server
         * @param {ToolServerCreate} toolServerCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToolServerApiV1ToolserversServersPost: async (toolServerCreate: ToolServerCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolServerCreate' is not null or undefined
            assertParamExists('createToolServerApiV1ToolserversServersPost', 'toolServerCreate', toolServerCreate)
            const localVarPath = `/api/v1/toolservers/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toolServerCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
         * @summary Delete Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToolServerApiV1ToolserversServersServerIdDelete: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('deleteToolServerApiV1ToolserversServersServerIdDelete', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableToolApiV1ToolserversToolsToolIdDisablePost: async (toolId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('disableToolApiV1ToolserversToolsToolIdDisablePost', 'toolId', toolId)
            const localVarPath = `/api/v1/toolservers/tools/{tool_id}/disable`
                .replace(`{${"tool_id"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableToolServerApiV1ToolserversServersServerIdDisablePost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('disableToolServerApiV1ToolserversServersServerIdDisablePost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/disable`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableToolApiV1ToolserversToolsToolIdEnablePost: async (toolId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toolId' is not null or undefined
            assertParamExists('enableToolApiV1ToolserversToolsToolIdEnablePost', 'toolId', toolId)
            const localVarPath = `/api/v1/toolservers/tools/{tool_id}/enable`
                .replace(`{${"tool_id"}}`, encodeURIComponent(String(toolId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableToolServerApiV1ToolserversServersServerIdEnablePost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('enableToolServerApiV1ToolserversServersServerIdEnablePost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/enable`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
         * @summary Get Server Metrics
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerMetricsApiV1ToolserversServersServerIdMetricsGet: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getServerMetricsApiV1ToolserversServersServerIdMetricsGet', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/metrics`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
         * @summary Get Server Tools
         * @param {string} serverId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerToolsApiV1ToolserversServersServerIdToolsGet: async (serverId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getServerToolsApiV1ToolserversServersServerIdToolsGet', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/tools`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
         * @summary Get Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToolServerApiV1ToolserversServersServerIdGet: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('getToolServerApiV1ToolserversServersServerIdGet', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
         * @summary List All Tools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllToolsApiV1ToolserversToolsAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/toolservers/tools/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
         * @summary List Tool Servers
         * @param {ServerStatus | null} [status] 
         * @param {boolean} [includeBuiltin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listToolServersApiV1ToolserversServersGet: async (status?: ServerStatus | null, includeBuiltin?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/toolservers/servers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (includeBuiltin !== undefined) {
                localVarQueryParameter['include_builtin'] = includeBuiltin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Restart Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartToolServerApiV1ToolserversServersServerIdRestartPost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('restartToolServerApiV1ToolserversServersServerIdRestartPost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/restart`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Start Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToolServerApiV1ToolserversServersServerIdStartPost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('startToolServerApiV1ToolserversServersServerIdStartPost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/start`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Stop Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopToolServerApiV1ToolserversServersServerIdStopPost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('stopToolServerApiV1ToolserversServersServerIdStopPost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/stop`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
         * @summary Test Server Connectivity
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost: async (serverId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost', 'serverId', serverId)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}/test-connectivity`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
         * @summary Update Tool Server
         * @param {string} serverId 
         * @param {ToolServerUpdate} toolServerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateToolServerApiV1ToolserversServersServerIdPut: async (serverId: string, toolServerUpdate: ToolServerUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serverId' is not null or undefined
            assertParamExists('updateToolServerApiV1ToolserversServersServerIdPut', 'serverId', serverId)
            // verify required parameter 'toolServerUpdate' is not null or undefined
            assertParamExists('updateToolServerApiV1ToolserversServersServerIdPut', 'toolServerUpdate', toolServerUpdate)
            const localVarPath = `/api/v1/toolservers/servers/{server_id}`
                .replace(`{${"server_id"}}`, encodeURIComponent(String(serverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(toolServerUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToolServersApi - functional programming interface
 * @export
 */
export const ToolServersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToolServersApiAxiosParamCreator(configuration)
    return {
        /**
         * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
         * @summary Bulk Server Operation
         * @param {BulkToolServerOperation} bulkToolServerOperation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkServerOperationApiV1ToolserversServersBulkPost(bulkToolServerOperation: BulkToolServerOperation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkOperationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkServerOperationApiV1ToolserversServersBulkPost(bulkToolServerOperation, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.bulkServerOperationApiV1ToolserversServersBulkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
         * @summary Check Server Health
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkServerHealthApiV1ToolserversServersServerIdHealthGet(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerHealthCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkServerHealthApiV1ToolserversServersServerIdHealthGet(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.checkServerHealthApiV1ToolserversServersServerIdHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
         * @summary Create Tool Server
         * @param {ToolServerCreate} toolServerCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createToolServerApiV1ToolserversServersPost(toolServerCreate: ToolServerCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createToolServerApiV1ToolserversServersPost(toolServerCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.createToolServerApiV1ToolserversServersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
         * @summary Delete Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteToolServerApiV1ToolserversServersServerIdDelete(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerDeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteToolServerApiV1ToolserversServersServerIdDelete(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.deleteToolServerApiV1ToolserversServersServerIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableToolApiV1ToolserversToolsToolIdDisablePost(toolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableToolApiV1ToolserversToolsToolIdDisablePost(toolId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.disableToolApiV1ToolserversToolsToolIdDisablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableToolServerApiV1ToolserversServersServerIdDisablePost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableToolServerApiV1ToolserversServersServerIdDisablePost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.disableToolServerApiV1ToolserversServersServerIdDisablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool
         * @param {string} toolId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableToolApiV1ToolserversToolsToolIdEnablePost(toolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableToolApiV1ToolserversToolsToolIdEnablePost(toolId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.enableToolApiV1ToolserversToolsToolIdEnablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableToolServerApiV1ToolserversServersServerIdEnablePost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableToolServerApiV1ToolserversServersServerIdEnablePost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.enableToolServerApiV1ToolserversServersServerIdEnablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
         * @summary Get Server Metrics
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerMetricsApiV1ToolserversServersServerIdMetricsGet(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerMetrics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerMetricsApiV1ToolserversServersServerIdMetricsGet(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.getServerMetricsApiV1ToolserversServersServerIdMetricsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
         * @summary Get Server Tools
         * @param {string} serverId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServerToolsApiV1ToolserversServersServerIdToolsGet(serverId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServerToolsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServerToolsApiV1ToolserversServersServerIdToolsGet(serverId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.getServerToolsApiV1ToolserversServersServerIdToolsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
         * @summary Get Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToolServerApiV1ToolserversServersServerIdGet(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToolServerApiV1ToolserversServersServerIdGet(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.getToolServerApiV1ToolserversServersServerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
         * @summary List All Tools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllToolsApiV1ToolserversToolsAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: any; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllToolsApiV1ToolserversToolsAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.listAllToolsApiV1ToolserversToolsAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
         * @summary List Tool Servers
         * @param {ServerStatus | null} [status] 
         * @param {boolean} [includeBuiltin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listToolServersApiV1ToolserversServersGet(status?: ServerStatus | null, includeBuiltin?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ToolServerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listToolServersApiV1ToolserversServersGet(status, includeBuiltin, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.listToolServersApiV1ToolserversServersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Restart Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restartToolServerApiV1ToolserversServersServerIdRestartPost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restartToolServerApiV1ToolserversServersServerIdRestartPost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.restartToolServerApiV1ToolserversServersServerIdRestartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Start Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startToolServerApiV1ToolserversServersServerIdStartPost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startToolServerApiV1ToolserversServersServerIdStartPost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.startToolServerApiV1ToolserversServersServerIdStartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Stop Tool Server
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopToolServerApiV1ToolserversServersServerIdStopPost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerOperationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopToolServerApiV1ToolserversServersServerIdStopPost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.stopToolServerApiV1ToolserversServersServerIdStopPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
         * @summary Test Server Connectivity
         * @param {string} serverId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(serverId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(serverId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
         * @summary Update Tool Server
         * @param {string} serverId 
         * @param {ToolServerUpdate} toolServerUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateToolServerApiV1ToolserversServersServerIdPut(serverId: string, toolServerUpdate: ToolServerUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToolServerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateToolServerApiV1ToolserversServersServerIdPut(serverId, toolServerUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ToolServersApi.updateToolServerApiV1ToolserversServersServerIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ToolServersApi - factory interface
 * @export
 */
export const ToolServersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToolServersApiFp(configuration)
    return {
        /**
         * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
         * @summary Bulk Server Operation
         * @param {ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters: ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkOperationResult> {
            return localVarFp.bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters.bulkToolServerOperation, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
         * @summary Check Server Health
         * @param {ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters: ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerHealthCheck> {
            return localVarFp.checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
         * @summary Create Tool Server
         * @param {ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createToolServerApiV1ToolserversServersPost(requestParameters: ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse> {
            return localVarFp.createToolServerApiV1ToolserversServersPost(requestParameters.toolServerCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
         * @summary Delete Tool Server
         * @param {ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters: ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerDeleteResponse> {
            return localVarFp.deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool
         * @param {ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters: ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolOperationResponse> {
            return localVarFp.disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters.toolId, options).then((request) => request(axios, basePath));
        },
        /**
         * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Disable Tool Server
         * @param {ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters: ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse> {
            return localVarFp.disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool
         * @param {ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters: ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolOperationResponse> {
            return localVarFp.enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters.toolId, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Enable Tool Server
         * @param {ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters: ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse> {
            return localVarFp.enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
         * @summary Get Server Metrics
         * @param {ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters: ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerMetrics> {
            return localVarFp.getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
         * @summary Get Server Tools
         * @param {ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters: ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServerToolsResponse> {
            return localVarFp.getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters.serverId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
         * @summary Get Tool Server
         * @param {ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToolServerApiV1ToolserversServersServerIdGet(requestParameters: ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse> {
            return localVarFp.getToolServerApiV1ToolserversServersServerIdGet(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
         * @summary List All Tools
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllToolsApiV1ToolserversToolsAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<{ [key: string]: any; }>> {
            return localVarFp.listAllToolsApiV1ToolserversToolsAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
         * @summary List Tool Servers
         * @param {ToolServersApiListToolServersApiV1ToolserversServersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listToolServersApiV1ToolserversServersGet(requestParameters: ToolServersApiListToolServersApiV1ToolserversServersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<ToolServerResponse>> {
            return localVarFp.listToolServersApiV1ToolserversServersGet(requestParameters.status, requestParameters.includeBuiltin, options).then((request) => request(axios, basePath));
        },
        /**
         * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Restart Tool Server
         * @param {ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters: ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse> {
            return localVarFp.restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Start Tool Server
         * @param {ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters: ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse> {
            return localVarFp.startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
         * @summary Stop Tool Server
         * @param {ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters: ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse> {
            return localVarFp.stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
         * @summary Test Server Connectivity
         * @param {ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters: ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters.serverId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
         * @summary Update Tool Server
         * @param {ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateToolServerApiV1ToolserversServersServerIdPut(requestParameters: ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse> {
            return localVarFp.updateToolServerApiV1ToolserversServersServerIdPut(requestParameters.serverId, requestParameters.toolServerUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToolServersApi - interface
 * @export
 * @interface ToolServersApi
 */
export interface ToolServersApiInterface {
    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * @summary Bulk Server Operation
     * @param {ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters: ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkOperationResult>;

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * @summary Check Server Health
     * @param {ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters: ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerHealthCheck>;

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * @summary Create Tool Server
     * @param {ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    createToolServerApiV1ToolserversServersPost(requestParameters: ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse>;

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * @summary Delete Tool Server
     * @param {ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters: ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerDeleteResponse>;

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool
     * @param {ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters: ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolOperationResponse>;

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool Server
     * @param {ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters: ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse>;

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool
     * @param {ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters: ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolOperationResponse>;

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool Server
     * @param {ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters: ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse>;

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * @summary Get Server Metrics
     * @param {ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters: ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerMetrics>;

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * @summary Get Server Tools
     * @param {ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters: ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServerToolsResponse>;

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * @summary Get Tool Server
     * @param {ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getToolServerApiV1ToolserversServersServerIdGet(requestParameters: ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse>;

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * @summary List All Tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    listAllToolsApiV1ToolserversToolsAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<{ [key: string]: any; }>>;

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * @summary List Tool Servers
     * @param {ToolServersApiListToolServersApiV1ToolserversServersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    listToolServersApiV1ToolserversServersGet(requestParameters?: ToolServersApiListToolServersApiV1ToolserversServersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ToolServerResponse>>;

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Restart Tool Server
     * @param {ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters: ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse>;

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Start Tool Server
     * @param {ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters: ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse>;

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Stop Tool Server
     * @param {ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters: ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerOperationResponse>;

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * @summary Test Server Connectivity
     * @param {ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters: ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * @summary Update Tool Server
     * @param {ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    updateToolServerApiV1ToolserversServersServerIdPut(requestParameters: ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ToolServerResponse>;

}

/**
 * Request parameters for bulkServerOperationApiV1ToolserversServersBulkPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest
 */
export interface ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest {
    /**
     * 
     * @type {BulkToolServerOperation}
     * @memberof ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPost
     */
    readonly bulkToolServerOperation: BulkToolServerOperation
}

/**
 * Request parameters for checkServerHealthApiV1ToolserversServersServerIdHealthGet operation in ToolServersApi.
 * @export
 * @interface ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest
 */
export interface ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGet
     */
    readonly serverId: string
}

/**
 * Request parameters for createToolServerApiV1ToolserversServersPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest
 */
export interface ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest {
    /**
     * 
     * @type {ToolServerCreate}
     * @memberof ToolServersApiCreateToolServerApiV1ToolserversServersPost
     */
    readonly toolServerCreate: ToolServerCreate
}

/**
 * Request parameters for deleteToolServerApiV1ToolserversServersServerIdDelete operation in ToolServersApi.
 * @export
 * @interface ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest
 */
export interface ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDelete
     */
    readonly serverId: string
}

/**
 * Request parameters for disableToolApiV1ToolserversToolsToolIdDisablePost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest
 */
export interface ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePost
     */
    readonly toolId: string
}

/**
 * Request parameters for disableToolServerApiV1ToolserversServersServerIdDisablePost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest
 */
export interface ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePost
     */
    readonly serverId: string
}

/**
 * Request parameters for enableToolApiV1ToolserversToolsToolIdEnablePost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest
 */
export interface ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePost
     */
    readonly toolId: string
}

/**
 * Request parameters for enableToolServerApiV1ToolserversServersServerIdEnablePost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest
 */
export interface ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePost
     */
    readonly serverId: string
}

/**
 * Request parameters for getServerMetricsApiV1ToolserversServersServerIdMetricsGet operation in ToolServersApi.
 * @export
 * @interface ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest
 */
export interface ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGet
     */
    readonly serverId: string
}

/**
 * Request parameters for getServerToolsApiV1ToolserversServersServerIdToolsGet operation in ToolServersApi.
 * @export
 * @interface ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest
 */
export interface ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGet
     */
    readonly serverId: string

    /**
     * 
     * @type {number}
     * @memberof ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for getToolServerApiV1ToolserversServersServerIdGet operation in ToolServersApi.
 * @export
 * @interface ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest
 */
export interface ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiGetToolServerApiV1ToolserversServersServerIdGet
     */
    readonly serverId: string
}

/**
 * Request parameters for listToolServersApiV1ToolserversServersGet operation in ToolServersApi.
 * @export
 * @interface ToolServersApiListToolServersApiV1ToolserversServersGetRequest
 */
export interface ToolServersApiListToolServersApiV1ToolserversServersGetRequest {
    /**
     * 
     * @type {ServerStatus}
     * @memberof ToolServersApiListToolServersApiV1ToolserversServersGet
     */
    readonly status?: ServerStatus | null

    /**
     * 
     * @type {boolean}
     * @memberof ToolServersApiListToolServersApiV1ToolserversServersGet
     */
    readonly includeBuiltin?: boolean
}

/**
 * Request parameters for restartToolServerApiV1ToolserversServersServerIdRestartPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest
 */
export interface ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPost
     */
    readonly serverId: string
}

/**
 * Request parameters for startToolServerApiV1ToolserversServersServerIdStartPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest
 */
export interface ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPost
     */
    readonly serverId: string
}

/**
 * Request parameters for stopToolServerApiV1ToolserversServersServerIdStopPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest
 */
export interface ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPost
     */
    readonly serverId: string
}

/**
 * Request parameters for testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost operation in ToolServersApi.
 * @export
 * @interface ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest
 */
export interface ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost
     */
    readonly serverId: string
}

/**
 * Request parameters for updateToolServerApiV1ToolserversServersServerIdPut operation in ToolServersApi.
 * @export
 * @interface ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest
 */
export interface ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPut
     */
    readonly serverId: string

    /**
     * 
     * @type {ToolServerUpdate}
     * @memberof ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPut
     */
    readonly toolServerUpdate: ToolServerUpdate
}

/**
 * ToolServersApi - object-oriented interface
 * @export
 * @class ToolServersApi
 * @extends {BaseAPI}
 */
export class ToolServersApi extends BaseAPI implements ToolServersApiInterface {
    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * @summary Bulk Server Operation
     * @param {ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters: ToolServersApiBulkServerOperationApiV1ToolserversServersBulkPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters.bulkToolServerOperation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * @summary Check Server Health
     * @param {ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters: ToolServersApiCheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * @summary Create Tool Server
     * @param {ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public createToolServerApiV1ToolserversServersPost(requestParameters: ToolServersApiCreateToolServerApiV1ToolserversServersPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).createToolServerApiV1ToolserversServersPost(requestParameters.toolServerCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * @summary Delete Tool Server
     * @param {ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters: ToolServersApiDeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool
     * @param {ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters: ToolServersApiDisableToolApiV1ToolserversToolsToolIdDisablePostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters.toolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool Server
     * @param {ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters: ToolServersApiDisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool
     * @param {ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters: ToolServersApiEnableToolApiV1ToolserversToolsToolIdEnablePostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters.toolId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool Server
     * @param {ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters: ToolServersApiEnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * @summary Get Server Metrics
     * @param {ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters: ToolServersApiGetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * @summary Get Server Tools
     * @param {ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters: ToolServersApiGetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters.serverId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * @summary Get Tool Server
     * @param {ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public getToolServerApiV1ToolserversServersServerIdGet(requestParameters: ToolServersApiGetToolServerApiV1ToolserversServersServerIdGetRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).getToolServerApiV1ToolserversServersServerIdGet(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * @summary List All Tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public listAllToolsApiV1ToolserversToolsAllGet(options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).listAllToolsApiV1ToolserversToolsAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * @summary List Tool Servers
     * @param {ToolServersApiListToolServersApiV1ToolserversServersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public listToolServersApiV1ToolserversServersGet(requestParameters: ToolServersApiListToolServersApiV1ToolserversServersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).listToolServersApiV1ToolserversServersGet(requestParameters.status, requestParameters.includeBuiltin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Restart Tool Server
     * @param {ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters: ToolServersApiRestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Start Tool Server
     * @param {ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters: ToolServersApiStartToolServerApiV1ToolserversServersServerIdStartPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Stop Tool Server
     * @param {ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters: ToolServersApiStopToolServerApiV1ToolserversServersServerIdStopPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * @summary Test Server Connectivity
     * @param {ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters: ToolServersApiTestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters.serverId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * @summary Update Tool Server
     * @param {ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApi
     */
    public updateToolServerApiV1ToolserversServersServerIdPut(requestParameters: ToolServersApiUpdateToolServerApiV1ToolserversServersServerIdPutRequest, options?: RawAxiosRequestConfig) {
        return ToolServersApiFp(this.configuration).updateToolServerApiV1ToolserversServersServerIdPut(requestParameters.serverId, requestParameters.toolServerUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}

