/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BackupListResponse,
  BackupRequest,
  BackupResponse,
  BackupType,
  BulkDeleteResponse,
  ExportDataRequest,
  ExportDataResponse,
  HTTPValidationError,
  RestoreRequest,
  RestoreResponse,
  StorageStatsResponse,
} from '../models/index';
import {
    BackupListResponseFromJSON,
    BackupListResponseToJSON,
    BackupRequestFromJSON,
    BackupRequestToJSON,
    BackupResponseFromJSON,
    BackupResponseToJSON,
    BackupTypeFromJSON,
    BackupTypeToJSON,
    BulkDeleteResponseFromJSON,
    BulkDeleteResponseToJSON,
    ExportDataRequestFromJSON,
    ExportDataRequestToJSON,
    ExportDataResponseFromJSON,
    ExportDataResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RestoreRequestFromJSON,
    RestoreRequestToJSON,
    RestoreResponseFromJSON,
    RestoreResponseToJSON,
    StorageStatsResponseFromJSON,
    StorageStatsResponseToJSON,
} from '../models/index';

export interface BulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest {
    requestBody: Array<string>;
}

export interface BulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest {
    requestBody: Array<string>;
}

export interface BulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest {
    requestBody: Array<string>;
}

export interface CreateBackupApiV1DataBackupPostRequest {
    backupRequest: BackupRequest;
}

export interface ExportDataApiV1DataExportPostRequest {
    exportDataRequest: ExportDataRequest;
}

export interface ListBackupsApiV1DataBackupsGetRequest {
    backupType?: BackupType | null;
    status?: string | null;
}

export interface RestoreFromBackupApiV1DataRestorePostRequest {
    restoreRequest: RestoreRequest;
}

/**
 * DataManagementApi - interface
 * 
 * @export
 * @interface DataManagementApiInterface
 */
export interface DataManagementApiInterface {
    /**
     * Bulk delete conversations.
     * @summary Bulk Delete Conversations
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRaw(requestParameters: BulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>>;

    /**
     * Bulk delete conversations.
     * Bulk Delete Conversations
     */
    bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters: BulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse>;

    /**
     * Bulk delete documents.
     * @summary Bulk Delete Documents
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRaw(requestParameters: BulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>>;

    /**
     * Bulk delete documents.
     * Bulk Delete Documents
     */
    bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters: BulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse>;

    /**
     * Bulk delete prompts.
     * @summary Bulk Delete Prompts
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    bulkDeletePromptsApiV1DataBulkDeletePromptsPostRaw(requestParameters: BulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>>;

    /**
     * Bulk delete prompts.
     * Bulk Delete Prompts
     */
    bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters: BulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse>;

    /**
     * Create a data backup.
     * @summary Create Backup
     * @param {BackupRequest} backupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    createBackupApiV1DataBackupPostRaw(requestParameters: CreateBackupApiV1DataBackupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>>;

    /**
     * Create a data backup.
     * Create Backup
     */
    createBackupApiV1DataBackupPost(requestParameters: CreateBackupApiV1DataBackupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse>;

    /**
     * Export data in specified format.
     * @summary Export Data
     * @param {ExportDataRequest} exportDataRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    exportDataApiV1DataExportPostRaw(requestParameters: ExportDataApiV1DataExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportDataResponse>>;

    /**
     * Export data in specified format.
     * Export Data
     */
    exportDataApiV1DataExportPost(requestParameters: ExportDataApiV1DataExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportDataResponse>;

    /**
     * Get storage statistics and usage information.
     * @summary Get Storage Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    getStorageStatsApiV1DataStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageStatsResponse>>;

    /**
     * Get storage statistics and usage information.
     * Get Storage Stats
     */
    getStorageStatsApiV1DataStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageStatsResponse>;

    /**
     * List available backups.
     * @summary List Backups
     * @param {BackupType} [backupType] 
     * @param {string} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    listBackupsApiV1DataBackupsGetRaw(requestParameters: ListBackupsApiV1DataBackupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupListResponse>>;

    /**
     * List available backups.
     * List Backups
     */
    listBackupsApiV1DataBackupsGet(requestParameters: ListBackupsApiV1DataBackupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupListResponse>;

    /**
     * Restore data from a backup.
     * @summary Restore From Backup
     * @param {RestoreRequest} restoreRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataManagementApiInterface
     */
    restoreFromBackupApiV1DataRestorePostRaw(requestParameters: RestoreFromBackupApiV1DataRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestoreResponse>>;

    /**
     * Restore data from a backup.
     * Restore From Backup
     */
    restoreFromBackupApiV1DataRestorePost(requestParameters: RestoreFromBackupApiV1DataRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestoreResponse>;

}

/**
 * 
 */
export class DataManagementApi extends runtime.BaseAPI implements DataManagementApiInterface {

    /**
     * Bulk delete conversations.
     * Bulk Delete Conversations
     */
    async bulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRaw(requestParameters: BulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/bulk/delete-conversations`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Bulk delete conversations.
     * Bulk Delete Conversations
     */
    async bulkDeleteConversationsApiV1DataBulkDeleteConversationsPost(requestParameters: BulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse> {
        const response = await this.bulkDeleteConversationsApiV1DataBulkDeleteConversationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk delete documents.
     * Bulk Delete Documents
     */
    async bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRaw(requestParameters: BulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/bulk/delete-documents`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Bulk delete documents.
     * Bulk Delete Documents
     */
    async bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPost(requestParameters: BulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse> {
        const response = await this.bulkDeleteDocumentsApiV1DataBulkDeleteDocumentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk delete prompts.
     * Bulk Delete Prompts
     */
    async bulkDeletePromptsApiV1DataBulkDeletePromptsPostRaw(requestParameters: BulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkDeleteResponse>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeletePromptsApiV1DataBulkDeletePromptsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/bulk/delete-prompts`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Bulk delete prompts.
     * Bulk Delete Prompts
     */
    async bulkDeletePromptsApiV1DataBulkDeletePromptsPost(requestParameters: BulkDeletePromptsApiV1DataBulkDeletePromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkDeleteResponse> {
        const response = await this.bulkDeletePromptsApiV1DataBulkDeletePromptsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a data backup.
     * Create Backup
     */
    async createBackupApiV1DataBackupPostRaw(requestParameters: CreateBackupApiV1DataBackupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupResponse>> {
        if (requestParameters['backupRequest'] == null) {
            throw new runtime.RequiredError(
                'backupRequest',
                'Required parameter "backupRequest" was null or undefined when calling createBackupApiV1DataBackupPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/backup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BackupRequestToJSON(requestParameters['backupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupResponseFromJSON(jsonValue));
    }

    /**
     * Create a data backup.
     * Create Backup
     */
    async createBackupApiV1DataBackupPost(requestParameters: CreateBackupApiV1DataBackupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupResponse> {
        const response = await this.createBackupApiV1DataBackupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export data in specified format.
     * Export Data
     */
    async exportDataApiV1DataExportPostRaw(requestParameters: ExportDataApiV1DataExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExportDataResponse>> {
        if (requestParameters['exportDataRequest'] == null) {
            throw new runtime.RequiredError(
                'exportDataRequest',
                'Required parameter "exportDataRequest" was null or undefined when calling exportDataApiV1DataExportPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportDataRequestToJSON(requestParameters['exportDataRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportDataResponseFromJSON(jsonValue));
    }

    /**
     * Export data in specified format.
     * Export Data
     */
    async exportDataApiV1DataExportPost(requestParameters: ExportDataApiV1DataExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExportDataResponse> {
        const response = await this.exportDataApiV1DataExportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get storage statistics and usage information.
     * Get Storage Stats
     */
    async getStorageStatsApiV1DataStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StorageStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get storage statistics and usage information.
     * Get Storage Stats
     */
    async getStorageStatsApiV1DataStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StorageStatsResponse> {
        const response = await this.getStorageStatsApiV1DataStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List available backups.
     * List Backups
     */
    async listBackupsApiV1DataBackupsGetRaw(requestParameters: ListBackupsApiV1DataBackupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BackupListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['backupType'] != null) {
            queryParameters['backup_type'] = requestParameters['backupType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/backups`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BackupListResponseFromJSON(jsonValue));
    }

    /**
     * List available backups.
     * List Backups
     */
    async listBackupsApiV1DataBackupsGet(requestParameters: ListBackupsApiV1DataBackupsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BackupListResponse> {
        const response = await this.listBackupsApiV1DataBackupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore data from a backup.
     * Restore From Backup
     */
    async restoreFromBackupApiV1DataRestorePostRaw(requestParameters: RestoreFromBackupApiV1DataRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestoreResponse>> {
        if (requestParameters['restoreRequest'] == null) {
            throw new runtime.RequiredError(
                'restoreRequest',
                'Required parameter "restoreRequest" was null or undefined when calling restoreFromBackupApiV1DataRestorePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/data/restore`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RestoreRequestToJSON(requestParameters['restoreRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestoreResponseFromJSON(jsonValue));
    }

    /**
     * Restore data from a backup.
     * Restore From Backup
     */
    async restoreFromBackupApiV1DataRestorePost(requestParameters: RestoreFromBackupApiV1DataRestorePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestoreResponse> {
        const response = await this.restoreFromBackupApiV1DataRestorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
