/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatterSchemasWorkflowsWorkflowTemplatesResponse,
  HTTPValidationError,
  NodeTypeResponse,
  WorkflowAnalyticsResponse,
  WorkflowDefinitionCreate,
  WorkflowDefinitionResponse,
  WorkflowDefinitionUpdate,
  WorkflowDefinitionsResponse,
  WorkflowExecutionRequest,
  WorkflowExecutionResponse,
  WorkflowTemplateCreate,
  WorkflowTemplateResponse,
  WorkflowTemplateUpdate,
  WorkflowValidationResponse,
} from '../models/index';
import {
    ChatterSchemasWorkflowsWorkflowTemplatesResponseFromJSON,
    ChatterSchemasWorkflowsWorkflowTemplatesResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    NodeTypeResponseFromJSON,
    NodeTypeResponseToJSON,
    WorkflowAnalyticsResponseFromJSON,
    WorkflowAnalyticsResponseToJSON,
    WorkflowDefinitionCreateFromJSON,
    WorkflowDefinitionCreateToJSON,
    WorkflowDefinitionResponseFromJSON,
    WorkflowDefinitionResponseToJSON,
    WorkflowDefinitionUpdateFromJSON,
    WorkflowDefinitionUpdateToJSON,
    WorkflowDefinitionsResponseFromJSON,
    WorkflowDefinitionsResponseToJSON,
    WorkflowExecutionRequestFromJSON,
    WorkflowExecutionRequestToJSON,
    WorkflowExecutionResponseFromJSON,
    WorkflowExecutionResponseToJSON,
    WorkflowTemplateCreateFromJSON,
    WorkflowTemplateCreateToJSON,
    WorkflowTemplateResponseFromJSON,
    WorkflowTemplateResponseToJSON,
    WorkflowTemplateUpdateFromJSON,
    WorkflowTemplateUpdateToJSON,
    WorkflowValidationResponseFromJSON,
    WorkflowValidationResponseToJSON,
} from '../models/index';

export interface CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRequest {
    workflowDefinitionCreate: WorkflowDefinitionCreate;
}

export interface CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost0Request {
    workflowDefinitionCreate: WorkflowDefinitionCreate;
}

export interface CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRequest {
    workflowTemplateCreate: WorkflowTemplateCreate;
}

export interface CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost0Request {
    workflowTemplateCreate: WorkflowTemplateCreate;
}

export interface DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRequest {
    workflowId: string;
}

export interface DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete0Request {
    workflowId: string;
}

export interface ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRequest {
    workflowId: string;
    workflowExecutionRequest: WorkflowExecutionRequest;
}

export interface ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost0Request {
    workflowId: string;
    workflowExecutionRequest: WorkflowExecutionRequest;
}

export interface GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRequest {
    workflowId: string;
}

export interface GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet0Request {
    workflowId: string;
}

export interface GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRequest {
    workflowId: string;
}

export interface GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet0Request {
    workflowId: string;
}

export interface ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRequest {
    workflowId: string;
}

export interface ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet0Request {
    workflowId: string;
}

export interface UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRequest {
    workflowId: string;
    workflowDefinitionUpdate: WorkflowDefinitionUpdate;
}

export interface UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut0Request {
    workflowId: string;
    workflowDefinitionUpdate: WorkflowDefinitionUpdate;
}

export interface UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRequest {
    templateId: string;
    workflowTemplateUpdate: WorkflowTemplateUpdate;
}

export interface UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut0Request {
    templateId: string;
    workflowTemplateUpdate: WorkflowTemplateUpdate;
}

export interface ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRequest {
    workflowDefinitionCreate: WorkflowDefinitionCreate;
}

export interface ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost0Request {
    workflowDefinitionCreate: WorkflowDefinitionCreate;
}

/**
 * WorkflowsApi - interface
 * 
 * @export
 * @interface WorkflowsApiInterface
 */
export interface WorkflowsApiInterface {
    /**
     * Create a new workflow definition.
     * @summary Create Workflow Definition
     * @param {WorkflowDefinitionCreate} workflowDefinitionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRaw(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * Create a new workflow definition.
     * @summary Create Workflow Definition
     * @param {WorkflowDefinitionCreate} workflowDefinitionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1Raw(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * Create a new workflow template.
     * @summary Create Workflow Template
     * @param {WorkflowTemplateCreate} workflowTemplateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRaw(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>>;

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse>;

    /**
     * Create a new workflow template.
     * @summary Create Workflow Template
     * @param {WorkflowTemplateCreate} workflowTemplateCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2Raw(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>>;

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse>;

    /**
     * Delete a workflow definition.
     * @summary Delete Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRaw(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>>;

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }>;

    /**
     * Delete a workflow definition.
     * @summary Delete Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3Raw(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>>;

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }>;

    /**
     * Execute a workflow definition.
     * @summary Execute Workflow
     * @param {string} workflowId Workflow ID
     * @param {WorkflowExecutionRequest} workflowExecutionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRaw(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionResponse>>;

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionResponse>;

    /**
     * Execute a workflow definition.
     * @summary Execute Workflow
     * @param {string} workflowId Workflow ID
     * @param {WorkflowExecutionRequest} workflowExecutionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4Raw(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionResponse>>;

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionResponse>;

    /**
     * Get list of supported workflow node types.
     * @summary Get Supported Node Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NodeTypeResponse>>>;

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NodeTypeResponse>>;

    /**
     * Get list of supported workflow node types.
     * @summary Get Supported Node Types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NodeTypeResponse>>>;

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NodeTypeResponse>>;

    /**
     * Get analytics for a specific workflow definition.
     * @summary Get Workflow Analytics
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRaw(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowAnalyticsResponse>>;

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowAnalyticsResponse>;

    /**
     * Get analytics for a specific workflow definition.
     * @summary Get Workflow Analytics
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6Raw(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowAnalyticsResponse>>;

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowAnalyticsResponse>;

    /**
     * Get a specific workflow definition.
     * @summary Get Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRaw(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * Get a specific workflow definition.
     * @summary Get Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7Raw(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * List all workflow definitions for the current user.
     * @summary List Workflow Definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionsResponse>>;

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionsResponse>;

    /**
     * List all workflow definitions for the current user.
     * @summary List Workflow Definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionsResponse>>;

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionsResponse>;

    /**
     * List executions for a workflow definition.
     * @summary List Workflow Executions
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRaw(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowExecutionResponse>>>;

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowExecutionResponse>>;

    /**
     * List executions for a workflow definition.
     * @summary List Workflow Executions
     * @param {string} workflowId Workflow ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9Raw(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowExecutionResponse>>>;

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowExecutionResponse>>;

    /**
     * List all workflow templates accessible to the current user.
     * @summary List Workflow Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatterSchemasWorkflowsWorkflowTemplatesResponse>>;

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatterSchemasWorkflowsWorkflowTemplatesResponse>;

    /**
     * List all workflow templates accessible to the current user.
     * @summary List Workflow Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet_10Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatterSchemasWorkflowsWorkflowTemplatesResponse>>;

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet_10(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatterSchemasWorkflowsWorkflowTemplatesResponse>;

    /**
     * Update a workflow definition.
     * @summary Update Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {WorkflowDefinitionUpdate} workflowDefinitionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRaw(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * Update a workflow definition.
     * @summary Update Workflow Definition
     * @param {string} workflowId Workflow ID
     * @param {WorkflowDefinitionUpdate} workflowDefinitionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11Raw(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>>;

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse>;

    /**
     * Update a workflow template.
     * @summary Update Workflow Template
     * @param {string} templateId 
     * @param {WorkflowTemplateUpdate} workflowTemplateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRaw(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>>;

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse>;

    /**
     * Update a workflow template.
     * @summary Update Workflow Template
     * @param {string} templateId 
     * @param {WorkflowTemplateUpdate} workflowTemplateUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12Raw(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>>;

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse>;

    /**
     * Validate a workflow definition.
     * @summary Validate Workflow Definition
     * @param {WorkflowDefinitionCreate} workflowDefinitionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRaw(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowValidationResponse>>;

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowValidationResponse>;

    /**
     * Validate a workflow definition.
     * @summary Validate Workflow Definition
     * @param {WorkflowDefinitionCreate} workflowDefinitionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiInterface
     */
    validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13Raw(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowValidationResponse>>;

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowValidationResponse>;

}

/**
 * 
 */
export class WorkflowsApi extends runtime.BaseAPI implements WorkflowsApiInterface {

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    async createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRaw(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowDefinitionCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionCreate',
                'Required parameter "workflowDefinitionCreate" was null or undefined when calling createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionCreateToJSON(requestParameters['workflowDefinitionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    async createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    async createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1Raw(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowDefinitionCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionCreate',
                'Required parameter "workflowDefinitionCreate" was null or undefined when calling createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionCreateToJSON(requestParameters['workflowDefinitionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Create a new workflow definition.
     * Create Workflow Definition
     */
    async createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1(requestParameters: CreateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.createWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    async createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRaw(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>> {
        if (requestParameters['workflowTemplateCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateCreate',
                'Required parameter "workflowTemplateCreate" was null or undefined when calling createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateCreateToJSON(requestParameters['workflowTemplateCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    async createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse> {
        const response = await this.createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    async createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2Raw(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>> {
        if (requestParameters['workflowTemplateCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateCreate',
                'Required parameter "workflowTemplateCreate" was null or undefined when calling createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateCreateToJSON(requestParameters['workflowTemplateCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateResponseFromJSON(jsonValue));
    }

    /**
     * Create a new workflow template.
     * Create Workflow Template
     */
    async createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2(requestParameters: CreateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse> {
        const response = await this.createWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesPost_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    async deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRaw(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    async deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    async deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3Raw(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a workflow definition.
     * Delete Workflow Definition
     */
    async deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3(requestParameters: DeleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: string; }> {
        const response = await this.deleteWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdDelete_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    async executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRaw(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost().'
            );
        }

        if (requestParameters['workflowExecutionRequest'] == null) {
            throw new runtime.RequiredError(
                'workflowExecutionRequest',
                'Required parameter "workflowExecutionRequest" was null or undefined when calling executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/execute`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowExecutionRequestToJSON(requestParameters['workflowExecutionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowExecutionResponseFromJSON(jsonValue));
    }

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    async executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionResponse> {
        const response = await this.executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    async executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4Raw(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowExecutionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4().'
            );
        }

        if (requestParameters['workflowExecutionRequest'] == null) {
            throw new runtime.RequiredError(
                'workflowExecutionRequest',
                'Required parameter "workflowExecutionRequest" was null or undefined when calling executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/execute`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowExecutionRequestToJSON(requestParameters['workflowExecutionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowExecutionResponseFromJSON(jsonValue));
    }

    /**
     * Execute a workflow definition.
     * Execute Workflow
     */
    async executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4(requestParameters: ExecuteWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowExecutionResponse> {
        const response = await this.executeWorkflowApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutePost_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    async getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NodeTypeResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/node-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NodeTypeResponseFromJSON));
    }

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    async getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NodeTypeResponse>> {
        const response = await this.getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    async getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet_5Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NodeTypeResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/node-types`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NodeTypeResponseFromJSON));
    }

    /**
     * Get list of supported workflow node types.
     * Get Supported Node Types
     */
    async getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet_5(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NodeTypeResponse>> {
        const response = await this.getSupportedNodeTypesApiV1WorkflowsWorkflowsNodeTypesGet_5Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    async getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRaw(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowAnalyticsResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/analytics`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowAnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    async getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowAnalyticsResponse> {
        const response = await this.getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    async getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6Raw(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowAnalyticsResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/analytics`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowAnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Get analytics for a specific workflow definition.
     * Get Workflow Analytics
     */
    async getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6(requestParameters: GetWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowAnalyticsResponse> {
        const response = await this.getWorkflowAnalyticsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdAnalyticsGet_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    async getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRaw(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    async getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    async getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7Raw(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific workflow definition.
     * Get Workflow Definition
     */
    async getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7(requestParameters: GetWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.getWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdGet_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    async listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionsResponseFromJSON(jsonValue));
    }

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    async listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionsResponse> {
        const response = await this.listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    async listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionsResponseFromJSON(jsonValue));
    }

    /**
     * List all workflow definitions for the current user.
     * List Workflow Definitions
     */
    async listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionsResponse> {
        const response = await this.listWorkflowDefinitionsApiV1WorkflowsWorkflowsDefinitionsGet_8Raw(initOverrides);
        return await response.value();
    }

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    async listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRaw(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowExecutionResponse>>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/executions`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowExecutionResponseFromJSON));
    }

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    async listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowExecutionResponse>> {
        const response = await this.listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    async listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9Raw(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<WorkflowExecutionResponse>>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}/executions`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkflowExecutionResponseFromJSON));
    }

    /**
     * List executions for a workflow definition.
     * List Workflow Executions
     */
    async listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9(requestParameters: ListWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<WorkflowExecutionResponse>> {
        const response = await this.listWorkflowExecutionsApiV1WorkflowsWorkflowsDefinitionsWorkflowIdExecutionsGet_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    async listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatterSchemasWorkflowsWorkflowTemplatesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatterSchemasWorkflowsWorkflowTemplatesResponseFromJSON(jsonValue));
    }

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    async listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatterSchemasWorkflowsWorkflowTemplatesResponse> {
        const response = await this.listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    async listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet_10Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatterSchemasWorkflowsWorkflowTemplatesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatterSchemasWorkflowsWorkflowTemplatesResponseFromJSON(jsonValue));
    }

    /**
     * List all workflow templates accessible to the current user.
     * List Workflow Templates
     */
    async listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet_10(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatterSchemasWorkflowsWorkflowTemplatesResponse> {
        const response = await this.listWorkflowTemplatesApiV1WorkflowsWorkflowsTemplatesGet_10Raw(initOverrides);
        return await response.value();
    }

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    async updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRaw(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut().'
            );
        }

        if (requestParameters['workflowDefinitionUpdate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionUpdate',
                'Required parameter "workflowDefinitionUpdate" was null or undefined when calling updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionUpdateToJSON(requestParameters['workflowDefinitionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    async updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    async updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11Raw(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowDefinitionResponse>> {
        if (requestParameters['workflowId'] == null) {
            throw new runtime.RequiredError(
                'workflowId',
                'Required parameter "workflowId" was null or undefined when calling updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11().'
            );
        }

        if (requestParameters['workflowDefinitionUpdate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionUpdate',
                'Required parameter "workflowDefinitionUpdate" was null or undefined when calling updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/{workflow_id}`;
        urlPath = urlPath.replace(`{${"workflow_id"}}`, encodeURIComponent(String(requestParameters['workflowId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionUpdateToJSON(requestParameters['workflowDefinitionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowDefinitionResponseFromJSON(jsonValue));
    }

    /**
     * Update a workflow definition.
     * Update Workflow Definition
     */
    async updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11(requestParameters: UpdateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowDefinitionResponse> {
        const response = await this.updateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsWorkflowIdPut_11Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    async updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRaw(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut().'
            );
        }

        if (requestParameters['workflowTemplateUpdate'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateUpdate',
                'Required parameter "workflowTemplateUpdate" was null or undefined when calling updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates/{template_id}`;
        urlPath = urlPath.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters['templateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateUpdateToJSON(requestParameters['workflowTemplateUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateResponseFromJSON(jsonValue));
    }

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    async updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse> {
        const response = await this.updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    async updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12Raw(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowTemplateResponse>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12().'
            );
        }

        if (requestParameters['workflowTemplateUpdate'] == null) {
            throw new runtime.RequiredError(
                'workflowTemplateUpdate',
                'Required parameter "workflowTemplateUpdate" was null or undefined when calling updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/templates/{template_id}`;
        urlPath = urlPath.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters['templateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowTemplateUpdateToJSON(requestParameters['workflowTemplateUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowTemplateResponseFromJSON(jsonValue));
    }

    /**
     * Update a workflow template.
     * Update Workflow Template
     */
    async updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12(requestParameters: UpdateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowTemplateResponse> {
        const response = await this.updateWorkflowTemplateApiV1WorkflowsWorkflowsTemplatesTemplateIdPut_12Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    async validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRaw(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowValidationResponse>> {
        if (requestParameters['workflowDefinitionCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionCreate',
                'Required parameter "workflowDefinitionCreate" was null or undefined when calling validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionCreateToJSON(requestParameters['workflowDefinitionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    async validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowValidationResponse> {
        const response = await this.validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    async validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13Raw(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WorkflowValidationResponse>> {
        if (requestParameters['workflowDefinitionCreate'] == null) {
            throw new runtime.RequiredError(
                'workflowDefinitionCreate',
                'Required parameter "workflowDefinitionCreate" was null or undefined when calling validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/workflows/workflows/definitions/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkflowDefinitionCreateToJSON(requestParameters['workflowDefinitionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkflowValidationResponseFromJSON(jsonValue));
    }

    /**
     * Validate a workflow definition.
     * Validate Workflow Definition
     */
    async validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13(requestParameters: ValidateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WorkflowValidationResponse> {
        const response = await this.validateWorkflowDefinitionApiV1WorkflowsWorkflowsDefinitionsValidatePost_13Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
