/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestVariant } from './TestVariant';
import {
    TestVariantFromJSON,
    TestVariantFromJSONTyped,
    TestVariantToJSON,
    TestVariantToJSONTyped,
} from './TestVariant';
import type { MetricType } from './MetricType';
import {
    MetricTypeFromJSON,
    MetricTypeFromJSONTyped,
    MetricTypeToJSON,
    MetricTypeToJSONTyped,
} from './MetricType';
import type { VariantAllocation } from './VariantAllocation';
import {
    VariantAllocationFromJSON,
    VariantAllocationFromJSONTyped,
    VariantAllocationToJSON,
    VariantAllocationToJSONTyped,
} from './VariantAllocation';
import type { TestType } from './TestType';
import {
    TestTypeFromJSON,
    TestTypeFromJSONTyped,
    TestTypeToJSON,
    TestTypeToJSONTyped,
} from './TestType';

/**
 * Request schema for creating an A/B test.
 * @export
 * @interface ABTestCreateRequest
 */
export interface ABTestCreateRequest {
    /**
     * Test name
     * @type {string}
     * @memberof ABTestCreateRequest
     */
    name: string;
    /**
     * Test description
     * @type {string}
     * @memberof ABTestCreateRequest
     */
    description: string;
    /**
     * 
     * @type {TestType}
     * @memberof ABTestCreateRequest
     */
    testType: TestType;
    /**
     * 
     * @type {VariantAllocation}
     * @memberof ABTestCreateRequest
     */
    allocationStrategy: VariantAllocation;
    /**
     * Test variants
     * @type {Array<TestVariant>}
     * @memberof ABTestCreateRequest
     */
    variants: Array<TestVariant>;
    /**
     * Metrics to track
     * @type {Array<MetricType>}
     * @memberof ABTestCreateRequest
     */
    metrics: Array<MetricType>;
    /**
     * Test duration in days
     * @type {number}
     * @memberof ABTestCreateRequest
     */
    durationDays?: number;
    /**
     * Minimum sample size
     * @type {number}
     * @memberof ABTestCreateRequest
     */
    minSampleSize?: number;
    /**
     * Statistical confidence level
     * @type {number}
     * @memberof ABTestCreateRequest
     */
    confidenceLevel?: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ABTestCreateRequest
     */
    targetAudience?: { [key: string]: any; } | null;
    /**
     * Percentage of traffic to include
     * @type {number}
     * @memberof ABTestCreateRequest
     */
    trafficPercentage?: number;
    /**
     * Test tags
     * @type {Array<string>}
     * @memberof ABTestCreateRequest
     */
    tags?: Array<string>;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof ABTestCreateRequest
     */
    metadata?: { [key: string]: any; };
}



/**
 * Check if a given object implements the ABTestCreateRequest interface.
 */
export function instanceOfABTestCreateRequest(value: object): value is ABTestCreateRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('testType' in value) || value['testType'] === undefined) return false;
    if (!('allocationStrategy' in value) || value['allocationStrategy'] === undefined) return false;
    if (!('variants' in value) || value['variants'] === undefined) return false;
    if (!('metrics' in value) || value['metrics'] === undefined) return false;
    return true;
}

export function ABTestCreateRequestFromJSON(json: any): ABTestCreateRequest {
    return ABTestCreateRequestFromJSONTyped(json, false);
}

export function ABTestCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ABTestCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'testType': TestTypeFromJSON(json['test_type']),
        'allocationStrategy': VariantAllocationFromJSON(json['allocation_strategy']),
        'variants': ((json['variants'] as Array<any>).map(TestVariantFromJSON)),
        'metrics': ((json['metrics'] as Array<any>).map(MetricTypeFromJSON)),
        'durationDays': json['duration_days'] == null ? undefined : json['duration_days'],
        'minSampleSize': json['min_sample_size'] == null ? undefined : json['min_sample_size'],
        'confidenceLevel': json['confidence_level'] == null ? undefined : json['confidence_level'],
        'targetAudience': json['target_audience'] == null ? undefined : json['target_audience'],
        'trafficPercentage': json['traffic_percentage'] == null ? undefined : json['traffic_percentage'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function ABTestCreateRequestToJSON(json: any): ABTestCreateRequest {
    return ABTestCreateRequestToJSONTyped(json, false);
}

export function ABTestCreateRequestToJSONTyped(value?: ABTestCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'test_type': TestTypeToJSON(value['testType']),
        'allocation_strategy': VariantAllocationToJSON(value['allocationStrategy']),
        'variants': ((value['variants'] as Array<any>).map(TestVariantToJSON)),
        'metrics': ((value['metrics'] as Array<any>).map(MetricTypeToJSON)),
        'duration_days': value['durationDays'],
        'min_sample_size': value['minSampleSize'],
        'confidence_level': value['confidenceLevel'],
        'target_audience': value['targetAudience'],
        'traffic_percentage': value['trafficPercentage'],
        'tags': value['tags'],
        'metadata': value['metadata'],
    };
}

