/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Response schema for agent interaction.
 * @export
 * @interface AgentInteractResponse
 */
export interface AgentInteractResponse {
    /**
     * Agent ID
     * @type {string}
     * @memberof AgentInteractResponse
     */
    agentId: string;
    /**
     * Agent response
     * @type {string}
     * @memberof AgentInteractResponse
     */
    response: string;
    /**
     * Conversation ID
     * @type {string}
     * @memberof AgentInteractResponse
     */
    conversationId: string;
    /**
     * Tools used in response
     * @type {Array<string>}
     * @memberof AgentInteractResponse
     */
    toolsUsed: Array<string>;
    /**
     * Confidence score
     * @type {number}
     * @memberof AgentInteractResponse
     */
    confidenceScore: number;
    /**
     * Response time in seconds
     * @type {number}
     * @memberof AgentInteractResponse
     */
    responseTime: number;
    /**
     * Response timestamp
     * @type {Date}
     * @memberof AgentInteractResponse
     */
    timestamp: Date;
}

/**
 * Check if a given object implements the AgentInteractResponse interface.
 */
export function instanceOfAgentInteractResponse(value: object): value is AgentInteractResponse {
    if (!('agentId' in value) || value['agentId'] === undefined) return false;
    if (!('response' in value) || value['response'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('toolsUsed' in value) || value['toolsUsed'] === undefined) return false;
    if (!('confidenceScore' in value) || value['confidenceScore'] === undefined) return false;
    if (!('responseTime' in value) || value['responseTime'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function AgentInteractResponseFromJSON(json: any): AgentInteractResponse {
    return AgentInteractResponseFromJSONTyped(json, false);
}

export function AgentInteractResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentInteractResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'agentId': json['agent_id'],
        'response': json['response'],
        'conversationId': json['conversation_id'],
        'toolsUsed': json['tools_used'],
        'confidenceScore': json['confidence_score'],
        'responseTime': json['response_time'],
        'timestamp': (new Date(json['timestamp'])),
    };
}

export function AgentInteractResponseToJSON(json: any): AgentInteractResponse {
    return AgentInteractResponseToJSONTyped(json, false);
}

export function AgentInteractResponseToJSONTyped(value?: AgentInteractResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'agent_id': value['agentId'],
        'response': value['response'],
        'conversation_id': value['conversationId'],
        'tools_used': value['toolsUsed'],
        'confidence_score': value['confidenceScore'],
        'response_time': value['responseTime'],
        'timestamp': ((value['timestamp']).toISOString()),
    };
}

