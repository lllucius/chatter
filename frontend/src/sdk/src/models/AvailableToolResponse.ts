/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for individual available tool.
 * @export
 * @interface AvailableToolResponse
 */
export interface AvailableToolResponse {
    /**
     * Tool name
     * @type {string}
     * @memberof AvailableToolResponse
     */
    name: string;
    /**
     * Tool description
     * @type {string}
     * @memberof AvailableToolResponse
     */
    description: string;
    /**
     * Tool type (mcp, builtin)
     * @type {string}
     * @memberof AvailableToolResponse
     */
    type: string;
    /**
     * Tool arguments schema
     * @type {{ [key: string]: any; }}
     * @memberof AvailableToolResponse
     */
    argsSchema: { [key: string]: any; };
}

/**
 * Check if a given object implements the AvailableToolResponse interface.
 */
export function instanceOfAvailableToolResponse(value: object): value is AvailableToolResponse {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('argsSchema' in value) || value['argsSchema'] === undefined) return false;
    return true;
}

export function AvailableToolResponseFromJSON(json: any): AvailableToolResponse {
    return AvailableToolResponseFromJSONTyped(json, false);
}

export function AvailableToolResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AvailableToolResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'type': json['type'],
        'argsSchema': json['args_schema'],
    };
}

export function AvailableToolResponseToJSON(json: any): AvailableToolResponse {
    return AvailableToolResponseToJSONTyped(json, false);
}

export function AvailableToolResponseToJSONTyped(value?: AvailableToolResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'type': value['type'],
        'args_schema': value['argsSchema'],
    };
}

