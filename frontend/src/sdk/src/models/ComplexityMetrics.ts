/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for workflow complexity metrics.
 * @export
 * @interface ComplexityMetrics
 */
export interface ComplexityMetrics {
    /**
     * Overall complexity score
     * @type {number}
     * @memberof ComplexityMetrics
     */
    score: number;
    /**
     * Number of nodes
     * @type {number}
     * @memberof ComplexityMetrics
     */
    nodeCount: number;
    /**
     * Number of edges
     * @type {number}
     * @memberof ComplexityMetrics
     */
    edgeCount: number;
    /**
     * Maximum path depth
     * @type {number}
     * @memberof ComplexityMetrics
     */
    depth: number;
    /**
     * Average branching factor
     * @type {number}
     * @memberof ComplexityMetrics
     */
    branchingFactor: number;
    /**
     * Loop complexity score
     * @type {number}
     * @memberof ComplexityMetrics
     */
    loopComplexity?: number;
    /**
     * Conditional complexity score
     * @type {number}
     * @memberof ComplexityMetrics
     */
    conditionalComplexity?: number;
}

/**
 * Check if a given object implements the ComplexityMetrics interface.
 */
export function instanceOfComplexityMetrics(value: object): value is ComplexityMetrics {
    if (!('score' in value) || value['score'] === undefined) return false;
    if (!('nodeCount' in value) || value['nodeCount'] === undefined) return false;
    if (!('edgeCount' in value) || value['edgeCount'] === undefined) return false;
    if (!('depth' in value) || value['depth'] === undefined) return false;
    if (!('branchingFactor' in value) || value['branchingFactor'] === undefined) return false;
    return true;
}

export function ComplexityMetricsFromJSON(json: any): ComplexityMetrics {
    return ComplexityMetricsFromJSONTyped(json, false);
}

export function ComplexityMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComplexityMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        'score': json['score'],
        'nodeCount': json['node_count'],
        'edgeCount': json['edge_count'],
        'depth': json['depth'],
        'branchingFactor': json['branching_factor'],
        'loopComplexity': json['loop_complexity'] == null ? undefined : json['loop_complexity'],
        'conditionalComplexity': json['conditional_complexity'] == null ? undefined : json['conditional_complexity'],
    };
}

export function ComplexityMetricsToJSON(json: any): ComplexityMetrics {
    return ComplexityMetricsToJSONTyped(json, false);
}

export function ComplexityMetricsToJSONTyped(value?: ComplexityMetrics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'score': value['score'],
        'node_count': value['nodeCount'],
        'edge_count': value['edgeCount'],
        'depth': value['depth'],
        'branching_factor': value['branchingFactor'],
        'loop_complexity': value['loopComplexity'],
        'conditional_complexity': value['conditionalComplexity'],
    };
}

