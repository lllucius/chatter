/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for conversation statistics response.
 * @export
 * @interface ConversationStatsResponse
 */
export interface ConversationStatsResponse {
    /**
     * Total number of conversations
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    totalConversations: number;
    /**
     * Conversations grouped by status
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    conversationsByStatus: { [key: string]: number; };
    /**
     * Total number of messages
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    totalMessages: number;
    /**
     * Messages grouped by role
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    messagesByRole: { [key: string]: number; };
    /**
     * Average messages per conversation
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    avgMessagesPerConversation: number;
    /**
     * Total tokens used
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    totalTokensUsed: number;
    /**
     * Total cost incurred
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    totalCost: number;
    /**
     * Average response time in milliseconds
     * @type {number}
     * @memberof ConversationStatsResponse
     */
    avgResponseTimeMs: number;
    /**
     * Conversations by date
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    conversationsByDate: { [key: string]: number; };
    /**
     * Most active hours
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    mostActiveHours: { [key: string]: number; };
    /**
     * Popular LLM models
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    popularModels: { [key: string]: number; };
    /**
     * Popular LLM providers
     * @type {{ [key: string]: number; }}
     * @memberof ConversationStatsResponse
     */
    popularProviders: { [key: string]: number; };
}

/**
 * Check if a given object implements the ConversationStatsResponse interface.
 */
export function instanceOfConversationStatsResponse(value: object): value is ConversationStatsResponse {
    if (!('totalConversations' in value) || value['totalConversations'] === undefined) return false;
    if (!('conversationsByStatus' in value) || value['conversationsByStatus'] === undefined) return false;
    if (!('totalMessages' in value) || value['totalMessages'] === undefined) return false;
    if (!('messagesByRole' in value) || value['messagesByRole'] === undefined) return false;
    if (!('avgMessagesPerConversation' in value) || value['avgMessagesPerConversation'] === undefined) return false;
    if (!('totalTokensUsed' in value) || value['totalTokensUsed'] === undefined) return false;
    if (!('totalCost' in value) || value['totalCost'] === undefined) return false;
    if (!('avgResponseTimeMs' in value) || value['avgResponseTimeMs'] === undefined) return false;
    if (!('conversationsByDate' in value) || value['conversationsByDate'] === undefined) return false;
    if (!('mostActiveHours' in value) || value['mostActiveHours'] === undefined) return false;
    if (!('popularModels' in value) || value['popularModels'] === undefined) return false;
    if (!('popularProviders' in value) || value['popularProviders'] === undefined) return false;
    return true;
}

export function ConversationStatsResponseFromJSON(json: any): ConversationStatsResponse {
    return ConversationStatsResponseFromJSONTyped(json, false);
}

export function ConversationStatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationStatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalConversations': json['total_conversations'],
        'conversationsByStatus': json['conversations_by_status'],
        'totalMessages': json['total_messages'],
        'messagesByRole': json['messages_by_role'],
        'avgMessagesPerConversation': json['avg_messages_per_conversation'],
        'totalTokensUsed': json['total_tokens_used'],
        'totalCost': json['total_cost'],
        'avgResponseTimeMs': json['avg_response_time_ms'],
        'conversationsByDate': json['conversations_by_date'],
        'mostActiveHours': json['most_active_hours'],
        'popularModels': json['popular_models'],
        'popularProviders': json['popular_providers'],
    };
}

export function ConversationStatsResponseToJSON(json: any): ConversationStatsResponse {
    return ConversationStatsResponseToJSONTyped(json, false);
}

export function ConversationStatsResponseToJSONTyped(value?: ConversationStatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_conversations': value['totalConversations'],
        'conversations_by_status': value['conversationsByStatus'],
        'total_messages': value['totalMessages'],
        'messages_by_role': value['messagesByRole'],
        'avg_messages_per_conversation': value['avgMessagesPerConversation'],
        'total_tokens_used': value['totalTokensUsed'],
        'total_cost': value['totalCost'],
        'avg_response_time_ms': value['avgResponseTimeMs'],
        'conversations_by_date': value['conversationsByDate'],
        'most_active_hours': value['mostActiveHours'],
        'popular_models': value['popularModels'],
        'popular_providers': value['popularProviders'],
    };
}

