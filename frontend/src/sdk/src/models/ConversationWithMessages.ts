/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageResponse } from './MessageResponse';
import {
    MessageResponseFromJSON,
    MessageResponseFromJSONTyped,
    MessageResponseToJSON,
    MessageResponseToJSONTyped,
} from './MessageResponse';
import type { ConversationStatus } from './ConversationStatus';
import {
    ConversationStatusFromJSON,
    ConversationStatusFromJSONTyped,
    ConversationStatusToJSON,
    ConversationStatusToJSONTyped,
} from './ConversationStatus';

/**
 * Schema for conversation with messages.
 * @export
 * @interface ConversationWithMessages
 */
export interface ConversationWithMessages {
    /**
     * Conversation title
     * @type {string}
     * @memberof ConversationWithMessages
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    description?: string | null;
    /**
     * Conversation ID
     * @type {string}
     * @memberof ConversationWithMessages
     */
    id: string;
    /**
     * User ID
     * @type {string}
     * @memberof ConversationWithMessages
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    profileId?: string | null;
    /**
     * 
     * @type {ConversationStatus}
     * @memberof ConversationWithMessages
     */
    status: ConversationStatus;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    llmProvider?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    llmModel?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ConversationWithMessages
     */
    temperature?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConversationWithMessages
     */
    maxTokens?: number | null;
    /**
     * Retrieval enabled
     * @type {boolean}
     * @memberof ConversationWithMessages
     */
    enableRetrieval: boolean;
    /**
     * Number of messages
     * @type {number}
     * @memberof ConversationWithMessages
     */
    messageCount: number;
    /**
     * Total tokens used
     * @type {number}
     * @memberof ConversationWithMessages
     */
    totalTokens: number;
    /**
     * Total cost
     * @type {number}
     * @memberof ConversationWithMessages
     */
    totalCost: number;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    systemPrompt?: string | null;
    /**
     * Context window size
     * @type {number}
     * @memberof ConversationWithMessages
     */
    contextWindow: number;
    /**
     * Memory enabled
     * @type {boolean}
     * @memberof ConversationWithMessages
     */
    memoryEnabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConversationWithMessages
     */
    memoryStrategy?: string | null;
    /**
     * Retrieval limit
     * @type {number}
     * @memberof ConversationWithMessages
     */
    retrievalLimit: number;
    /**
     * Retrieval score threshold
     * @type {number}
     * @memberof ConversationWithMessages
     */
    retrievalScoreThreshold: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ConversationWithMessages
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationWithMessages
     */
    extraMetadata?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationWithMessages
     */
    workflowConfig?: { [key: string]: any; } | null;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof ConversationWithMessages
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof ConversationWithMessages
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ConversationWithMessages
     */
    lastMessageAt?: Date | null;
    /**
     * Conversation messages
     * @type {Array<MessageResponse>}
     * @memberof ConversationWithMessages
     */
    messages?: Array<MessageResponse>;
}



/**
 * Check if a given object implements the ConversationWithMessages interface.
 */
export function instanceOfConversationWithMessages(value: object): value is ConversationWithMessages {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('enableRetrieval' in value) || value['enableRetrieval'] === undefined) return false;
    if (!('messageCount' in value) || value['messageCount'] === undefined) return false;
    if (!('totalTokens' in value) || value['totalTokens'] === undefined) return false;
    if (!('totalCost' in value) || value['totalCost'] === undefined) return false;
    if (!('contextWindow' in value) || value['contextWindow'] === undefined) return false;
    if (!('memoryEnabled' in value) || value['memoryEnabled'] === undefined) return false;
    if (!('retrievalLimit' in value) || value['retrievalLimit'] === undefined) return false;
    if (!('retrievalScoreThreshold' in value) || value['retrievalScoreThreshold'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ConversationWithMessagesFromJSON(json: any): ConversationWithMessages {
    return ConversationWithMessagesFromJSONTyped(json, false);
}

export function ConversationWithMessagesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationWithMessages {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'],
        'userId': json['user_id'],
        'profileId': json['profile_id'] == null ? undefined : json['profile_id'],
        'status': ConversationStatusFromJSON(json['status']),
        'llmProvider': json['llm_provider'] == null ? undefined : json['llm_provider'],
        'llmModel': json['llm_model'] == null ? undefined : json['llm_model'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'enableRetrieval': json['enable_retrieval'],
        'messageCount': json['message_count'],
        'totalTokens': json['total_tokens'],
        'totalCost': json['total_cost'],
        'systemPrompt': json['system_prompt'] == null ? undefined : json['system_prompt'],
        'contextWindow': json['context_window'],
        'memoryEnabled': json['memory_enabled'],
        'memoryStrategy': json['memory_strategy'] == null ? undefined : json['memory_strategy'],
        'retrievalLimit': json['retrieval_limit'],
        'retrievalScoreThreshold': json['retrieval_score_threshold'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'extraMetadata': json['extra_metadata'] == null ? undefined : json['extra_metadata'],
        'workflowConfig': json['workflow_config'] == null ? undefined : json['workflow_config'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'lastMessageAt': json['last_message_at'] == null ? undefined : (new Date(json['last_message_at'])),
        'messages': json['messages'] == null ? undefined : ((json['messages'] as Array<any>).map(MessageResponseFromJSON)),
    };
}

export function ConversationWithMessagesToJSON(json: any): ConversationWithMessages {
    return ConversationWithMessagesToJSONTyped(json, false);
}

export function ConversationWithMessagesToJSONTyped(value?: ConversationWithMessages | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'id': value['id'],
        'user_id': value['userId'],
        'profile_id': value['profileId'],
        'status': ConversationStatusToJSON(value['status']),
        'llm_provider': value['llmProvider'],
        'llm_model': value['llmModel'],
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'enable_retrieval': value['enableRetrieval'],
        'message_count': value['messageCount'],
        'total_tokens': value['totalTokens'],
        'total_cost': value['totalCost'],
        'system_prompt': value['systemPrompt'],
        'context_window': value['contextWindow'],
        'memory_enabled': value['memoryEnabled'],
        'memory_strategy': value['memoryStrategy'],
        'retrieval_limit': value['retrievalLimit'],
        'retrieval_score_threshold': value['retrievalScoreThreshold'],
        'tags': value['tags'],
        'extra_metadata': value['extraMetadata'],
        'workflow_config': value['workflowConfig'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'last_message_at': value['lastMessageAt'] === null ? null : ((value['lastMessageAt'] as any)?.toISOString()),
        'messages': value['messages'] == null ? undefined : ((value['messages'] as Array<any>).map(MessageResponseToJSON)),
    };
}

