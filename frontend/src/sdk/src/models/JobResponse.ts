/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JobStatus } from './JobStatus';
import {
    JobStatusFromJSON,
    JobStatusFromJSONTyped,
    JobStatusToJSON,
    JobStatusToJSONTyped,
} from './JobStatus';
import type { JobPriority } from './JobPriority';
import {
    JobPriorityFromJSON,
    JobPriorityFromJSONTyped,
    JobPriorityToJSON,
    JobPriorityToJSONTyped,
} from './JobPriority';

/**
 * Response schema for job data.
 * @export
 * @interface JobResponse
 */
export interface JobResponse {
    /**
     * Job ID
     * @type {string}
     * @memberof JobResponse
     */
    id: string;
    /**
     * Job name
     * @type {string}
     * @memberof JobResponse
     */
    name: string;
    /**
     * Function name
     * @type {string}
     * @memberof JobResponse
     */
    functionName: string;
    /**
     * 
     * @type {JobPriority}
     * @memberof JobResponse
     */
    priority: JobPriority;
    /**
     * 
     * @type {JobStatus}
     * @memberof JobResponse
     */
    status: JobStatus;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof JobResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof JobResponse
     */
    startedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof JobResponse
     */
    completedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof JobResponse
     */
    scheduledAt?: Date | null;
    /**
     * Number of retry attempts
     * @type {number}
     * @memberof JobResponse
     */
    retryCount: number;
    /**
     * Maximum retry attempts
     * @type {number}
     * @memberof JobResponse
     */
    maxRetries: number;
    /**
     * 
     * @type {string}
     * @memberof JobResponse
     */
    errorMessage?: string | null;
    /**
     * Job result if completed
     * @type {}
     * @memberof JobResponse
     */
    result?:  | null;
    /**
     * Job progress percentage
     * @type {number}
     * @memberof JobResponse
     */
    progress?: number;
    /**
     * 
     * @type {string}
     * @memberof JobResponse
     */
    progressMessage?: string | null;
}



/**
 * Check if a given object implements the JobResponse interface.
 */
export function instanceOfJobResponse(value: object): value is JobResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('functionName' in value) || value['functionName'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('retryCount' in value) || value['retryCount'] === undefined) return false;
    if (!('maxRetries' in value) || value['maxRetries'] === undefined) return false;
    return true;
}

export function JobResponseFromJSON(json: any): JobResponse {
    return JobResponseFromJSONTyped(json, false);
}

export function JobResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'functionName': json['function_name'],
        'priority': JobPriorityFromJSON(json['priority']),
        'status': JobStatusFromJSON(json['status']),
        'createdAt': (new Date(json['created_at'])),
        'startedAt': json['started_at'] == null ? undefined : (new Date(json['started_at'])),
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
        'scheduledAt': json['scheduled_at'] == null ? undefined : (new Date(json['scheduled_at'])),
        'retryCount': json['retry_count'],
        'maxRetries': json['max_retries'],
        'errorMessage': json['error_message'] == null ? undefined : json['error_message'],
        'result': json['result'] == null ? undefined : FromJSON(json['result']),
        'progress': json['progress'] == null ? undefined : json['progress'],
        'progressMessage': json['progress_message'] == null ? undefined : json['progress_message'],
    };
}

export function JobResponseToJSON(json: any): JobResponse {
    return JobResponseToJSONTyped(json, false);
}

export function JobResponseToJSONTyped(value?: JobResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'function_name': value['functionName'],
        'priority': JobPriorityToJSON(value['priority']),
        'status': JobStatusToJSON(value['status']),
        'created_at': ((value['createdAt']).toISOString()),
        'started_at': value['startedAt'] === null ? null : ((value['startedAt'] as any)?.toISOString()),
        'completed_at': value['completedAt'] === null ? null : ((value['completedAt'] as any)?.toISOString()),
        'scheduled_at': value['scheduledAt'] === null ? null : ((value['scheduledAt'] as any)?.toISOString()),
        'retry_count': value['retryCount'],
        'max_retries': value['maxRetries'],
        'error_message': value['errorMessage'],
        'result': ToJSON(value['result']),
        'progress': value['progress'],
        'progress_message': value['progressMessage'],
    };
}

