/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ModelType } from './ModelType';
import {
    ModelTypeFromJSON,
    ModelTypeFromJSONTyped,
    ModelTypeToJSON,
    ModelTypeToJSONTyped,
} from './ModelType';
import type { Provider } from './Provider';
import {
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
    ProviderToJSONTyped,
} from './Provider';

/**
 * Model definition with provider information.
 * @export
 * @interface ModelDefWithProvider
 */
export interface ModelDefWithProvider {
    /**
     * Model name
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    name: string;
    /**
     * 
     * @type {ModelType}
     * @memberof ModelDefWithProvider
     */
    modelType: ModelType;
    /**
     * Human-readable name
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    description?: string | null;
    /**
     * Actual model name for API calls
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    modelName: string;
    /**
     * 
     * @type {number}
     * @memberof ModelDefWithProvider
     */
    maxTokens?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ModelDefWithProvider
     */
    contextLength?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ModelDefWithProvider
     */
    dimensions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ModelDefWithProvider
     */
    chunkSize?: number | null;
    /**
     * Whether model supports batch operations
     * @type {boolean}
     * @memberof ModelDefWithProvider
     */
    supportsBatch?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelDefWithProvider
     */
    maxBatchSize?: number | null;
    /**
     * Default configuration
     * @type {{ [key: string]: any; }}
     * @memberof ModelDefWithProvider
     */
    defaultConfig?: { [key: string]: any; };
    /**
     * Whether model is active
     * @type {boolean}
     * @memberof ModelDefWithProvider
     */
    isActive?: boolean;
    /**
     * Whether this is the default model
     * @type {boolean}
     * @memberof ModelDefWithProvider
     */
    isDefault?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ModelDefWithProvider
     */
    providerId: string;
    /**
     * 
     * @type {Date}
     * @memberof ModelDefWithProvider
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ModelDefWithProvider
     */
    updatedAt: Date;
    /**
     * 
     * @type {Provider}
     * @memberof ModelDefWithProvider
     */
    provider: Provider;
}



/**
 * Check if a given object implements the ModelDefWithProvider interface.
 */
export function instanceOfModelDefWithProvider(value: object): value is ModelDefWithProvider {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('modelType' in value) || value['modelType'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('modelName' in value) || value['modelName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('providerId' in value) || value['providerId'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    return true;
}

export function ModelDefWithProviderFromJSON(json: any): ModelDefWithProvider {
    return ModelDefWithProviderFromJSONTyped(json, false);
}

export function ModelDefWithProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelDefWithProvider {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'modelType': ModelTypeFromJSON(json['model_type']),
        'displayName': json['display_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'modelName': json['model_name'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'contextLength': json['context_length'] == null ? undefined : json['context_length'],
        'dimensions': json['dimensions'] == null ? undefined : json['dimensions'],
        'chunkSize': json['chunk_size'] == null ? undefined : json['chunk_size'],
        'supportsBatch': json['supports_batch'] == null ? undefined : json['supports_batch'],
        'maxBatchSize': json['max_batch_size'] == null ? undefined : json['max_batch_size'],
        'defaultConfig': json['default_config'] == null ? undefined : json['default_config'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'isDefault': json['is_default'] == null ? undefined : json['is_default'],
        'id': json['id'],
        'providerId': json['provider_id'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'provider': ProviderFromJSON(json['provider']),
    };
}

export function ModelDefWithProviderToJSON(json: any): ModelDefWithProvider {
    return ModelDefWithProviderToJSONTyped(json, false);
}

export function ModelDefWithProviderToJSONTyped(value?: ModelDefWithProvider | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'model_type': ModelTypeToJSON(value['modelType']),
        'display_name': value['displayName'],
        'description': value['description'],
        'model_name': value['modelName'],
        'max_tokens': value['maxTokens'],
        'context_length': value['contextLength'],
        'dimensions': value['dimensions'],
        'chunk_size': value['chunkSize'],
        'supports_batch': value['supportsBatch'],
        'max_batch_size': value['maxBatchSize'],
        'default_config': value['defaultConfig'],
        'is_active': value['isActive'],
        'is_default': value['isDefault'],
        'id': value['id'],
        'provider_id': value['providerId'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'provider': ProviderToJSON(value['provider']),
    };
}

