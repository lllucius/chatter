/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NodePropertyDefinition } from './NodePropertyDefinition';
import {
    NodePropertyDefinitionFromJSON,
    NodePropertyDefinitionFromJSONTyped,
    NodePropertyDefinitionToJSON,
    NodePropertyDefinitionToJSONTyped,
} from './NodePropertyDefinition';

/**
 * Schema for node type information.
 * @export
 * @interface NodeTypeResponse
 */
export interface NodeTypeResponse {
    /**
     * Node type identifier
     * @type {string}
     * @memberof NodeTypeResponse
     */
    type: string;
    /**
     * Human-readable name
     * @type {string}
     * @memberof NodeTypeResponse
     */
    name: string;
    /**
     * Node description
     * @type {string}
     * @memberof NodeTypeResponse
     */
    description: string;
    /**
     * Node category
     * @type {string}
     * @memberof NodeTypeResponse
     */
    category: string;
    /**
     * Node properties
     * @type {Array<NodePropertyDefinition>}
     * @memberof NodeTypeResponse
     */
    properties: Array<NodePropertyDefinition>;
    /**
     * 
     * @type {string}
     * @memberof NodeTypeResponse
     */
    icon?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NodeTypeResponse
     */
    color?: string | null;
}

/**
 * Check if a given object implements the NodeTypeResponse interface.
 */
export function instanceOfNodeTypeResponse(value: object): value is NodeTypeResponse {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    return true;
}

export function NodeTypeResponseFromJSON(json: any): NodeTypeResponse {
    return NodeTypeResponseFromJSONTyped(json, false);
}

export function NodeTypeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeTypeResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'],
        'name': json['name'],
        'description': json['description'],
        'category': json['category'],
        'properties': ((json['properties'] as Array<any>).map(NodePropertyDefinitionFromJSON)),
        'icon': json['icon'] == null ? undefined : json['icon'],
        'color': json['color'] == null ? undefined : json['color'],
    };
}

export function NodeTypeResponseToJSON(json: any): NodeTypeResponse {
    return NodeTypeResponseToJSONTyped(json, false);
}

export function NodeTypeResponseToJSONTyped(value?: NodeTypeResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'name': value['name'],
        'description': value['description'],
        'category': value['category'],
        'properties': ((value['properties'] as Array<any>).map(NodePropertyDefinitionToJSON)),
        'icon': value['icon'],
        'color': value['color'],
    };
}

