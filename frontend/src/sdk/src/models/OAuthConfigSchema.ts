/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * OAuth configuration for remote servers.
 * @export
 * @interface OAuthConfigSchema
 */
export interface OAuthConfigSchema {
    /**
     * OAuth client ID
     * @type {string}
     * @memberof OAuthConfigSchema
     */
    clientId: string;
    /**
     * OAuth client secret
     * @type {string}
     * @memberof OAuthConfigSchema
     */
    clientSecret: string;
    /**
     * OAuth token endpoint URL
     * @type {string}
     * @memberof OAuthConfigSchema
     */
    tokenUrl: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthConfigSchema
     */
    scope?: string | null;
}

/**
 * Check if a given object implements the OAuthConfigSchema interface.
 */
export function instanceOfOAuthConfigSchema(value: object): value is OAuthConfigSchema {
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('clientSecret' in value) || value['clientSecret'] === undefined) return false;
    if (!('tokenUrl' in value) || value['tokenUrl'] === undefined) return false;
    return true;
}

export function OAuthConfigSchemaFromJSON(json: any): OAuthConfigSchema {
    return OAuthConfigSchemaFromJSONTyped(json, false);
}

export function OAuthConfigSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthConfigSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'clientId': json['client_id'],
        'clientSecret': json['client_secret'],
        'tokenUrl': json['token_url'],
        'scope': json['scope'] == null ? undefined : json['scope'],
    };
}

export function OAuthConfigSchemaToJSON(json: any): OAuthConfigSchema {
    return OAuthConfigSchemaToJSONTyped(json, false);
}

export function OAuthConfigSchemaToJSONTyped(value?: OAuthConfigSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'client_id': value['clientId'],
        'client_secret': value['clientSecret'],
        'token_url': value['tokenUrl'],
        'scope': value['scope'],
    };
}

