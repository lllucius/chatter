/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PluginStatus } from './PluginStatus';
import {
    PluginStatusFromJSON,
    PluginStatusFromJSONTyped,
    PluginStatusToJSON,
    PluginStatusToJSONTyped,
} from './PluginStatus';
import type { PluginType } from './PluginType';
import {
    PluginTypeFromJSON,
    PluginTypeFromJSONTyped,
    PluginTypeToJSON,
    PluginTypeToJSONTyped,
} from './PluginType';

/**
 * Response schema for plugin data.
 * @export
 * @interface PluginResponse
 */
export interface PluginResponse {
    /**
     * Plugin ID
     * @type {string}
     * @memberof PluginResponse
     */
    id: string;
    /**
     * Plugin name
     * @type {string}
     * @memberof PluginResponse
     */
    name: string;
    /**
     * Plugin version
     * @type {string}
     * @memberof PluginResponse
     */
    version: string;
    /**
     * Plugin description
     * @type {string}
     * @memberof PluginResponse
     */
    description: string;
    /**
     * Plugin author
     * @type {string}
     * @memberof PluginResponse
     */
    author: string;
    /**
     * 
     * @type {PluginType}
     * @memberof PluginResponse
     */
    pluginType: PluginType;
    /**
     * 
     * @type {PluginStatus}
     * @memberof PluginResponse
     */
    status: PluginStatus;
    /**
     * Plugin entry point
     * @type {string}
     * @memberof PluginResponse
     */
    entryPoint: string;
    /**
     * Plugin capabilities
     * @type {Array<{ [key: string]: any; }>}
     * @memberof PluginResponse
     */
    capabilities: Array<{ [key: string]: any; }>;
    /**
     * Plugin dependencies
     * @type {Array<string>}
     * @memberof PluginResponse
     */
    dependencies: Array<string>;
    /**
     * Required permissions
     * @type {Array<string>}
     * @memberof PluginResponse
     */
    permissions: Array<string>;
    /**
     * Whether plugin is enabled
     * @type {boolean}
     * @memberof PluginResponse
     */
    enabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof PluginResponse
     */
    errorMessage?: string | null;
    /**
     * Installation timestamp
     * @type {Date}
     * @memberof PluginResponse
     */
    installedAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof PluginResponse
     */
    updatedAt: Date;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof PluginResponse
     */
    metadata: { [key: string]: any; };
}



/**
 * Check if a given object implements the PluginResponse interface.
 */
export function instanceOfPluginResponse(value: object): value is PluginResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('pluginType' in value) || value['pluginType'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('entryPoint' in value) || value['entryPoint'] === undefined) return false;
    if (!('capabilities' in value) || value['capabilities'] === undefined) return false;
    if (!('dependencies' in value) || value['dependencies'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('enabled' in value) || value['enabled'] === undefined) return false;
    if (!('installedAt' in value) || value['installedAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function PluginResponseFromJSON(json: any): PluginResponse {
    return PluginResponseFromJSONTyped(json, false);
}

export function PluginResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'version': json['version'],
        'description': json['description'],
        'author': json['author'],
        'pluginType': PluginTypeFromJSON(json['plugin_type']),
        'status': PluginStatusFromJSON(json['status']),
        'entryPoint': json['entry_point'],
        'capabilities': json['capabilities'],
        'dependencies': json['dependencies'],
        'permissions': json['permissions'],
        'enabled': json['enabled'],
        'errorMessage': json['error_message'] == null ? undefined : json['error_message'],
        'installedAt': (new Date(json['installed_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'metadata': json['metadata'],
    };
}

export function PluginResponseToJSON(json: any): PluginResponse {
    return PluginResponseToJSONTyped(json, false);
}

export function PluginResponseToJSONTyped(value?: PluginResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'version': value['version'],
        'description': value['description'],
        'author': value['author'],
        'plugin_type': PluginTypeToJSON(value['pluginType']),
        'status': PluginStatusToJSON(value['status']),
        'entry_point': value['entryPoint'],
        'capabilities': value['capabilities'],
        'dependencies': value['dependencies'],
        'permissions': value['permissions'],
        'enabled': value['enabled'],
        'error_message': value['errorMessage'],
        'installed_at': ((value['installedAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'metadata': value['metadata'],
    };
}

