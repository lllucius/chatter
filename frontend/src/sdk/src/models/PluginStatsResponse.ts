/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Response schema for plugin statistics.
 * @export
 * @interface PluginStatsResponse
 */
export interface PluginStatsResponse {
    /**
     * Total number of plugins
     * @type {number}
     * @memberof PluginStatsResponse
     */
    totalPlugins: number;
    /**
     * Number of active plugins
     * @type {number}
     * @memberof PluginStatsResponse
     */
    activePlugins: number;
    /**
     * Number of inactive plugins
     * @type {number}
     * @memberof PluginStatsResponse
     */
    inactivePlugins: number;
    /**
     * Plugin count by type
     * @type {{ [key: string]: number; }}
     * @memberof PluginStatsResponse
     */
    pluginTypes: { [key: string]: number; };
    /**
     * Plugin installation directory
     * @type {string}
     * @memberof PluginStatsResponse
     */
    pluginsDirectory: string;
}

/**
 * Check if a given object implements the PluginStatsResponse interface.
 */
export function instanceOfPluginStatsResponse(value: object): value is PluginStatsResponse {
    if (!('totalPlugins' in value) || value['totalPlugins'] === undefined) return false;
    if (!('activePlugins' in value) || value['activePlugins'] === undefined) return false;
    if (!('inactivePlugins' in value) || value['inactivePlugins'] === undefined) return false;
    if (!('pluginTypes' in value) || value['pluginTypes'] === undefined) return false;
    if (!('pluginsDirectory' in value) || value['pluginsDirectory'] === undefined) return false;
    return true;
}

export function PluginStatsResponseFromJSON(json: any): PluginStatsResponse {
    return PluginStatsResponseFromJSONTyped(json, false);
}

export function PluginStatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginStatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalPlugins': json['total_plugins'],
        'activePlugins': json['active_plugins'],
        'inactivePlugins': json['inactive_plugins'],
        'pluginTypes': json['plugin_types'],
        'pluginsDirectory': json['plugins_directory'],
    };
}

export function PluginStatsResponseToJSON(json: any): PluginStatsResponse {
    return PluginStatsResponseToJSONTyped(json, false);
}

export function PluginStatsResponseToJSONTyped(value?: PluginStatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_plugins': value['totalPlugins'],
        'active_plugins': value['activePlugins'],
        'inactive_plugins': value['inactivePlugins'],
        'plugin_types': value['pluginTypes'],
        'plugins_directory': value['pluginsDirectory'],
    };
}

