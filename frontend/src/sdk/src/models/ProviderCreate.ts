/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProviderType } from './ProviderType';
import {
    ProviderTypeFromJSON,
    ProviderTypeFromJSONTyped,
    ProviderTypeToJSON,
    ProviderTypeToJSONTyped,
} from './ProviderType';

/**
 * Schema for creating a provider.
 * @export
 * @interface ProviderCreate
 */
export interface ProviderCreate {
    /**
     * Unique provider name
     * @type {string}
     * @memberof ProviderCreate
     */
    name: string;
    /**
     * 
     * @type {ProviderType}
     * @memberof ProviderCreate
     */
    providerType: ProviderType;
    /**
     * Human-readable name
     * @type {string}
     * @memberof ProviderCreate
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof ProviderCreate
     */
    description?: string | null;
    /**
     * Whether API key is required
     * @type {boolean}
     * @memberof ProviderCreate
     */
    apiKeyRequired?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProviderCreate
     */
    baseUrl?: string | null;
    /**
     * Default configuration
     * @type {{ [key: string]: any; }}
     * @memberof ProviderCreate
     */
    defaultConfig?: { [key: string]: any; };
    /**
     * Whether provider is active
     * @type {boolean}
     * @memberof ProviderCreate
     */
    isActive?: boolean;
    /**
     * Whether this is the default provider
     * @type {boolean}
     * @memberof ProviderCreate
     */
    isDefault?: boolean;
}



/**
 * Check if a given object implements the ProviderCreate interface.
 */
export function instanceOfProviderCreate(value: object): value is ProviderCreate {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('providerType' in value) || value['providerType'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    return true;
}

export function ProviderCreateFromJSON(json: any): ProviderCreate {
    return ProviderCreateFromJSONTyped(json, false);
}

export function ProviderCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderCreate {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'providerType': ProviderTypeFromJSON(json['provider_type']),
        'displayName': json['display_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'apiKeyRequired': json['api_key_required'] == null ? undefined : json['api_key_required'],
        'baseUrl': json['base_url'] == null ? undefined : json['base_url'],
        'defaultConfig': json['default_config'] == null ? undefined : json['default_config'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'isDefault': json['is_default'] == null ? undefined : json['is_default'],
    };
}

export function ProviderCreateToJSON(json: any): ProviderCreate {
    return ProviderCreateToJSONTyped(json, false);
}

export function ProviderCreateToJSONTyped(value?: ProviderCreate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'provider_type': ProviderTypeToJSON(value['providerType']),
        'display_name': value['displayName'],
        'description': value['description'],
        'api_key_required': value['apiKeyRequired'],
        'base_url': value['baseUrl'],
        'default_config': value['defaultConfig'],
        'is_active': value['isActive'],
        'is_default': value['isDefault'],
    };
}

