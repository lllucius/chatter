/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Response schema for restore operation.
 * @export
 * @interface RestoreResponse
 */
export interface RestoreResponse {
    /**
     * Restore operation ID
     * @type {string}
     * @memberof RestoreResponse
     */
    restoreId: string;
    /**
     * Source backup ID
     * @type {string}
     * @memberof RestoreResponse
     */
    backupId: string;
    /**
     * Restore status
     * @type {string}
     * @memberof RestoreResponse
     */
    status: string;
    /**
     * Restore progress percentage
     * @type {number}
     * @memberof RestoreResponse
     */
    progress?: number;
    /**
     * Number of records restored
     * @type {number}
     * @memberof RestoreResponse
     */
    recordsRestored?: number;
    /**
     * Restore start timestamp
     * @type {Date}
     * @memberof RestoreResponse
     */
    startedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RestoreResponse
     */
    completedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof RestoreResponse
     */
    errorMessage?: string | null;
}

/**
 * Check if a given object implements the RestoreResponse interface.
 */
export function instanceOfRestoreResponse(value: object): value is RestoreResponse {
    if (!('restoreId' in value) || value['restoreId'] === undefined) return false;
    if (!('backupId' in value) || value['backupId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('startedAt' in value) || value['startedAt'] === undefined) return false;
    return true;
}

export function RestoreResponseFromJSON(json: any): RestoreResponse {
    return RestoreResponseFromJSONTyped(json, false);
}

export function RestoreResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RestoreResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'restoreId': json['restore_id'],
        'backupId': json['backup_id'],
        'status': json['status'],
        'progress': json['progress'] == null ? undefined : json['progress'],
        'recordsRestored': json['records_restored'] == null ? undefined : json['records_restored'],
        'startedAt': (new Date(json['started_at'])),
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
        'errorMessage': json['error_message'] == null ? undefined : json['error_message'],
    };
}

export function RestoreResponseToJSON(json: any): RestoreResponse {
    return RestoreResponseToJSONTyped(json, false);
}

export function RestoreResponseToJSONTyped(value?: RestoreResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'restore_id': value['restoreId'],
        'backup_id': value['backupId'],
        'status': value['status'],
        'progress': value['progress'],
        'records_restored': value['recordsRestored'],
        'started_at': ((value['startedAt']).toISOString()),
        'completed_at': value['completedAt'] === null ? null : ((value['completedAt'] as any)?.toISOString()),
        'error_message': value['errorMessage'],
    };
}

