/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Response schema for storage statistics.
 * @export
 * @interface StorageStatsResponse
 */
export interface StorageStatsResponse {
    /**
     * Total storage used in bytes
     * @type {number}
     * @memberof StorageStatsResponse
     */
    totalSize: number;
    /**
     * Database size in bytes
     * @type {number}
     * @memberof StorageStatsResponse
     */
    databaseSize: number;
    /**
     * Uploaded files size in bytes
     * @type {number}
     * @memberof StorageStatsResponse
     */
    filesSize: number;
    /**
     * Backups size in bytes
     * @type {number}
     * @memberof StorageStatsResponse
     */
    backupsSize: number;
    /**
     * Exports size in bytes
     * @type {number}
     * @memberof StorageStatsResponse
     */
    exportsSize: number;
    /**
     * Total number of records
     * @type {number}
     * @memberof StorageStatsResponse
     */
    totalRecords: number;
    /**
     * Total number of files
     * @type {number}
     * @memberof StorageStatsResponse
     */
    totalFiles: number;
    /**
     * Total number of backups
     * @type {number}
     * @memberof StorageStatsResponse
     */
    totalBackups: number;
    /**
     * Storage usage by data type
     * @type {{ [key: string]: number; }}
     * @memberof StorageStatsResponse
     */
    storageByType: { [key: string]: number; };
    /**
     * Storage usage by user
     * @type {{ [key: string]: number; }}
     * @memberof StorageStatsResponse
     */
    storageByUser: { [key: string]: number; };
    /**
     * Storage growth rate in MB per day
     * @type {number}
     * @memberof StorageStatsResponse
     */
    growthRateMbPerDay: number;
    /**
     * Projected size in 30 days
     * @type {number}
     * @memberof StorageStatsResponse
     */
    projectedSize30Days: number;
    /**
     * Statistics last updated timestamp
     * @type {Date}
     * @memberof StorageStatsResponse
     */
    lastUpdated: Date;
}

/**
 * Check if a given object implements the StorageStatsResponse interface.
 */
export function instanceOfStorageStatsResponse(value: object): value is StorageStatsResponse {
    if (!('totalSize' in value) || value['totalSize'] === undefined) return false;
    if (!('databaseSize' in value) || value['databaseSize'] === undefined) return false;
    if (!('filesSize' in value) || value['filesSize'] === undefined) return false;
    if (!('backupsSize' in value) || value['backupsSize'] === undefined) return false;
    if (!('exportsSize' in value) || value['exportsSize'] === undefined) return false;
    if (!('totalRecords' in value) || value['totalRecords'] === undefined) return false;
    if (!('totalFiles' in value) || value['totalFiles'] === undefined) return false;
    if (!('totalBackups' in value) || value['totalBackups'] === undefined) return false;
    if (!('storageByType' in value) || value['storageByType'] === undefined) return false;
    if (!('storageByUser' in value) || value['storageByUser'] === undefined) return false;
    if (!('growthRateMbPerDay' in value) || value['growthRateMbPerDay'] === undefined) return false;
    if (!('projectedSize30Days' in value) || value['projectedSize30Days'] === undefined) return false;
    if (!('lastUpdated' in value) || value['lastUpdated'] === undefined) return false;
    return true;
}

export function StorageStatsResponseFromJSON(json: any): StorageStatsResponse {
    return StorageStatsResponseFromJSONTyped(json, false);
}

export function StorageStatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageStatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalSize': json['total_size'],
        'databaseSize': json['database_size'],
        'filesSize': json['files_size'],
        'backupsSize': json['backups_size'],
        'exportsSize': json['exports_size'],
        'totalRecords': json['total_records'],
        'totalFiles': json['total_files'],
        'totalBackups': json['total_backups'],
        'storageByType': json['storage_by_type'],
        'storageByUser': json['storage_by_user'],
        'growthRateMbPerDay': json['growth_rate_mb_per_day'],
        'projectedSize30Days': json['projected_size_30_days'],
        'lastUpdated': (new Date(json['last_updated'])),
    };
}

export function StorageStatsResponseToJSON(json: any): StorageStatsResponse {
    return StorageStatsResponseToJSONTyped(json, false);
}

export function StorageStatsResponseToJSONTyped(value?: StorageStatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_size': value['totalSize'],
        'database_size': value['databaseSize'],
        'files_size': value['filesSize'],
        'backups_size': value['backupsSize'],
        'exports_size': value['exportsSize'],
        'total_records': value['totalRecords'],
        'total_files': value['totalFiles'],
        'total_backups': value['totalBackups'],
        'storage_by_type': value['storageByType'],
        'storage_by_user': value['storageByUser'],
        'growth_rate_mb_per_day': value['growthRateMbPerDay'],
        'projected_size_30_days': value['projectedSize30Days'],
        'last_updated': ((value['lastUpdated']).toISOString()),
    };
}

