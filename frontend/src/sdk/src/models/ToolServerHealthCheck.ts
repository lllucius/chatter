/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServerStatus } from './ServerStatus';
import {
    ServerStatusFromJSON,
    ServerStatusFromJSONTyped,
    ServerStatusToJSON,
    ServerStatusToJSONTyped,
} from './ServerStatus';

/**
 * Schema for tool server health check.
 * @export
 * @interface ToolServerHealthCheck
 */
export interface ToolServerHealthCheck {
    /**
     * Server ID
     * @type {string}
     * @memberof ToolServerHealthCheck
     */
    serverId: string;
    /**
     * Server name
     * @type {string}
     * @memberof ToolServerHealthCheck
     */
    serverName: string;
    /**
     * 
     * @type {ServerStatus}
     * @memberof ToolServerHealthCheck
     */
    status: ServerStatus;
    /**
     * Whether server is running
     * @type {boolean}
     * @memberof ToolServerHealthCheck
     */
    isRunning: boolean;
    /**
     * Whether server is responsive
     * @type {boolean}
     * @memberof ToolServerHealthCheck
     */
    isResponsive: boolean;
    /**
     * Number of available tools
     * @type {number}
     * @memberof ToolServerHealthCheck
     */
    toolsCount: number;
    /**
     * Last health check time
     * @type {Date}
     * @memberof ToolServerHealthCheck
     */
    lastCheck: Date;
    /**
     * 
     * @type {string}
     * @memberof ToolServerHealthCheck
     */
    errorMessage?: string | null;
}



/**
 * Check if a given object implements the ToolServerHealthCheck interface.
 */
export function instanceOfToolServerHealthCheck(value: object): value is ToolServerHealthCheck {
    if (!('serverId' in value) || value['serverId'] === undefined) return false;
    if (!('serverName' in value) || value['serverName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('isRunning' in value) || value['isRunning'] === undefined) return false;
    if (!('isResponsive' in value) || value['isResponsive'] === undefined) return false;
    if (!('toolsCount' in value) || value['toolsCount'] === undefined) return false;
    if (!('lastCheck' in value) || value['lastCheck'] === undefined) return false;
    return true;
}

export function ToolServerHealthCheckFromJSON(json: any): ToolServerHealthCheck {
    return ToolServerHealthCheckFromJSONTyped(json, false);
}

export function ToolServerHealthCheckFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolServerHealthCheck {
    if (json == null) {
        return json;
    }
    return {
        
        'serverId': json['server_id'],
        'serverName': json['server_name'],
        'status': ServerStatusFromJSON(json['status']),
        'isRunning': json['is_running'],
        'isResponsive': json['is_responsive'],
        'toolsCount': json['tools_count'],
        'lastCheck': (new Date(json['last_check'])),
        'errorMessage': json['error_message'] == null ? undefined : json['error_message'],
    };
}

export function ToolServerHealthCheckToJSON(json: any): ToolServerHealthCheck {
    return ToolServerHealthCheckToJSONTyped(json, false);
}

export function ToolServerHealthCheckToJSONTyped(value?: ToolServerHealthCheck | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'server_id': value['serverId'],
        'server_name': value['serverName'],
        'status': ServerStatusToJSON(value['status']),
        'is_running': value['isRunning'],
        'is_responsive': value['isResponsive'],
        'tools_count': value['toolsCount'],
        'last_check': ((value['lastCheck']).toISOString()),
        'error_message': value['errorMessage'],
    };
}

