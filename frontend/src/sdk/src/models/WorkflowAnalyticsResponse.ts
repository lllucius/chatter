/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptimizationSuggestion } from './OptimizationSuggestion';
import {
    OptimizationSuggestionFromJSON,
    OptimizationSuggestionFromJSONTyped,
    OptimizationSuggestionToJSON,
    OptimizationSuggestionToJSONTyped,
} from './OptimizationSuggestion';
import type { BottleneckInfo } from './BottleneckInfo';
import {
    BottleneckInfoFromJSON,
    BottleneckInfoFromJSONTyped,
    BottleneckInfoToJSON,
    BottleneckInfoToJSONTyped,
} from './BottleneckInfo';
import type { ComplexityMetrics } from './ComplexityMetrics';
import {
    ComplexityMetricsFromJSON,
    ComplexityMetricsFromJSONTyped,
    ComplexityMetricsToJSON,
    ComplexityMetricsToJSONTyped,
} from './ComplexityMetrics';

/**
 * Schema for workflow analytics response.
 * @export
 * @interface WorkflowAnalyticsResponse
 */
export interface WorkflowAnalyticsResponse {
    /**
     * 
     * @type {ComplexityMetrics}
     * @memberof WorkflowAnalyticsResponse
     */
    complexity: ComplexityMetrics;
    /**
     * Identified bottlenecks
     * @type {Array<BottleneckInfo>}
     * @memberof WorkflowAnalyticsResponse
     */
    bottlenecks: Array<BottleneckInfo>;
    /**
     * Optimization suggestions
     * @type {Array<OptimizationSuggestion>}
     * @memberof WorkflowAnalyticsResponse
     */
    optimizationSuggestions: Array<OptimizationSuggestion>;
    /**
     * Number of possible execution paths
     * @type {number}
     * @memberof WorkflowAnalyticsResponse
     */
    executionPaths: number;
    /**
     * 
     * @type {number}
     * @memberof WorkflowAnalyticsResponse
     */
    estimatedExecutionTimeMs?: number | null;
    /**
     * Identified risk factors
     * @type {Array<string>}
     * @memberof WorkflowAnalyticsResponse
     */
    riskFactors: Array<string>;
    /**
     * Total execution time
     * @type {number}
     * @memberof WorkflowAnalyticsResponse
     */
    totalExecutionTimeMs: number;
    /**
     * 
     * @type {string}
     * @memberof WorkflowAnalyticsResponse
     */
    error?: string | null;
    /**
     * Execution start time
     * @type {Date}
     * @memberof WorkflowAnalyticsResponse
     */
    startedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof WorkflowAnalyticsResponse
     */
    completedAt?: Date | null;
}

/**
 * Check if a given object implements the WorkflowAnalyticsResponse interface.
 */
export function instanceOfWorkflowAnalyticsResponse(value: object): value is WorkflowAnalyticsResponse {
    if (!('complexity' in value) || value['complexity'] === undefined) return false;
    if (!('bottlenecks' in value) || value['bottlenecks'] === undefined) return false;
    if (!('optimizationSuggestions' in value) || value['optimizationSuggestions'] === undefined) return false;
    if (!('executionPaths' in value) || value['executionPaths'] === undefined) return false;
    if (!('riskFactors' in value) || value['riskFactors'] === undefined) return false;
    if (!('totalExecutionTimeMs' in value) || value['totalExecutionTimeMs'] === undefined) return false;
    if (!('startedAt' in value) || value['startedAt'] === undefined) return false;
    return true;
}

export function WorkflowAnalyticsResponseFromJSON(json: any): WorkflowAnalyticsResponse {
    return WorkflowAnalyticsResponseFromJSONTyped(json, false);
}

export function WorkflowAnalyticsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowAnalyticsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'complexity': ComplexityMetricsFromJSON(json['complexity']),
        'bottlenecks': ((json['bottlenecks'] as Array<any>).map(BottleneckInfoFromJSON)),
        'optimizationSuggestions': ((json['optimization_suggestions'] as Array<any>).map(OptimizationSuggestionFromJSON)),
        'executionPaths': json['execution_paths'],
        'estimatedExecutionTimeMs': json['estimated_execution_time_ms'] == null ? undefined : json['estimated_execution_time_ms'],
        'riskFactors': json['risk_factors'],
        'totalExecutionTimeMs': json['total_execution_time_ms'],
        'error': json['error'] == null ? undefined : json['error'],
        'startedAt': (new Date(json['started_at'])),
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
    };
}

export function WorkflowAnalyticsResponseToJSON(json: any): WorkflowAnalyticsResponse {
    return WorkflowAnalyticsResponseToJSONTyped(json, false);
}

export function WorkflowAnalyticsResponseToJSONTyped(value?: WorkflowAnalyticsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'complexity': ComplexityMetricsToJSON(value['complexity']),
        'bottlenecks': ((value['bottlenecks'] as Array<any>).map(BottleneckInfoToJSON)),
        'optimization_suggestions': ((value['optimizationSuggestions'] as Array<any>).map(OptimizationSuggestionToJSON)),
        'execution_paths': value['executionPaths'],
        'estimated_execution_time_ms': value['estimatedExecutionTimeMs'],
        'risk_factors': value['riskFactors'],
        'total_execution_time_ms': value['totalExecutionTimeMs'],
        'error': value['error'],
        'started_at': ((value['startedAt']).toISOString()),
        'completed_at': value['completedAt'] === null ? null : ((value['completedAt'] as any)?.toISOString()),
    };
}

