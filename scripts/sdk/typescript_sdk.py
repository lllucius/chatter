"""TypeScript SDK generator using swagger-typescript-api."""

import json
import subprocess
from pathlib import Path

from scripts.utils.config import TypeScriptSDKConfig
from scripts.utils.files import ensure_directory, clean_temp_files


class TypeScriptSDKGenerator:
    """Generates TypeScript SDK from OpenAPI specification using swagger-typescript-api."""

    def __init__(self, config: TypeScriptSDKConfig) -> None:
        """Initialize TypeScript SDK generator.

        Args:
            config: Configuration for TypeScript SDK generation
        """
        self.config = config
        self.temp_files: list[Path] = []

    def generate_with_cleanup(self) -> bool:
        """Generate TypeScript SDK with cleanup of temporary files.

        Returns:
            True if generation was successful, False otherwise
        """
        try:
            return self._generate()
        finally:
            clean_temp_files(self.temp_files)

    def _generate(self) -> bool:
        """Generate TypeScript SDK using swagger-typescript-api.

        Returns:
            True if generation was successful, False otherwise
        """
        try:
            # Ensure output directory exists
            ensure_directory(self.config.output_dir, clean=True)

            # Get OpenAPI spec path (prefer JSON format)
            openapi_spec = self._find_openapi_spec()
            if not openapi_spec:
                print("‚ùå OpenAPI specification file not found")
                return False

            # Build swagger-typescript-api command
            cmd = [
                "npx", "swagger-typescript-api", "generate",
                "-p", str(openapi_spec),
                "-o", str(self.config.output_dir),
                "--http-client", "fetch",
                "--modular",
                "--clean-output",
                "--type-suffix", "",
                "--extract-request-params",
                "--extract-request-body",
                "--extract-response-body",
                "--unwrap-response-data"
            ]

            print(f"üì¶ Generating TypeScript SDK in {self.config.output_dir}")
            print(f"   Using spec: {openapi_spec}")
            print(f"   Using swagger-typescript-api generator")

            # Run the generator
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=self.config.project_root
            )

            if result.returncode != 0:
                print("‚ùå swagger-typescript-api generation failed:")
                print(f"   STDOUT: {result.stdout}")
                print(f"   STDERR: {result.stderr}")
                return False

            print("‚úÖ TypeScript SDK generation completed")
            return True

        except Exception as e:
            print(f"‚ùå TypeScript SDK generation failed: {e}")
            return False

    def validate(self) -> bool:
        """Validate that the generated TypeScript SDK is complete and functional.

        Returns:
            True if SDK validation passes, False otherwise
        """
        try:
            # Check if output directory exists
            if not self.config.output_dir.exists():
                print("‚ùå SDK output directory does not exist")
                return False

            # Check for essential TypeScript SDK files generated by swagger-typescript-api
            essential_files = [
                "Api.ts",
                "data-contracts.ts",
                "http-client.ts"
            ]

            missing_files = []
            for file_path in essential_files:
                full_path = self.config.output_dir / file_path
                if not full_path.exists():
                    missing_files.append(file_path)

            if missing_files:
                print(f"‚ùå Missing essential SDK files: {missing_files}")
                return False

            # Check that Api.ts contains expected method patterns
            api_file = self.config.output_dir / "Api.ts"
            if api_file.exists():
                try:
                    with open(api_file, 'r') as f:
                        api_content = f.read()
                    
                    # Check for some expected API methods (should not have random suffixes)
                    expected_patterns = [
                        "ApiV1",  # Should contain API version patterns
                        "request<",  # Should contain request method calls
                        "ContentType"  # Should import ContentType
                    ]
                    
                    for pattern in expected_patterns:
                        if pattern not in api_content:
                            print(f"‚ùå API file missing expected pattern: {pattern}")
                            return False
                    
                    # Check that methods don't have problematic random suffixes like _8, _4
                    import re
                    problematic_patterns = re.findall(r'\w+_\d+\s*:', api_content)
                    if problematic_patterns:
                        print(f"‚ùå Found problematic method names with random suffixes: {problematic_patterns[:5]}")
                        return False
                        
                except Exception as e:
                    print(f"‚ùå Error reading API file: {e}")
                    return False

            # Check data-contracts.ts for type definitions
            contracts_file = self.config.output_dir / "data-contracts.ts"
            if contracts_file.exists():
                try:
                    with open(contracts_file, 'r') as f:
                        contracts_content = f.read()
                    
                    # Should contain TypeScript interface/type definitions
                    if "export interface" not in contracts_content and "export type" not in contracts_content:
                        print("‚ùå data-contracts.ts missing type definitions")
                        return False
                        
                except Exception as e:
                    print(f"‚ùå Error reading data-contracts file: {e}")
                    return False

            print("‚úÖ TypeScript SDK validation passed")
            return True

        except Exception as e:
            print(f"‚ùå TypeScript SDK validation failed: {e}")
            return False

    def _find_openapi_spec(self) -> Path | None:
        """Find OpenAPI specification file.

        Returns:
            Path to OpenAPI spec file, or None if not found
        """
        # Look for spec files in standard locations (prefer 3.0 compatible version)
        possible_locations = [
            self.config.project_root / "docs" / "api" / "openapi-3.0.json",
            self.config.project_root / "docs" / "api" / "openapi.json",
            self.config.project_root / "docs" / "api" / "openapi-3.0.yaml",
            self.config.project_root / "docs" / "api" / "openapi.yaml",
            self.config.project_root / "openapi-3.0.json",
            self.config.project_root / "openapi.json",
            self.config.project_root / "openapi-3.0.yaml",
            self.config.project_root / "openapi.yaml"
        ]

        for spec_path in possible_locations:
            if spec_path.exists():
                return spec_path

        return None
