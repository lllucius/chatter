/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ABTestActionResponse,
  ABTestCreateRequest,
  ABTestDeleteResponse,
  ABTestListResponse,
  ABTestMetricsResponse,
  ABTestResponse,
  ABTestResultsResponse,
  ABTestUpdateRequest,
  HTTPValidationError,
  TestStatus,
  TestType,
} from '../models/index';
import {
    ABTestActionResponseFromJSON,
    ABTestActionResponseToJSON,
    ABTestCreateRequestFromJSON,
    ABTestCreateRequestToJSON,
    ABTestDeleteResponseFromJSON,
    ABTestDeleteResponseToJSON,
    ABTestListResponseFromJSON,
    ABTestListResponseToJSON,
    ABTestMetricsResponseFromJSON,
    ABTestMetricsResponseToJSON,
    ABTestResponseFromJSON,
    ABTestResponseToJSON,
    ABTestResultsResponseFromJSON,
    ABTestResultsResponseToJSON,
    ABTestUpdateRequestFromJSON,
    ABTestUpdateRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TestStatusFromJSON,
    TestStatusToJSON,
    TestTypeFromJSON,
    TestTypeToJSON,
} from '../models/index';

export interface CompleteAbTestApiV1AbTestsTestIdCompletePostRequest {
    testId: string;
}

export interface CreateAbTestApiV1AbTestsPostRequest {
    aBTestCreateRequest: ABTestCreateRequest;
}

export interface DeleteAbTestApiV1AbTestsTestIdDeleteRequest {
    testId: string;
}

export interface EndAbTestApiV1AbTestsTestIdEndPostRequest {
    testId: string;
    winnerVariant: string;
}

export interface GetAbTestApiV1AbTestsTestIdGetRequest {
    testId: string;
}

export interface GetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest {
    testId: string;
}

export interface GetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest {
    testId: string;
}

export interface GetAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRequest {
    testId: string;
}

export interface GetAbTestResultsApiV1AbTestsTestIdResultsGetRequest {
    testId: string;
}

export interface ListAbTestsApiV1AbTestsGetRequest {
    status?: TestStatus | null;
    testType?: TestType | null;
    requestBody?: Array<string> | null;
}

export interface PauseAbTestApiV1AbTestsTestIdPausePostRequest {
    testId: string;
}

export interface StartAbTestApiV1AbTestsTestIdStartPostRequest {
    testId: string;
}

export interface UpdateAbTestApiV1AbTestsTestIdPutRequest {
    testId: string;
    aBTestUpdateRequest: ABTestUpdateRequest;
}

/**
 * ABTestingApi - interface
 * 
 * @export
 * @interface ABTestingApiInterface
 */
export interface ABTestingApiInterface {
    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Complete Ab Test
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    completeAbTestApiV1AbTestsTestIdCompletePostRaw(requestParameters: CompleteAbTestApiV1AbTestsTestIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>>;

    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Complete Ab Test
     */
    completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters: CompleteAbTestApiV1AbTestsTestIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse>;

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * @summary Create Ab Test
     * @param {ABTestCreateRequest} aBTestCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    createAbTestApiV1AbTestsPostRaw(requestParameters: CreateAbTestApiV1AbTestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>>;

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * Create Ab Test
     */
    createAbTestApiV1AbTestsPost(requestParameters: CreateAbTestApiV1AbTestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse>;

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * @summary Delete Ab Test
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    deleteAbTestApiV1AbTestsTestIdDeleteRaw(requestParameters: DeleteAbTestApiV1AbTestsTestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestDeleteResponse>>;

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * Delete Ab Test
     */
    deleteAbTestApiV1AbTestsTestIdDelete(requestParameters: DeleteAbTestApiV1AbTestsTestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestDeleteResponse>;

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * @summary End Ab Test
     * @param {string} testId 
     * @param {string} winnerVariant 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    endAbTestApiV1AbTestsTestIdEndPostRaw(requestParameters: EndAbTestApiV1AbTestsTestIdEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>>;

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * End Ab Test
     */
    endAbTestApiV1AbTestsTestIdEndPost(requestParameters: EndAbTestApiV1AbTestsTestIdEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse>;

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * @summary Get Ab Test
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestApiV1AbTestsTestIdGetRaw(requestParameters: GetAbTestApiV1AbTestsTestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>>;

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * Get Ab Test
     */
    getAbTestApiV1AbTestsTestIdGet(requestParameters: GetAbTestApiV1AbTestsTestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse>;

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * @summary Get Ab Test Metrics
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestMetricsApiV1AbTestsTestIdMetricsGetRaw(requestParameters: GetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestMetricsResponse>>;

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * Get Ab Test Metrics
     */
    getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters: GetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestMetricsResponse>;

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * @summary Get Ab Test Performance
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRaw(requestParameters: GetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * Get Ab Test Performance
     */
    getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters: GetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Get comprehensive recommendations for an A/B test.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Recommendations and insights for the test
     * @summary Get Ab Test Recommendations
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRaw(requestParameters: GetAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get comprehensive recommendations for an A/B test.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Recommendations and insights for the test
     * Get Ab Test Recommendations
     */
    getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGet(requestParameters: GetAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * @summary Get Ab Test Results
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    getAbTestResultsApiV1AbTestsTestIdResultsGetRaw(requestParameters: GetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResultsResponse>>;

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * Get Ab Test Results
     */
    getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters: GetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResultsResponse>;

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * @summary List Ab Tests
     * @param {TestStatus} [status] 
     * @param {TestType} [testType] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    listAbTestsApiV1AbTestsGetRaw(requestParameters: ListAbTestsApiV1AbTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestListResponse>>;

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * List Ab Tests
     */
    listAbTestsApiV1AbTestsGet(requestParameters: ListAbTestsApiV1AbTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestListResponse>;

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Pause Ab Test
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    pauseAbTestApiV1AbTestsTestIdPausePostRaw(requestParameters: PauseAbTestApiV1AbTestsTestIdPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>>;

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Pause Ab Test
     */
    pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters: PauseAbTestApiV1AbTestsTestIdPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse>;

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * @summary Start Ab Test
     * @param {string} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    startAbTestApiV1AbTestsTestIdStartPostRaw(requestParameters: StartAbTestApiV1AbTestsTestIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>>;

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Start Ab Test
     */
    startAbTestApiV1AbTestsTestIdStartPost(requestParameters: StartAbTestApiV1AbTestsTestIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse>;

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * @summary Update Ab Test
     * @param {string} testId 
     * @param {ABTestUpdateRequest} aBTestUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ABTestingApiInterface
     */
    updateAbTestApiV1AbTestsTestIdPutRaw(requestParameters: UpdateAbTestApiV1AbTestsTestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>>;

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * Update Ab Test
     */
    updateAbTestApiV1AbTestsTestIdPut(requestParameters: UpdateAbTestApiV1AbTestsTestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse>;

}

/**
 * 
 */
export class ABTestingApi extends runtime.BaseAPI implements ABTestingApiInterface {

    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Complete Ab Test
     */
    async completeAbTestApiV1AbTestsTestIdCompletePostRaw(requestParameters: CompleteAbTestApiV1AbTestsTestIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling completeAbTestApiV1AbTestsTestIdCompletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/complete`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestActionResponseFromJSON(jsonValue));
    }

    /**
     * Complete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Complete Ab Test
     */
    async completeAbTestApiV1AbTestsTestIdCompletePost(requestParameters: CompleteAbTestApiV1AbTestsTestIdCompletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse> {
        const response = await this.completeAbTestApiV1AbTestsTestIdCompletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * Create Ab Test
     */
    async createAbTestApiV1AbTestsPostRaw(requestParameters: CreateAbTestApiV1AbTestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>> {
        if (requestParameters['aBTestCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'aBTestCreateRequest',
                'Required parameter "aBTestCreateRequest" was null or undefined when calling createAbTestApiV1AbTestsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ABTestCreateRequestToJSON(requestParameters['aBTestCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestResponseFromJSON(jsonValue));
    }

    /**
     * Create a new A/B test.  Args:     test_data: A/B test creation data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Created test data
     * Create Ab Test
     */
    async createAbTestApiV1AbTestsPost(requestParameters: CreateAbTestApiV1AbTestsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse> {
        const response = await this.createAbTestApiV1AbTestsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * Delete Ab Test
     */
    async deleteAbTestApiV1AbTestsTestIdDeleteRaw(requestParameters: DeleteAbTestApiV1AbTestsTestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestDeleteResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling deleteAbTestApiV1AbTestsTestIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Deletion result
     * Delete Ab Test
     */
    async deleteAbTestApiV1AbTestsTestIdDelete(requestParameters: DeleteAbTestApiV1AbTestsTestIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestDeleteResponse> {
        const response = await this.deleteAbTestApiV1AbTestsTestIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * End Ab Test
     */
    async endAbTestApiV1AbTestsTestIdEndPostRaw(requestParameters: EndAbTestApiV1AbTestsTestIdEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling endAbTestApiV1AbTestsTestIdEndPost().'
            );
        }

        if (requestParameters['winnerVariant'] == null) {
            throw new runtime.RequiredError(
                'winnerVariant',
                'Required parameter "winnerVariant" was null or undefined when calling endAbTestApiV1AbTestsTestIdEndPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['winnerVariant'] != null) {
            queryParameters['winner_variant'] = requestParameters['winnerVariant'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/end`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestActionResponseFromJSON(jsonValue));
    }

    /**
     * End A/B test and declare winner.  Args:     test_id: A/B test ID     winner_variant: Winning variant identifier     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action response
     * End Ab Test
     */
    async endAbTestApiV1AbTestsTestIdEndPost(requestParameters: EndAbTestApiV1AbTestsTestIdEndPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse> {
        const response = await this.endAbTestApiV1AbTestsTestIdEndPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * Get Ab Test
     */
    async getAbTestApiV1AbTestsTestIdGetRaw(requestParameters: GetAbTestApiV1AbTestsTestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling getAbTestApiV1AbTestsTestIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestResponseFromJSON(jsonValue));
    }

    /**
     * Get A/B test by ID.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     A/B test data
     * Get Ab Test
     */
    async getAbTestApiV1AbTestsTestIdGet(requestParameters: GetAbTestApiV1AbTestsTestIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse> {
        const response = await this.getAbTestApiV1AbTestsTestIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * Get Ab Test Metrics
     */
    async getAbTestMetricsApiV1AbTestsTestIdMetricsGetRaw(requestParameters: GetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestMetricsResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling getAbTestMetricsApiV1AbTestsTestIdMetricsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/metrics`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get current A/B test metrics.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Current test metrics
     * Get Ab Test Metrics
     */
    async getAbTestMetricsApiV1AbTestsTestIdMetricsGet(requestParameters: GetAbTestMetricsApiV1AbTestsTestIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestMetricsResponse> {
        const response = await this.getAbTestMetricsApiV1AbTestsTestIdMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * Get Ab Test Performance
     */
    async getAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRaw(requestParameters: GetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/performance`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get A/B test performance results by variant.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Performance results per variant
     * Get Ab Test Performance
     */
    async getAbTestPerformanceApiV1AbTestsTestIdPerformanceGet(requestParameters: GetAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getAbTestPerformanceApiV1AbTestsTestIdPerformanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive recommendations for an A/B test.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Recommendations and insights for the test
     * Get Ab Test Recommendations
     */
    async getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRaw(requestParameters: GetAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/recommendations`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get comprehensive recommendations for an A/B test.  Args:     test_id: A/B test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Recommendations and insights for the test
     * Get Ab Test Recommendations
     */
    async getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGet(requestParameters: GetAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getAbTestRecommendationsApiV1AbTestsTestIdRecommendationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * Get Ab Test Results
     */
    async getAbTestResultsApiV1AbTestsTestIdResultsGetRaw(requestParameters: GetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResultsResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling getAbTestResultsApiV1AbTestsTestIdResultsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/results`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestResultsResponseFromJSON(jsonValue));
    }

    /**
     * Get A/B test results and analysis.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Test results and analysis
     * Get Ab Test Results
     */
    async getAbTestResultsApiV1AbTestsTestIdResultsGet(requestParameters: GetAbTestResultsApiV1AbTestsTestIdResultsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResultsResponse> {
        const response = await this.getAbTestResultsApiV1AbTestsTestIdResultsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * List Ab Tests
     */
    async listAbTestsApiV1AbTestsGetRaw(requestParameters: ListAbTestsApiV1AbTestsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['testType'] != null) {
            queryParameters['test_type'] = requestParameters['testType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestListResponseFromJSON(jsonValue));
    }

    /**
     * List A/B tests with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     List of A/B tests
     * List Ab Tests
     */
    async listAbTestsApiV1AbTestsGet(requestParameters: ListAbTestsApiV1AbTestsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestListResponse> {
        const response = await this.listAbTestsApiV1AbTestsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Pause Ab Test
     */
    async pauseAbTestApiV1AbTestsTestIdPausePostRaw(requestParameters: PauseAbTestApiV1AbTestsTestIdPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling pauseAbTestApiV1AbTestsTestIdPausePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/pause`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestActionResponseFromJSON(jsonValue));
    }

    /**
     * Pause an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Pause Ab Test
     */
    async pauseAbTestApiV1AbTestsTestIdPausePost(requestParameters: PauseAbTestApiV1AbTestsTestIdPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse> {
        const response = await this.pauseAbTestApiV1AbTestsTestIdPausePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Start Ab Test
     */
    async startAbTestApiV1AbTestsTestIdStartPostRaw(requestParameters: StartAbTestApiV1AbTestsTestIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestActionResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling startAbTestApiV1AbTestsTestIdStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}/start`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestActionResponseFromJSON(jsonValue));
    }

    /**
     * Start an A/B test.  Args:     test_id: Test ID     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Action result
     * Start Ab Test
     */
    async startAbTestApiV1AbTestsTestIdStartPost(requestParameters: StartAbTestApiV1AbTestsTestIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestActionResponse> {
        const response = await this.startAbTestApiV1AbTestsTestIdStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * Update Ab Test
     */
    async updateAbTestApiV1AbTestsTestIdPutRaw(requestParameters: UpdateAbTestApiV1AbTestsTestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ABTestResponse>> {
        if (requestParameters['testId'] == null) {
            throw new runtime.RequiredError(
                'testId',
                'Required parameter "testId" was null or undefined when calling updateAbTestApiV1AbTestsTestIdPut().'
            );
        }

        if (requestParameters['aBTestUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'aBTestUpdateRequest',
                'Required parameter "aBTestUpdateRequest" was null or undefined when calling updateAbTestApiV1AbTestsTestIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/ab-tests/{test_id}`;
        urlPath = urlPath.replace(`{${"test_id"}}`, encodeURIComponent(String(requestParameters['testId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ABTestUpdateRequestToJSON(requestParameters['aBTestUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ABTestResponseFromJSON(jsonValue));
    }

    /**
     * Update an A/B test.  Args:     test_id: Test ID     test_data: Test update data     current_user: Current authenticated user     ab_test_manager: A/B test manager instance  Returns:     Updated test data
     * Update Ab Test
     */
    async updateAbTestApiV1AbTestsTestIdPut(requestParameters: UpdateAbTestApiV1AbTestsTestIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ABTestResponse> {
        const response = await this.updateAbTestApiV1AbTestsTestIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
