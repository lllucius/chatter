/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConversationStatsResponse,
  DashboardResponse,
  DocumentAnalyticsResponse,
  HTTPValidationError,
  PerformanceMetricsResponse,
  SystemAnalyticsResponse,
  UsageMetricsResponse,
} from '../models/index';
import {
    ConversationStatsResponseFromJSON,
    ConversationStatsResponseToJSON,
    DashboardResponseFromJSON,
    DashboardResponseToJSON,
    DocumentAnalyticsResponseFromJSON,
    DocumentAnalyticsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PerformanceMetricsResponseFromJSON,
    PerformanceMetricsResponseToJSON,
    SystemAnalyticsResponseFromJSON,
    SystemAnalyticsResponseToJSON,
    UsageMetricsResponseFromJSON,
    UsageMetricsResponseToJSON,
} from '../models/index';

export interface ExportAnalyticsApiV1AnalyticsExportPostRequest {
    metrics: Array<string>;
    format?: string;
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetConversationStatsApiV1AnalyticsConversationsGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetDashboardApiV1AnalyticsDashboardGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetUsageMetricsApiV1AnalyticsUsageGetRequest {
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

export interface GetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest {
    userId: string;
    startDate?: Date | null;
    endDate?: Date | null;
    period?: string;
}

/**
 * AnalyticsApi - interface
 * 
 * @export
 * @interface AnalyticsApiInterface
 */
export interface AnalyticsApiInterface {
    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * @summary Export Analytics
     * @param {Array<string>} metrics List of metrics to export
     * @param {string} [format] Export format (json, csv, xlsx)
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    exportAnalyticsApiV1AnalyticsExportPostRaw(requestParameters: ExportAnalyticsApiV1AnalyticsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * Export Analytics
     */
    exportAnalyticsApiV1AnalyticsExportPost(requestParameters: ExportAnalyticsApiV1AnalyticsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get analytics system health status.  Returns:     Health check results for analytics system
     * @summary Get Analytics Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getAnalyticsHealthApiV1AnalyticsHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get analytics system health status.  Returns:     Health check results for analytics system
     * Get Analytics Health
     */
    getAnalyticsHealthApiV1AnalyticsHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Get summary of key analytics metrics for monitoring.  Returns:     Summary of analytics metrics
     * @summary Get Analytics Metrics Summary
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getAnalyticsMetricsSummaryApiV1AnalyticsMetricsSummaryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get summary of key analytics metrics for monitoring.  Returns:     Summary of analytics metrics
     * Get Analytics Metrics Summary
     */
    getAnalyticsMetricsSummaryApiV1AnalyticsMetricsSummaryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * @summary Get Conversation Stats
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getConversationStatsApiV1AnalyticsConversationsGetRaw(requestParameters: GetConversationStatsApiV1AnalyticsConversationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationStatsResponse>>;

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * Get Conversation Stats
     */
    getConversationStatsApiV1AnalyticsConversationsGet(requestParameters: GetConversationStatsApiV1AnalyticsConversationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationStatsResponse>;

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * @summary Get Dashboard
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getDashboardApiV1AnalyticsDashboardGetRaw(requestParameters: GetDashboardApiV1AnalyticsDashboardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardResponse>>;

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * Get Dashboard
     */
    getDashboardApiV1AnalyticsDashboardGet(requestParameters: GetDashboardApiV1AnalyticsDashboardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardResponse>;

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * @summary Get Document Analytics
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getDocumentAnalyticsApiV1AnalyticsDocumentsGetRaw(requestParameters: GetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentAnalyticsResponse>>;

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * Get Document Analytics
     */
    getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters: GetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentAnalyticsResponse>;

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * @summary Get Performance Metrics
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getPerformanceMetricsApiV1AnalyticsPerformanceGetRaw(requestParameters: GetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformanceMetricsResponse>>;

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * Get Performance Metrics
     */
    getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters: GetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformanceMetricsResponse>;

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * @summary Get System Analytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getSystemAnalyticsApiV1AnalyticsSystemGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemAnalyticsResponse>>;

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * Get System Analytics
     */
    getSystemAnalyticsApiV1AnalyticsSystemGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemAnalyticsResponse>;

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * @summary Get Tool Server Analytics
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getToolServerAnalyticsApiV1AnalyticsToolserversGetRaw(requestParameters: GetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * Get Tool Server Analytics
     */
    getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters: GetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * @summary Get Usage Metrics
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getUsageMetricsApiV1AnalyticsUsageGetRaw(requestParameters: GetUsageMetricsApiV1AnalyticsUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageMetricsResponse>>;

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * Get Usage Metrics
     */
    getUsageMetricsApiV1AnalyticsUsageGet(requestParameters: GetUsageMetricsApiV1AnalyticsUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageMetricsResponse>;

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * @summary Get User Analytics
     * @param {string} userId 
     * @param {Date} [startDate] Start date for analytics
     * @param {Date} [endDate] End date for analytics
     * @param {string} [period] Predefined period (1h, 24h, 7d, 30d, 90d)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApiInterface
     */
    getUserAnalyticsApiV1AnalyticsUsersUserIdGetRaw(requestParameters: GetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * Get User Analytics
     */
    getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters: GetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

}

/**
 * 
 */
export class AnalyticsApi extends runtime.BaseAPI implements AnalyticsApiInterface {

    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * Export Analytics
     */
    async exportAnalyticsApiV1AnalyticsExportPostRaw(requestParameters: ExportAnalyticsApiV1AnalyticsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['metrics'] == null) {
            throw new runtime.RequiredError(
                'metrics',
                'Required parameter "metrics" was null or undefined when calling exportAnalyticsApiV1AnalyticsExportPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['metrics'] != null) {
            queryParameters['metrics'] = requestParameters['metrics'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/export`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export analytics reports.  Args:     format: Export format     metrics: List of metrics to export     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Exported analytics report
     * Export Analytics
     */
    async exportAnalyticsApiV1AnalyticsExportPost(requestParameters: ExportAnalyticsApiV1AnalyticsExportPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportAnalyticsApiV1AnalyticsExportPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics system health status.  Returns:     Health check results for analytics system
     * Get Analytics Health
     */
    async getAnalyticsHealthApiV1AnalyticsHealthGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get analytics system health status.  Returns:     Health check results for analytics system
     * Get Analytics Health
     */
    async getAnalyticsHealthApiV1AnalyticsHealthGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getAnalyticsHealthApiV1AnalyticsHealthGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get summary of key analytics metrics for monitoring.  Returns:     Summary of analytics metrics
     * Get Analytics Metrics Summary
     */
    async getAnalyticsMetricsSummaryApiV1AnalyticsMetricsSummaryGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/metrics/summary`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get summary of key analytics metrics for monitoring.  Returns:     Summary of analytics metrics
     * Get Analytics Metrics Summary
     */
    async getAnalyticsMetricsSummaryApiV1AnalyticsMetricsSummaryGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getAnalyticsMetricsSummaryApiV1AnalyticsMetricsSummaryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * Get Conversation Stats
     */
    async getConversationStatsApiV1AnalyticsConversationsGetRaw(requestParameters: GetConversationStatsApiV1AnalyticsConversationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConversationStatsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/conversations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConversationStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get conversation statistics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Conversation statistics
     * Get Conversation Stats
     */
    async getConversationStatsApiV1AnalyticsConversationsGet(requestParameters: GetConversationStatsApiV1AnalyticsConversationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConversationStatsResponse> {
        const response = await this.getConversationStatsApiV1AnalyticsConversationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * Get Dashboard
     */
    async getDashboardApiV1AnalyticsDashboardGetRaw(requestParameters: GetDashboardApiV1AnalyticsDashboardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DashboardResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/dashboard`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DashboardResponseFromJSON(jsonValue));
    }

    /**
     * Get comprehensive dashboard data.  Args:     request: Dashboard request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Complete dashboard data
     * Get Dashboard
     */
    async getDashboardApiV1AnalyticsDashboardGet(requestParameters: GetDashboardApiV1AnalyticsDashboardGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DashboardResponse> {
        const response = await this.getDashboardApiV1AnalyticsDashboardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * Get Document Analytics
     */
    async getDocumentAnalyticsApiV1AnalyticsDocumentsGetRaw(requestParameters: GetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentAnalyticsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentAnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Get document analytics.  Args:     request: Document analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Document analytics
     * Get Document Analytics
     */
    async getDocumentAnalyticsApiV1AnalyticsDocumentsGet(requestParameters: GetDocumentAnalyticsApiV1AnalyticsDocumentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentAnalyticsResponse> {
        const response = await this.getDocumentAnalyticsApiV1AnalyticsDocumentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * Get Performance Metrics
     */
    async getPerformanceMetricsApiV1AnalyticsPerformanceGetRaw(requestParameters: GetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PerformanceMetricsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/performance`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PerformanceMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get performance metrics.  Args:     request: Performance metrics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Performance metrics
     * Get Performance Metrics
     */
    async getPerformanceMetricsApiV1AnalyticsPerformanceGet(requestParameters: GetPerformanceMetricsApiV1AnalyticsPerformanceGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PerformanceMetricsResponse> {
        const response = await this.getPerformanceMetricsApiV1AnalyticsPerformanceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * Get System Analytics
     */
    async getSystemAnalyticsApiV1AnalyticsSystemGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemAnalyticsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/system`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemAnalyticsResponseFromJSON(jsonValue));
    }

    /**
     * Get system analytics.  Args:     request: System analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     System analytics
     * Get System Analytics
     */
    async getSystemAnalyticsApiV1AnalyticsSystemGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemAnalyticsResponse> {
        const response = await this.getSystemAnalyticsApiV1AnalyticsSystemGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * Get Tool Server Analytics
     */
    async getToolServerAnalyticsApiV1AnalyticsToolserversGetRaw(requestParameters: GetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/toolservers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get tool server analytics.  Args:     request: Tool server analytics request parameters     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Tool server analytics data
     * Get Tool Server Analytics
     */
    async getToolServerAnalyticsApiV1AnalyticsToolserversGet(requestParameters: GetToolServerAnalyticsApiV1AnalyticsToolserversGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getToolServerAnalyticsApiV1AnalyticsToolserversGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * Get Usage Metrics
     */
    async getUsageMetricsApiV1AnalyticsUsageGetRaw(requestParameters: GetUsageMetricsApiV1AnalyticsUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsageMetricsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/usage`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsageMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get usage metrics.  Args:     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     Usage metrics
     * Get Usage Metrics
     */
    async getUsageMetricsApiV1AnalyticsUsageGet(requestParameters: GetUsageMetricsApiV1AnalyticsUsageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsageMetricsResponse> {
        const response = await this.getUsageMetricsApiV1AnalyticsUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * Get User Analytics
     */
    async getUserAnalyticsApiV1AnalyticsUsersUserIdGetRaw(requestParameters: GetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserAnalyticsApiV1AnalyticsUsersUserIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['period'] != null) {
            queryParameters['period'] = requestParameters['period'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/analytics/users/{user_id}`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get per-user analytics.  Args:     user_id: User ID     start_date: Start date for analytics     end_date: End date for analytics     period: Predefined period     current_user: Current authenticated user     analytics_service: Analytics service  Returns:     User-specific analytics
     * Get User Analytics
     */
    async getUserAnalyticsApiV1AnalyticsUsersUserIdGet(requestParameters: GetUserAnalyticsApiV1AnalyticsUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getUserAnalyticsApiV1AnalyticsUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
