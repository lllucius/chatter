/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  JobActionResponse,
  JobCreateRequest,
  JobListResponse,
  JobPriority,
  JobResponse,
  JobStatsResponse,
  JobStatus,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    JobActionResponseFromJSON,
    JobActionResponseToJSON,
    JobCreateRequestFromJSON,
    JobCreateRequestToJSON,
    JobListResponseFromJSON,
    JobListResponseToJSON,
    JobPriorityFromJSON,
    JobPriorityToJSON,
    JobResponseFromJSON,
    JobResponseToJSON,
    JobStatsResponseFromJSON,
    JobStatsResponseToJSON,
    JobStatusFromJSON,
    JobStatusToJSON,
} from '../models/index';

export interface CancelJobApiV1JobsJobIdCancelPostRequest {
    jobId: string;
}

export interface CleanupJobsApiV1JobsCleanupPostRequest {
    force?: boolean;
}

export interface CreateJobApiV1JobsPostRequest {
    jobCreateRequest: JobCreateRequest;
}

export interface GetJobApiV1JobsJobIdGetRequest {
    jobId: string;
}

export interface ListJobsApiV1JobsGetRequest {
    status?: JobStatus | null;
    priority?: JobPriority | null;
    functionName?: string | null;
    createdAfter?: Date | null;
    createdBefore?: Date | null;
    search?: string | null;
    limit?: number;
    offset?: number;
    sortBy?: string;
    sortOrder?: string;
    requestBody?: Array<string> | null;
}

/**
 * JobsApi - interface
 * 
 * @export
 * @interface JobsApiInterface
 */
export interface JobsApiInterface {
    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * @summary Cancel Job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    cancelJobApiV1JobsJobIdCancelPostRaw(requestParameters: CancelJobApiV1JobsJobIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobActionResponse>>;

    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * Cancel Job
     */
    cancelJobApiV1JobsJobIdCancelPost(requestParameters: CancelJobApiV1JobsJobIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobActionResponse>;

    /**
     * Clean up old completed jobs to free up memory.  Note: This is a system-wide cleanup operation that affects all users. Only completed, failed, or cancelled jobs older than 24 hours are removed.  Args:     force: If True, remove all completed/failed jobs regardless of age     current_user: Current authenticated user  Returns:     Cleanup statistics
     * @summary Cleanup Jobs
     * @param {boolean} [force] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    cleanupJobsApiV1JobsCleanupPostRaw(requestParameters: CleanupJobsApiV1JobsCleanupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Clean up old completed jobs to free up memory.  Note: This is a system-wide cleanup operation that affects all users. Only completed, failed, or cancelled jobs older than 24 hours are removed.  Args:     force: If True, remove all completed/failed jobs regardless of age     current_user: Current authenticated user  Returns:     Cleanup statistics
     * Cleanup Jobs
     */
    cleanupJobsApiV1JobsCleanupPost(requestParameters: CleanupJobsApiV1JobsCleanupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * @summary Create Job
     * @param {JobCreateRequest} jobCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    createJobApiV1JobsPostRaw(requestParameters: CreateJobApiV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResponse>>;

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * Create Job
     */
    createJobApiV1JobsPost(requestParameters: CreateJobApiV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResponse>;

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * @summary Get Job
     * @param {string} jobId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobApiV1JobsJobIdGetRaw(requestParameters: GetJobApiV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResponse>>;

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * Get Job
     */
    getJobApiV1JobsJobIdGet(requestParameters: GetJobApiV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResponse>;

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * @summary Get Job Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    getJobStatsApiV1JobsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStatsResponse>>;

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * Get Job Stats
     */
    getJobStatsApiV1JobsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStatsResponse>;

    /**
     * List jobs with optional filtering and pagination.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs with pagination info
     * @summary List Jobs
     * @param {JobStatus} [status] 
     * @param {JobPriority} [priority] 
     * @param {string} [functionName] 
     * @param {Date} [createdAfter] 
     * @param {Date} [createdBefore] 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [sortBy] 
     * @param {string} [sortOrder] 
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApiInterface
     */
    listJobsApiV1JobsGetRaw(requestParameters: ListJobsApiV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobListResponse>>;

    /**
     * List jobs with optional filtering and pagination.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs with pagination info
     * List Jobs
     */
    listJobsApiV1JobsGet(requestParameters: ListJobsApiV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobListResponse>;

}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI implements JobsApiInterface {

    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * Cancel Job
     */
    async cancelJobApiV1JobsJobIdCancelPostRaw(requestParameters: CancelJobApiV1JobsJobIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobActionResponse>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling cancelJobApiV1JobsJobIdCancelPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/{job_id}/cancel`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobActionResponseFromJSON(jsonValue));
    }

    /**
     * Cancel a job.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Cancellation result
     * Cancel Job
     */
    async cancelJobApiV1JobsJobIdCancelPost(requestParameters: CancelJobApiV1JobsJobIdCancelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobActionResponse> {
        const response = await this.cancelJobApiV1JobsJobIdCancelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clean up old completed jobs to free up memory.  Note: This is a system-wide cleanup operation that affects all users. Only completed, failed, or cancelled jobs older than 24 hours are removed.  Args:     force: If True, remove all completed/failed jobs regardless of age     current_user: Current authenticated user  Returns:     Cleanup statistics
     * Cleanup Jobs
     */
    async cleanupJobsApiV1JobsCleanupPostRaw(requestParameters: CleanupJobsApiV1JobsCleanupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['force'] != null) {
            queryParameters['force'] = requestParameters['force'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/cleanup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Clean up old completed jobs to free up memory.  Note: This is a system-wide cleanup operation that affects all users. Only completed, failed, or cancelled jobs older than 24 hours are removed.  Args:     force: If True, remove all completed/failed jobs regardless of age     current_user: Current authenticated user  Returns:     Cleanup statistics
     * Cleanup Jobs
     */
    async cleanupJobsApiV1JobsCleanupPost(requestParameters: CleanupJobsApiV1JobsCleanupPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.cleanupJobsApiV1JobsCleanupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * Create Job
     */
    async createJobApiV1JobsPostRaw(requestParameters: CreateJobApiV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResponse>> {
        if (requestParameters['jobCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'jobCreateRequest',
                'Required parameter "jobCreateRequest" was null or undefined when calling createJobApiV1JobsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobCreateRequestToJSON(requestParameters['jobCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue));
    }

    /**
     * Create a new job.  Args:     job_data: Job creation data     current_user: Current authenticated user  Returns:     Created job data
     * Create Job
     */
    async createJobApiV1JobsPost(requestParameters: CreateJobApiV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResponse> {
        const response = await this.createJobApiV1JobsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * Get Job
     */
    async getJobApiV1JobsJobIdGetRaw(requestParameters: GetJobApiV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobResponse>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getJobApiV1JobsJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/{job_id}`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobResponseFromJSON(jsonValue));
    }

    /**
     * Get job by ID.  Args:     job_id: Job ID     current_user: Current authenticated user  Returns:     Job data
     * Get Job
     */
    async getJobApiV1JobsJobIdGet(requestParameters: GetJobApiV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobResponse> {
        const response = await this.getJobApiV1JobsJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * Get Job Stats
     */
    async getJobStatsApiV1JobsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/stats/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get job queue statistics.  Args:     current_user: Current authenticated user  Returns:     Job statistics
     * Get Job Stats
     */
    async getJobStatsApiV1JobsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobStatsResponse> {
        const response = await this.getJobStatsApiV1JobsStatsOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List jobs with optional filtering and pagination.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs with pagination info
     * List Jobs
     */
    async listJobsApiV1JobsGetRaw(requestParameters: ListJobsApiV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['priority'] = requestParameters['priority'];
        }

        if (requestParameters['functionName'] != null) {
            queryParameters['function_name'] = requestParameters['functionName'];
        }

        if (requestParameters['createdAfter'] != null) {
            queryParameters['created_after'] = (requestParameters['createdAfter'] as any).toISOString();
        }

        if (requestParameters['createdBefore'] != null) {
            queryParameters['created_before'] = (requestParameters['createdBefore'] as any).toISOString();
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sort_order'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/jobs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobListResponseFromJSON(jsonValue));
    }

    /**
     * List jobs with optional filtering and pagination.  Args:     request: List request parameters     current_user: Current authenticated user  Returns:     List of jobs with pagination info
     * List Jobs
     */
    async listJobsApiV1JobsGet(requestParameters: ListJobsApiV1JobsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobListResponse> {
        const response = await this.listJobsApiV1JobsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
