/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConversationResponse } from './ConversationResponse';
import {
    ConversationResponseFromJSON,
    ConversationResponseFromJSONTyped,
    ConversationResponseToJSON,
    ConversationResponseToJSONTyped,
} from './ConversationResponse';

/**
 * Schema for conversation search response.
 * @export
 * @interface ConversationSearchResponse
 */
export interface ConversationSearchResponse {
    /**
     * Conversations
     * @type {Array<ConversationResponse>}
     * @memberof ConversationSearchResponse
     */
    conversations: Array<ConversationResponse>;
    /**
     * Total number of conversations
     * @type {number}
     * @memberof ConversationSearchResponse
     */
    total: number;
    /**
     * Request limit
     * @type {number}
     * @memberof ConversationSearchResponse
     */
    limit: number;
    /**
     * Request offset
     * @type {number}
     * @memberof ConversationSearchResponse
     */
    offset: number;
}

/**
 * Check if a given object implements the ConversationSearchResponse interface.
 */
export function instanceOfConversationSearchResponse(value: object): value is ConversationSearchResponse {
    if (!('conversations' in value) || value['conversations'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('limit' in value) || value['limit'] === undefined) return false;
    if (!('offset' in value) || value['offset'] === undefined) return false;
    return true;
}

export function ConversationSearchResponseFromJSON(json: any): ConversationSearchResponse {
    return ConversationSearchResponseFromJSONTyped(json, false);
}

export function ConversationSearchResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationSearchResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'conversations': ((json['conversations'] as Array<any>).map(ConversationResponseFromJSON)),
        'total': json['total'],
        'limit': json['limit'],
        'offset': json['offset'],
    };
}

export function ConversationSearchResponseToJSON(json: any): ConversationSearchResponse {
    return ConversationSearchResponseToJSONTyped(json, false);
}

export function ConversationSearchResponseToJSONTyped(value?: ConversationSearchResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conversations': ((value['conversations'] as Array<any>).map(ConversationResponseToJSON)),
        'total': value['total'],
        'limit': value['limit'],
        'offset': value['offset'],
    };
}

