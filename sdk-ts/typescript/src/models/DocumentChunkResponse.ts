/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for document chunk response.
 * @export
 * @interface DocumentChunkResponse
 */
export interface DocumentChunkResponse {
    /**
     * Chunk ID
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    id: string;
    /**
     * Document ID
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    documentId: string;
    /**
     * Chunk content
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    content: string;
    /**
     * Chunk index
     * @type {number}
     * @memberof DocumentChunkResponse
     */
    chunkIndex: number;
    /**
     * 
     * @type {number}
     * @memberof DocumentChunkResponse
     */
    startChar?: number | null;
    /**
     * 
     * @type {number}
     * @memberof DocumentChunkResponse
     */
    endChar?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DocumentChunkResponse
     */
    extraMetadata?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof DocumentChunkResponse
     */
    tokenCount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    language?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    embeddingModel?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    embeddingProvider?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof DocumentChunkResponse
     */
    embeddingCreatedAt?: Date | null;
    /**
     * Content hash
     * @type {string}
     * @memberof DocumentChunkResponse
     */
    contentHash: string;
    /**
     * Creation time
     * @type {Date}
     * @memberof DocumentChunkResponse
     */
    createdAt: Date;
    /**
     * Last update time
     * @type {Date}
     * @memberof DocumentChunkResponse
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the DocumentChunkResponse interface.
 */
export function instanceOfDocumentChunkResponse(value: object): value is DocumentChunkResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('documentId' in value) || value['documentId'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('chunkIndex' in value) || value['chunkIndex'] === undefined) return false;
    if (!('contentHash' in value) || value['contentHash'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DocumentChunkResponseFromJSON(json: any): DocumentChunkResponse {
    return DocumentChunkResponseFromJSONTyped(json, false);
}

export function DocumentChunkResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentChunkResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'documentId': json['document_id'],
        'content': json['content'],
        'chunkIndex': json['chunk_index'],
        'startChar': json['start_char'] == null ? undefined : json['start_char'],
        'endChar': json['end_char'] == null ? undefined : json['end_char'],
        'extraMetadata': json['extra_metadata'] == null ? undefined : json['extra_metadata'],
        'tokenCount': json['token_count'] == null ? undefined : json['token_count'],
        'language': json['language'] == null ? undefined : json['language'],
        'embeddingModel': json['embedding_model'] == null ? undefined : json['embedding_model'],
        'embeddingProvider': json['embedding_provider'] == null ? undefined : json['embedding_provider'],
        'embeddingCreatedAt': json['embedding_created_at'] == null ? undefined : (new Date(json['embedding_created_at'])),
        'contentHash': json['content_hash'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function DocumentChunkResponseToJSON(json: any): DocumentChunkResponse {
    return DocumentChunkResponseToJSONTyped(json, false);
}

export function DocumentChunkResponseToJSONTyped(value?: DocumentChunkResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'document_id': value['documentId'],
        'content': value['content'],
        'chunk_index': value['chunkIndex'],
        'start_char': value['startChar'],
        'end_char': value['endChar'],
        'extra_metadata': value['extraMetadata'],
        'token_count': value['tokenCount'],
        'language': value['language'],
        'embedding_model': value['embeddingModel'],
        'embedding_provider': value['embeddingProvider'],
        'embedding_created_at': value['embeddingCreatedAt'] === null ? null : ((value['embeddingCreatedAt'] as any)?.toISOString()),
        'content_hash': value['contentHash'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

