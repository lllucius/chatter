# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from typing import Any
from chatter_sdk.models.chat_response import ChatResponse
from chatter_sdk.models.chat_workflow_request import ChatWorkflowRequest

from chatter_sdk.api_client import ApiClient, RequestSerialized
from chatter_sdk.api_response import ApiResponse
from chatter_sdk.rest import RESTResponseType


class ChatApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def chat_endpoint_api_v1_chat_chat_post(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChatResponse:
        """Chat Endpoint

        Non-streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_endpoint_api_v1_chat_chat_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatResponse",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def chat_endpoint_api_v1_chat_chat_post_with_http_info(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChatResponse]:
        """Chat Endpoint

        Non-streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_endpoint_api_v1_chat_chat_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatResponse",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def chat_endpoint_api_v1_chat_chat_post_without_preload_content(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Chat Endpoint

        Non-streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._chat_endpoint_api_v1_chat_chat_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChatResponse",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _chat_endpoint_api_v1_chat_chat_post_serialize(
        self,
        chat_workflow_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if chat_workflow_request is not None:
            _body_params = chat_workflow_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'CustomHTTPBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/chat/chat',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def streaming_chat_endpoint_api_v1_chat_streaming_post(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """Streaming Chat Endpoint

        Streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._streaming_chat_endpoint_api_v1_chat_streaming_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def streaming_chat_endpoint_api_v1_chat_streaming_post_with_http_info(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """Streaming Chat Endpoint

        Streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._streaming_chat_endpoint_api_v1_chat_streaming_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def streaming_chat_endpoint_api_v1_chat_streaming_post_without_preload_content(
        self,
        chat_workflow_request: ChatWorkflowRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Streaming Chat Endpoint

        Streaming chat endpoint using workflow execution. ## Dynamic Workflow Configuration  This endpoint supports dynamic workflow configuration through capability flags:  ### Basic Chat Simple conversation without tools or retrieval. ```json {     \"message\": \"Hello, how are you?\",     \"enable_retrieval\": false,     \"enable_tools\": false } ```  ### Retrieval-Augmented Generation Document search and retrieval capabilities. ```json {     \"message\": \"What are the latest sales figures?\",     \"enable_retrieval\": true,     \"enable_tools\": false } ```  ### Tool-Enhanced Workflow Function calling with available tools. ```json {     \"message\": \"Calculate the square root of 144\",     \"enable_retrieval\": false,     \"enable_tools\": true } ```  ### Full-Featured Workflow Combination of retrieval and tools for complex tasks. ```json {     \"message\": \"Find recent customer feedback and create a summary report\",     \"enable_retrieval\": true,     \"enable_tools\": true } ```  ## Streaming  Set `stream: true` to receive real-time responses: ```json {     \"message\": \"Tell me a story\",     \"enable_retrieval\": false,     \"enable_tools\": false,     \"stream\": true } ```  Streaming responses use Server-Sent Events (SSE) format with event types: - `token`: Content chunks - `node_start`: Workflow node started - `node_complete`: Workflow node completed - `usage`: Final usage statistics - `error`: Error occurred  ## Templates  Use pre-configured templates for common scenarios: ```json {     \"message\": \"I need help with my order\",     \"workflow_template\": \"customer_support\" } ```  Available templates: - `customer_support`: Customer service with knowledge base - `code_assistant`: Programming help with code tools - `research_assistant`: Document research and analysis - `general_chat`: General conversation - `document_qa`: Document question answering - `data_analyst`: Data analysis with computation tools 

        :param chat_workflow_request: (required)
        :type chat_workflow_request: ChatWorkflowRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._streaming_chat_endpoint_api_v1_chat_streaming_post_serialize(
            chat_workflow_request=chat_workflow_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
            '422': "HTTPValidationError",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _streaming_chat_endpoint_api_v1_chat_streaming_post_serialize(
        self,
        chat_workflow_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if chat_workflow_request is not None:
            _body_params = chat_workflow_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'text/event-stream'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'CustomHTTPBearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/chat/streaming',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


