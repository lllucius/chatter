# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from chatter_sdk.models.statistical_analysis import StatisticalAnalysis
from chatter_sdk.models.test_status import TestStatus
from chatter_sdk.models.variant_performance import VariantPerformance
from typing import Optional, Set
from typing_extensions import Self

class ABTestAnalyticsResponse(BaseModel):
    """
    Comprehensive A/B test analytics response.
    """ # noqa: E501
    test_id: StrictStr = Field(description="Test ID")
    test_name: StrictStr = Field(description="Test name")
    status: TestStatus
    total_participants: StrictInt = Field(description="Total participants")
    variants: List[VariantPerformance] = Field(description="Variant performance data")
    statistical_analysis: StatisticalAnalysis
    winner: Optional[StrictStr] = None
    improvement: Optional[Union[StrictFloat, StrictInt]] = None
    recommendation: StrictStr = Field(description="Recommendation")
    duration_days: StrictInt = Field(description="Days test has been running")
    remaining_days: Optional[StrictInt] = None
    progress_percentage: Union[StrictFloat, StrictInt] = Field(description="Test progress percentage")
    generated_at: datetime = Field(description="Analytics generation timestamp")
    last_updated: datetime = Field(description="Last data update")
    __properties: ClassVar[List[str]] = ["test_id", "test_name", "status", "total_participants", "variants", "statistical_analysis", "winner", "improvement", "recommendation", "duration_days", "remaining_days", "progress_percentage", "generated_at", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ABTestAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        # override the default output from pydantic by calling `to_dict()` of statistical_analysis
        if self.statistical_analysis:
            _dict['statistical_analysis'] = self.statistical_analysis.to_dict()
        # set to None if winner (nullable) is None
        # and model_fields_set contains the field
        if self.winner is None and "winner" in self.model_fields_set:
            _dict['winner'] = None

        # set to None if improvement (nullable) is None
        # and model_fields_set contains the field
        if self.improvement is None and "improvement" in self.model_fields_set:
            _dict['improvement'] = None

        # set to None if remaining_days (nullable) is None
        # and model_fields_set contains the field
        if self.remaining_days is None and "remaining_days" in self.model_fields_set:
            _dict['remaining_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ABTestAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "test_id": obj.get("test_id"),
            "test_name": obj.get("test_name"),
            "status": obj.get("status"),
            "total_participants": obj.get("total_participants"),
            "variants": [VariantPerformance.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None,
            "statistical_analysis": StatisticalAnalysis.from_dict(obj["statistical_analysis"]) if obj.get("statistical_analysis") is not None else None,
            "winner": obj.get("winner"),
            "improvement": obj.get("improvement"),
            "recommendation": obj.get("recommendation"),
            "duration_days": obj.get("duration_days"),
            "remaining_days": obj.get("remaining_days"),
            "progress_percentage": obj.get("progress_percentage"),
            "generated_at": obj.get("generated_at"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


