
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar
from typing import Annotated
from chatter_sdk.models.metric_type import MetricType
from chatter_sdk.models.test_type import TestType
from chatter_sdk.models.test_variant import TestVariant
from chatter_sdk.models.variant_allocation import VariantAllocation
from typing import Self

class ABTestCreateRequest(BaseModel):
    """
    Request schema for creating an A/B test.
    """ # noqa: E501
    name: StrictStr = Field(description="Test name")
    description: StrictStr = Field(description="Test description")
    test_type: TestType
    allocation_strategy: VariantAllocation
    variants: Annotated[list[TestVariant], Field(min_length=2)] = Field(description="Test variants")
    metrics: Annotated[list[MetricType], Field(min_length=1)] = Field(description="Metrics to track")
    duration_days: Annotated[int, Field(le=365, strict=True, ge=1)] | None = Field(default=7, description="Test duration in days")
    min_sample_size: Annotated[int, Field(strict=True, ge=10)] | None = Field(default=100, description="Minimum sample size")
    confidence_level: Annotated[float, Field(le=0.99, strict=True, ge=0.5)] | Annotated[int, Field(le=0, strict=True, ge=1)] | None = Field(default=0.95, description="Statistical confidence level")
    target_audience: dict[str, Any] | None = None
    traffic_percentage: Annotated[float, Field(le=100.0, strict=True, ge=0.1)] | Annotated[int, Field(le=100, strict=True, ge=1)] | None = Field(default=100.0, description="Percentage of traffic to include")
    tags: list[StrictStr] | None = Field(default=None, description="Test tags")
    metadata: dict[str, Any] | None = Field(default=None, description="Additional metadata")
    __properties: ClassVar[list[str]] = ["name", "description", "test_type", "allocation_strategy", "variants", "metrics", "duration_days", "min_sample_size", "confidence_level", "target_audience", "traffic_percentage", "tags", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ABTestCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        # set to None if target_audience (nullable) is None
        # and model_fields_set contains the field
        if self.target_audience is None and "target_audience" in self.model_fields_set:
            _dict['target_audience'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ABTestCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "test_type": obj.get("test_type"),
            "allocation_strategy": obj.get("allocation_strategy"),
            "variants": [TestVariant.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None,
            "metrics": obj.get("metrics"),
            "duration_days": obj.get("duration_days") if obj.get("duration_days") is not None else 7,
            "min_sample_size": obj.get("min_sample_size") if obj.get("min_sample_size") is not None else 100,
            "confidence_level": obj.get("confidence_level") if obj.get("confidence_level") is not None else 0.95,
            "target_audience": obj.get("target_audience"),
            "traffic_percentage": obj.get("traffic_percentage") if obj.get("traffic_percentage") is not None else 100.0,
            "tags": obj.get("tags"),
            "metadata": obj.get("metadata")
        })
        return _obj


