# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from chatter_sdk.models.metric_type import MetricType
from chatter_sdk.models.test_status import TestStatus
from chatter_sdk.models.test_type import TestType
from chatter_sdk.models.test_variant import TestVariant
from chatter_sdk.models.variant_allocation import VariantAllocation
from typing import Optional, Set
from typing_extensions import Self

class ABTestResponse(BaseModel):
    """
    Response schema for A/B test data.
    """ # noqa: E501
    id: StrictStr = Field(description="Test ID")
    name: StrictStr = Field(description="Test name")
    description: StrictStr = Field(description="Test description")
    test_type: TestType
    status: TestStatus
    allocation_strategy: VariantAllocation
    variants: List[TestVariant] = Field(description="Test variants")
    metrics: List[MetricType] = Field(description="Metrics being tracked")
    duration_days: StrictInt = Field(description="Test duration in days")
    min_sample_size: StrictInt = Field(description="Minimum sample size")
    confidence_level: Union[StrictFloat, StrictInt] = Field(description="Statistical confidence level")
    target_audience: Optional[Dict[str, Any]] = None
    traffic_percentage: Union[StrictFloat, StrictInt] = Field(description="Percentage of traffic included")
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    participant_count: Optional[StrictInt] = Field(default=0, description="Number of participants")
    created_at: datetime = Field(description="Creation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    created_by: StrictStr = Field(description="Creator")
    tags: List[StrictStr] = Field(description="Test tags")
    metadata: Dict[str, Any] = Field(description="Additional metadata")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "test_type", "status", "allocation_strategy", "variants", "metrics", "duration_days", "min_sample_size", "confidence_level", "target_audience", "traffic_percentage", "start_date", "end_date", "participant_count", "created_at", "updated_at", "created_by", "tags", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ABTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in variants (list)
        _items = []
        if self.variants:
            for _item_variants in self.variants:
                if _item_variants:
                    _items.append(_item_variants.to_dict())
            _dict['variants'] = _items
        # set to None if target_audience (nullable) is None
        # and model_fields_set contains the field
        if self.target_audience is None and "target_audience" in self.model_fields_set:
            _dict['target_audience'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ABTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "test_type": obj.get("test_type"),
            "status": obj.get("status"),
            "allocation_strategy": obj.get("allocation_strategy"),
            "variants": [TestVariant.from_dict(_item) for _item in obj["variants"]] if obj.get("variants") is not None else None,
            "metrics": obj.get("metrics"),
            "duration_days": obj.get("duration_days"),
            "min_sample_size": obj.get("min_sample_size"),
            "confidence_level": obj.get("confidence_level"),
            "target_audience": obj.get("target_audience"),
            "traffic_percentage": obj.get("traffic_percentage"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "participant_count": obj.get("participant_count") if obj.get("participant_count") is not None else 0,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": obj.get("created_by"),
            "tags": obj.get("tags"),
            "metadata": obj.get("metadata")
        })
        return _obj


