
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar
from chatter_sdk.models.test_metric import TestMetric
from chatter_sdk.models.test_status import TestStatus
from typing import Self

class ABTestResultsResponse(BaseModel):
    """
    Response schema for A/B test results.
    """ # noqa: E501
    test_id: StrictStr = Field(description="Test ID")
    test_name: StrictStr = Field(description="Test name")
    status: TestStatus
    metrics: list[TestMetric] = Field(description="Metric results by variant")
    statistical_significance: dict[str, StrictBool] = Field(description="Statistical significance by metric")
    confidence_intervals: dict[str, dict[str, list[StrictFloat | StrictInt]]] = Field(description="Confidence intervals")
    winning_variant: StrictStr | None = None
    recommendation: StrictStr = Field(description="Action recommendation")
    generated_at: datetime = Field(description="Results generation timestamp")
    sample_size: StrictInt = Field(description="Total sample size")
    duration_days: StrictInt = Field(description="Test duration so far")
    __properties: ClassVar[list[str]] = ["test_id", "test_name", "status", "metrics", "statistical_significance", "confidence_intervals", "winning_variant", "recommendation", "generated_at", "sample_size", "duration_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ABTestResultsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # set to None if winning_variant (nullable) is None
        # and model_fields_set contains the field
        if self.winning_variant is None and "winning_variant" in self.model_fields_set:
            _dict['winning_variant'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ABTestResultsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "test_id": obj.get("test_id"),
            "test_name": obj.get("test_name"),
            "status": obj.get("status"),
            "metrics": [TestMetric.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "statistical_significance": obj.get("statistical_significance"),
            "confidence_intervals": obj.get("confidence_intervals"),
            "winning_variant": obj.get("winning_variant"),
            "recommendation": obj.get("recommendation"),
            "generated_at": obj.get("generated_at"),
            "sample_size": obj.get("sample_size"),
            "duration_days": obj.get("duration_days")
        })
        return _obj


