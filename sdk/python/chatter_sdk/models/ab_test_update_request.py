
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar
from typing import Annotated
from chatter_sdk.models.test_status import TestStatus
from typing import Self

class ABTestUpdateRequest(BaseModel):
    """
    Request schema for updating an A/B test.
    """ # noqa: E501
    name: StrictStr | None = None
    description: StrictStr | None = None
    status: TestStatus | None = None
    duration_days: Annotated[int, Field(le=365, strict=True, ge=1)] | None = None
    min_sample_size: Annotated[int, Field(strict=True, ge=10)] | None = None
    confidence_level: Annotated[float, Field(le=0.99, strict=True, ge=0.5)] | Annotated[int, Field(le=0, strict=True, ge=1)] | None = None
    traffic_percentage: Annotated[float, Field(le=100.0, strict=True, ge=0.1)] | Annotated[int, Field(le=100, strict=True, ge=1)] | None = None
    tags: list[StrictStr] | None = None
    metadata: dict[str, Any] | None = None
    __properties: ClassVar[list[str]] = ["name", "description", "status", "duration_days", "min_sample_size", "confidence_level", "traffic_percentage", "tags", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ABTestUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if duration_days (nullable) is None
        # and model_fields_set contains the field
        if self.duration_days is None and "duration_days" in self.model_fields_set:
            _dict['duration_days'] = None

        # set to None if min_sample_size (nullable) is None
        # and model_fields_set contains the field
        if self.min_sample_size is None and "min_sample_size" in self.model_fields_set:
            _dict['min_sample_size'] = None

        # set to None if confidence_level (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_level is None and "confidence_level" in self.model_fields_set:
            _dict['confidence_level'] = None

        # set to None if traffic_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.traffic_percentage is None and "traffic_percentage" in self.model_fields_set:
            _dict['traffic_percentage'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ABTestUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "duration_days": obj.get("duration_days"),
            "min_sample_size": obj.get("min_sample_size"),
            "confidence_level": obj.get("confidence_level"),
            "traffic_percentage": obj.get("traffic_percentage"),
            "tags": obj.get("tags"),
            "metadata": obj.get("metadata")
        })
        return _obj


