# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from chatter_sdk.models.agent_capability import AgentCapability
from chatter_sdk.models.agent_status import AgentStatus
from chatter_sdk.models.agent_type import AgentType
from typing import Optional, Set
from typing_extensions import Self

class AgentResponse(BaseModel):
    """
    Response schema for agent data.
    """ # noqa: E501
    id: StrictStr = Field(description="Agent ID")
    name: StrictStr = Field(description="Agent name")
    description: StrictStr = Field(description="Agent description")
    type: AgentType
    status: AgentStatus
    system_message: StrictStr = Field(description="System message")
    personality_traits: List[StrictStr] = Field(description="Agent personality traits")
    knowledge_domains: List[StrictStr] = Field(description="Knowledge domains")
    response_style: StrictStr = Field(description="Response style")
    capabilities: List[AgentCapability] = Field(description="Agent capabilities")
    available_tools: List[StrictStr] = Field(description="Available tools")
    primary_llm: StrictStr = Field(description="Primary LLM provider")
    fallback_llm: StrictStr = Field(description="Fallback LLM provider")
    temperature: Union[StrictFloat, StrictInt] = Field(description="Temperature for responses")
    max_tokens: StrictInt = Field(description="Maximum tokens")
    max_conversation_length: StrictInt = Field(description="Maximum conversation length")
    context_window_size: StrictInt = Field(description="Context window size")
    response_timeout: StrictInt = Field(description="Response timeout in seconds")
    learning_enabled: StrictBool = Field(description="Learning enabled")
    feedback_weight: Union[StrictFloat, StrictInt] = Field(description="Feedback weight")
    adaptation_threshold: Union[StrictFloat, StrictInt] = Field(description="Adaptation threshold")
    created_at: datetime = Field(description="Creation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    created_by: StrictStr = Field(description="Creator")
    tags: List[StrictStr] = Field(description="Agent tags")
    metadata: Dict[str, Any] = Field(description="Additional metadata")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "type", "status", "system_message", "personality_traits", "knowledge_domains", "response_style", "capabilities", "available_tools", "primary_llm", "fallback_llm", "temperature", "max_tokens", "max_conversation_length", "context_window_size", "response_timeout", "learning_enabled", "feedback_weight", "adaptation_threshold", "created_at", "updated_at", "created_by", "tags", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "system_message": obj.get("system_message"),
            "personality_traits": obj.get("personality_traits"),
            "knowledge_domains": obj.get("knowledge_domains"),
            "response_style": obj.get("response_style"),
            "capabilities": obj.get("capabilities"),
            "available_tools": obj.get("available_tools"),
            "primary_llm": obj.get("primary_llm"),
            "fallback_llm": obj.get("fallback_llm"),
            "temperature": obj.get("temperature"),
            "max_tokens": obj.get("max_tokens"),
            "max_conversation_length": obj.get("max_conversation_length"),
            "context_window_size": obj.get("context_window_size"),
            "response_timeout": obj.get("response_timeout"),
            "learning_enabled": obj.get("learning_enabled"),
            "feedback_weight": obj.get("feedback_weight"),
            "adaptation_threshold": obj.get("adaptation_threshold"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "created_by": obj.get("created_by"),
            "tags": obj.get("tags"),
            "metadata": obj.get("metadata")
        })
        return _obj


