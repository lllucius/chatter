# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.backup_type import BackupType
from typing import Optional, Set
from typing_extensions import Self

class BackupRequest(BaseModel):
    """
    Request schema for creating a backup via API.
    """ # noqa: E501
    backup_type: Optional[BackupType] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    include_files: Optional[StrictBool] = Field(default=True, description="Include uploaded files")
    include_logs: Optional[StrictBool] = Field(default=False, description="Include system logs")
    compress: Optional[StrictBool] = Field(default=True, description="Compress backup")
    encrypt: Optional[StrictBool] = Field(default=True, description="Encrypt backup")
    retention_days: Optional[Annotated[int, Field(le=365, strict=True, ge=1)]] = Field(default=30, description="Backup retention in days")
    __properties: ClassVar[List[str]] = ["backup_type", "name", "description", "include_files", "include_logs", "compress", "encrypt", "retention_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backup_type": obj.get("backup_type"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "include_files": obj.get("include_files") if obj.get("include_files") is not None else True,
            "include_logs": obj.get("include_logs") if obj.get("include_logs") is not None else False,
            "compress": obj.get("compress") if obj.get("compress") is not None else True,
            "encrypt": obj.get("encrypt") if obj.get("encrypt") is not None else True,
            "retention_days": obj.get("retention_days") if obj.get("retention_days") is not None else 30
        })
        return _obj


