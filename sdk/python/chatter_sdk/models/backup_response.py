
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)
from typing import Self

from chatter_sdk.models.backup_type import BackupType


class BackupResponse(BaseModel):
    """
    Response schema for backup data.
    """ # noqa: E501
    id: StrictStr = Field(description="Backup ID")
    name: StrictStr = Field(description="Backup name")
    description: StrictStr | None = None
    backup_type: BackupType
    status: StrictStr = Field(description="Backup status")
    file_size: StrictInt | None = None
    compressed_size: StrictInt | None = None
    record_count: StrictInt | None = None
    created_at: datetime = Field(description="Backup creation timestamp")
    completed_at: datetime | None = None
    expires_at: datetime | None = None
    encrypted: StrictBool = Field(description="Whether backup is encrypted")
    compressed: StrictBool = Field(description="Whether backup is compressed")
    metadata: dict[str, Any] = Field(description="Backup metadata")
    __properties: ClassVar[list[str]] = ["id", "name", "description", "backup_type", "status", "file_size", "compressed_size", "record_count", "created_at", "completed_at", "expires_at", "encrypted", "compressed", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of BackupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if file_size (nullable) is None
        # and model_fields_set contains the field
        if self.file_size is None and "file_size" in self.model_fields_set:
            _dict["file_size"] = None

        # set to None if compressed_size (nullable) is None
        # and model_fields_set contains the field
        if self.compressed_size is None and "compressed_size" in self.model_fields_set:
            _dict["compressed_size"] = None

        # set to None if record_count (nullable) is None
        # and model_fields_set contains the field
        if self.record_count is None and "record_count" in self.model_fields_set:
            _dict["record_count"] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict["completed_at"] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict["expires_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of BackupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "backup_type": obj.get("backup_type"),
            "status": obj.get("status"),
            "file_size": obj.get("file_size"),
            "compressed_size": obj.get("compressed_size"),
            "record_count": obj.get("record_count"),
            "created_at": obj.get("created_at"),
            "completed_at": obj.get("completed_at"),
            "expires_at": obj.get("expires_at"),
            "encrypted": obj.get("encrypted"),
            "compressed": obj.get("compressed"),
            "metadata": obj.get("metadata")
        })
        return _obj


