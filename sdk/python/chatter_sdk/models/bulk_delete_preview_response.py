# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from chatter_sdk.models.bulk_operation_filters import BulkOperationFilters
from chatter_sdk.models.entity_type import EntityType
from typing import Optional, Set
from typing_extensions import Self

class BulkDeletePreviewResponse(BaseModel):
    """
    Response for bulk delete preview (dry run).
    """ # noqa: E501
    entity_type: EntityType
    total_matching: StrictInt = Field(description="Total items matching filters")
    sample_items: List[Dict[str, Any]] = Field(description="Sample of items that would be deleted (first 10)")
    filters_applied: BulkOperationFilters
    __properties: ClassVar[List[str]] = ["entity_type", "total_matching", "sample_items", "filters_applied"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkDeletePreviewResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters_applied
        if self.filters_applied:
            _dict['filters_applied'] = self.filters_applied.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkDeletePreviewResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity_type": obj.get("entity_type"),
            "total_matching": obj.get("total_matching"),
            "sample_items": obj.get("sample_items"),
            "filters_applied": BulkOperationFilters.from_dict(obj["filters_applied"]) if obj.get("filters_applied") is not None else None
        })
        return _obj


