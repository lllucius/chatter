# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.entity_type import EntityType
from typing import Optional, Set
from typing_extensions import Self

class BulkOperationFilters(BaseModel):
    """
    Server-side filters for bulk operations.
    """ # noqa: E501
    entity_type: EntityType
    created_before: Optional[datetime] = None
    created_after: Optional[datetime] = None
    user_id: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    limit: Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]] = Field(default=1000, description="Maximum number of items to process")
    dry_run: Optional[StrictBool] = Field(default=False, description="If true, only return count without deleting")
    __properties: ClassVar[List[str]] = ["entity_type", "created_before", "created_after", "user_id", "status", "limit", "dry_run"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkOperationFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # set to None if created_before (nullable) is None
        # and model_fields_set contains the field
        if self.created_before is None and "created_before" in self.model_fields_set:
            _dict['created_before'] = None

        # set to None if created_after (nullable) is None
        # and model_fields_set contains the field
        if self.created_after is None and "created_after" in self.model_fields_set:
            _dict['created_after'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkOperationFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entity_type": obj.get("entity_type"),
            "created_before": obj.get("created_before"),
            "created_after": obj.get("created_after"),
            "user_id": obj.get("user_id"),
            "status": obj.get("status"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 1000,
            "dry_run": obj.get("dry_run") if obj.get("dry_run") is not None else False
        })
        return _obj


