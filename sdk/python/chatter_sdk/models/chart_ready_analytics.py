# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from chatter_sdk.models.chart_data_point import ChartDataPoint
from chatter_sdk.models.time_series_data_point import TimeSeriesDataPoint
from typing import Optional, Set
from typing_extensions import Self

class ChartReadyAnalytics(BaseModel):
    """
    Schema for chart-ready analytics data.
    """ # noqa: E501
    conversation_chart_data: List[TimeSeriesDataPoint] = Field(description="Daily conversation data for charts")
    token_usage_data: List[TimeSeriesDataPoint] = Field(description="Token usage over time for charts")
    performance_chart_data: List[ChartDataPoint] = Field(description="Performance metrics for charts")
    system_health_data: List[ChartDataPoint] = Field(description="System health data for charts")
    integration_data: List[ChartDataPoint] = Field(description="Integration usage data for charts")
    hourly_performance_data: List[Dict[str, Any]] = Field(description="24-hour performance breakdown")
    __properties: ClassVar[List[str]] = ["conversation_chart_data", "token_usage_data", "performance_chart_data", "system_health_data", "integration_data", "hourly_performance_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChartReadyAnalytics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conversation_chart_data (list)
        _items = []
        if self.conversation_chart_data:
            for _item_conversation_chart_data in self.conversation_chart_data:
                if _item_conversation_chart_data:
                    _items.append(_item_conversation_chart_data.to_dict())
            _dict['conversation_chart_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in token_usage_data (list)
        _items = []
        if self.token_usage_data:
            for _item_token_usage_data in self.token_usage_data:
                if _item_token_usage_data:
                    _items.append(_item_token_usage_data.to_dict())
            _dict['token_usage_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in performance_chart_data (list)
        _items = []
        if self.performance_chart_data:
            for _item_performance_chart_data in self.performance_chart_data:
                if _item_performance_chart_data:
                    _items.append(_item_performance_chart_data.to_dict())
            _dict['performance_chart_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in system_health_data (list)
        _items = []
        if self.system_health_data:
            for _item_system_health_data in self.system_health_data:
                if _item_system_health_data:
                    _items.append(_item_system_health_data.to_dict())
            _dict['system_health_data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in integration_data (list)
        _items = []
        if self.integration_data:
            for _item_integration_data in self.integration_data:
                if _item_integration_data:
                    _items.append(_item_integration_data.to_dict())
            _dict['integration_data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChartReadyAnalytics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversation_chart_data": [TimeSeriesDataPoint.from_dict(_item) for _item in obj["conversation_chart_data"]] if obj.get("conversation_chart_data") is not None else None,
            "token_usage_data": [TimeSeriesDataPoint.from_dict(_item) for _item in obj["token_usage_data"]] if obj.get("token_usage_data") is not None else None,
            "performance_chart_data": [ChartDataPoint.from_dict(_item) for _item in obj["performance_chart_data"]] if obj.get("performance_chart_data") is not None else None,
            "system_health_data": [ChartDataPoint.from_dict(_item) for _item in obj["system_health_data"]] if obj.get("system_health_data") is not None else None,
            "integration_data": [ChartDataPoint.from_dict(_item) for _item in obj["integration_data"]] if obj.get("integration_data") is not None else None,
            "hourly_performance_data": obj.get("hourly_performance_data")
        })
        return _obj


