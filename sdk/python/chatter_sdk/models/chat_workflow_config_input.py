# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from chatter_sdk.models.model_config import ModelConfig
from chatter_sdk.models.retrieval_config import RetrievalConfig
from chatter_sdk.models.tool_config import ToolConfig
from chatter_sdk.models.workflow_edge import WorkflowEdge
from chatter_sdk.models.workflow_node import WorkflowNode
from typing import Optional, Set
from typing_extensions import Self

class ChatWorkflowConfigInput(BaseModel):
    """
    Configuration for building chat workflows dynamically.
    """ # noqa: E501
    enable_retrieval: Optional[StrictBool] = Field(default=False, description="Enable document retrieval")
    enable_tools: Optional[StrictBool] = Field(default=False, description="Enable function calling")
    enable_memory: Optional[StrictBool] = Field(default=True, description="Enable conversation memory")
    enable_web_search: Optional[StrictBool] = Field(default=False, description="Enable web search")
    llm_config: Optional[ModelConfig] = None
    retrieval_config: Optional[RetrievalConfig] = None
    tool_config: Optional[ToolConfig] = None
    custom_nodes: Optional[List[WorkflowNode]] = None
    custom_edges: Optional[List[WorkflowEdge]] = None
    __properties: ClassVar[List[str]] = ["enable_retrieval", "enable_tools", "enable_memory", "enable_web_search", "llm_config", "retrieval_config", "tool_config", "custom_nodes", "custom_edges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatWorkflowConfigInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of llm_config
        if self.llm_config:
            _dict['llm_config'] = self.llm_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retrieval_config
        if self.retrieval_config:
            _dict['retrieval_config'] = self.retrieval_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_config
        if self.tool_config:
            _dict['tool_config'] = self.tool_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_nodes (list)
        _items = []
        if self.custom_nodes:
            for _item_custom_nodes in self.custom_nodes:
                if _item_custom_nodes:
                    _items.append(_item_custom_nodes.to_dict())
            _dict['custom_nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_edges (list)
        _items = []
        if self.custom_edges:
            for _item_custom_edges in self.custom_edges:
                if _item_custom_edges:
                    _items.append(_item_custom_edges.to_dict())
            _dict['custom_edges'] = _items
        # set to None if llm_config (nullable) is None
        # and model_fields_set contains the field
        if self.llm_config is None and "llm_config" in self.model_fields_set:
            _dict['llm_config'] = None

        # set to None if retrieval_config (nullable) is None
        # and model_fields_set contains the field
        if self.retrieval_config is None and "retrieval_config" in self.model_fields_set:
            _dict['retrieval_config'] = None

        # set to None if tool_config (nullable) is None
        # and model_fields_set contains the field
        if self.tool_config is None and "tool_config" in self.model_fields_set:
            _dict['tool_config'] = None

        # set to None if custom_nodes (nullable) is None
        # and model_fields_set contains the field
        if self.custom_nodes is None and "custom_nodes" in self.model_fields_set:
            _dict['custom_nodes'] = None

        # set to None if custom_edges (nullable) is None
        # and model_fields_set contains the field
        if self.custom_edges is None and "custom_edges" in self.model_fields_set:
            _dict['custom_edges'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatWorkflowConfigInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable_retrieval": obj.get("enable_retrieval") if obj.get("enable_retrieval") is not None else False,
            "enable_tools": obj.get("enable_tools") if obj.get("enable_tools") is not None else False,
            "enable_memory": obj.get("enable_memory") if obj.get("enable_memory") is not None else True,
            "enable_web_search": obj.get("enable_web_search") if obj.get("enable_web_search") is not None else False,
            "llm_config": ModelConfig.from_dict(obj["llm_config"]) if obj.get("llm_config") is not None else None,
            "retrieval_config": RetrievalConfig.from_dict(obj["retrieval_config"]) if obj.get("retrieval_config") is not None else None,
            "tool_config": ToolConfig.from_dict(obj["tool_config"]) if obj.get("tool_config") is not None else None,
            "custom_nodes": [WorkflowNode.from_dict(_item) for _item in obj["custom_nodes"]] if obj.get("custom_nodes") is not None else None,
            "custom_edges": [WorkflowEdge.from_dict(_item) for _item in obj["custom_edges"]] if obj.get("custom_edges") is not None else None
        })
        return _obj


