# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from chatter_sdk.models.chat_workflow_config import ChatWorkflowConfig
from typing import Optional, Set
from typing_extensions import Self

class ChatWorkflowRequest(BaseModel):
    """
    Request for executing chat via workflow system.
    """ # noqa: E501
    message: Annotated[str, Field(min_length=1, strict=True)] = Field(description="User message")
    conversation_id: Optional[StrictStr] = None
    workflow_config: Optional[ChatWorkflowConfig] = None
    workflow_definition_id: Optional[StrictStr] = None
    workflow_template_name: Optional[StrictStr] = None
    profile_id: Optional[StrictStr] = None
    provider: Optional[StrictStr] = None
    temperature: Optional[Union[Annotated[float, Field(le=2.0, strict=True, ge=0.0)], Annotated[int, Field(le=2, strict=True, ge=0)]]] = None
    max_tokens: Optional[Annotated[int, Field(le=8192, strict=True, ge=1)]] = None
    context_limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = None
    document_ids: Optional[List[StrictStr]] = None
    system_prompt_override: Optional[StrictStr] = None
    enable_tracing: Optional[StrictBool] = Field(default=False, description="Enable backend workflow tracing")
    __properties: ClassVar[List[str]] = ["message", "conversation_id", "workflow_config", "workflow_definition_id", "workflow_template_name", "profile_id", "provider", "temperature", "max_tokens", "context_limit", "document_ids", "system_prompt_override", "enable_tracing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatWorkflowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of workflow_config
        if self.workflow_config:
            _dict['workflow_config'] = self.workflow_config.to_dict()
        # set to None if conversation_id (nullable) is None
        # and model_fields_set contains the field
        if self.conversation_id is None and "conversation_id" in self.model_fields_set:
            _dict['conversation_id'] = None

        # set to None if workflow_config (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_config is None and "workflow_config" in self.model_fields_set:
            _dict['workflow_config'] = None

        # set to None if workflow_definition_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_definition_id is None and "workflow_definition_id" in self.model_fields_set:
            _dict['workflow_definition_id'] = None

        # set to None if workflow_template_name (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_template_name is None and "workflow_template_name" in self.model_fields_set:
            _dict['workflow_template_name'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_tokens is None and "max_tokens" in self.model_fields_set:
            _dict['max_tokens'] = None

        # set to None if context_limit (nullable) is None
        # and model_fields_set contains the field
        if self.context_limit is None and "context_limit" in self.model_fields_set:
            _dict['context_limit'] = None

        # set to None if document_ids (nullable) is None
        # and model_fields_set contains the field
        if self.document_ids is None and "document_ids" in self.model_fields_set:
            _dict['document_ids'] = None

        # set to None if system_prompt_override (nullable) is None
        # and model_fields_set contains the field
        if self.system_prompt_override is None and "system_prompt_override" in self.model_fields_set:
            _dict['system_prompt_override'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatWorkflowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "message": obj.get("message"),
            "conversation_id": obj.get("conversation_id"),
            "workflow_config": ChatWorkflowConfig.from_dict(obj["workflow_config"]) if obj.get("workflow_config") is not None else None,
            "workflow_definition_id": obj.get("workflow_definition_id"),
            "workflow_template_name": obj.get("workflow_template_name"),
            "profile_id": obj.get("profile_id"),
            "provider": obj.get("provider"),
            "temperature": obj.get("temperature"),
            "max_tokens": obj.get("max_tokens"),
            "context_limit": obj.get("context_limit"),
            "document_ids": obj.get("document_ids"),
            "system_prompt_override": obj.get("system_prompt_override"),
            "enable_tracing": obj.get("enable_tracing") if obj.get("enable_tracing") is not None else False
        })
        return _obj


