# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from chatter_sdk.models.chat_workflow_config_output import ChatWorkflowConfigOutput
from typing import Optional, Set
from typing_extensions import Self

class ChatWorkflowTemplate(BaseModel):
    """
    Chat-optimized workflow template.
    """ # noqa: E501
    name: StrictStr = Field(description="Template name")
    description: StrictStr = Field(description="Template description")
    config: ChatWorkflowConfigOutput
    estimated_tokens: Optional[StrictInt] = None
    estimated_cost: Optional[Union[StrictFloat, StrictInt]] = None
    complexity_score: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=1, description="Complexity score")
    use_cases: Optional[List[StrictStr]] = Field(default=None, description="Use cases")
    __properties: ClassVar[List[str]] = ["name", "description", "config", "estimated_tokens", "estimated_cost", "complexity_score", "use_cases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatWorkflowTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # set to None if estimated_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_tokens is None and "estimated_tokens" in self.model_fields_set:
            _dict['estimated_tokens'] = None

        # set to None if estimated_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_cost is None and "estimated_cost" in self.model_fields_set:
            _dict['estimated_cost'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatWorkflowTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "config": ChatWorkflowConfigOutput.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "estimated_tokens": obj.get("estimated_tokens"),
            "estimated_cost": obj.get("estimated_cost"),
            "complexity_score": obj.get("complexity_score") if obj.get("complexity_score") is not None else 1,
            "use_cases": obj.get("use_cases")
        })
        return _obj


