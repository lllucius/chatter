
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar
from chatter_sdk.models.conversation_status import ConversationStatus
from typing import Self

class ConversationResponse(BaseModel):
    """
    Schema for conversation response.
    """ # noqa: E501
    title: StrictStr = Field(description="Conversation title")
    description: StrictStr | None = None
    id: StrictStr = Field(description="Conversation ID")
    user_id: StrictStr = Field(description="User ID")
    profile_id: StrictStr | None = None
    status: ConversationStatus
    llm_provider: StrictStr | None = None
    llm_model: StrictStr | None = None
    temperature: StrictFloat | StrictInt | None = None
    max_tokens: StrictInt | None = None
    enable_retrieval: StrictBool = Field(description="Retrieval enabled")
    message_count: StrictInt = Field(description="Number of messages")
    total_tokens: StrictInt = Field(description="Total tokens used")
    total_cost: StrictFloat | StrictInt = Field(description="Total cost")
    system_prompt: StrictStr | None = None
    context_window: StrictInt = Field(description="Context window size")
    memory_enabled: StrictBool = Field(description="Memory enabled")
    memory_strategy: StrictStr | None = None
    retrieval_limit: StrictInt = Field(description="Retrieval limit")
    retrieval_score_threshold: StrictFloat | StrictInt = Field(description="Retrieval score threshold")
    tags: list[StrictStr] | None = None
    extra_metadata: dict[str, Any] | None = None
    workflow_config: dict[str, Any] | None = None
    created_at: datetime = Field(description="Creation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    last_message_at: datetime | None = None
    __properties: ClassVar[list[str]] = ["title", "description", "id", "user_id", "profile_id", "status", "llm_provider", "llm_model", "temperature", "max_tokens", "enable_retrieval", "message_count", "total_tokens", "total_cost", "system_prompt", "context_window", "memory_enabled", "memory_strategy", "retrieval_limit", "retrieval_score_threshold", "tags", "extra_metadata", "workflow_config", "created_at", "updated_at", "last_message_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ConversationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if llm_provider (nullable) is None
        # and model_fields_set contains the field
        if self.llm_provider is None and "llm_provider" in self.model_fields_set:
            _dict['llm_provider'] = None

        # set to None if llm_model (nullable) is None
        # and model_fields_set contains the field
        if self.llm_model is None and "llm_model" in self.model_fields_set:
            _dict['llm_model'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['temperature'] = None

        # set to None if max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_tokens is None and "max_tokens" in self.model_fields_set:
            _dict['max_tokens'] = None

        # set to None if system_prompt (nullable) is None
        # and model_fields_set contains the field
        if self.system_prompt is None and "system_prompt" in self.model_fields_set:
            _dict['system_prompt'] = None

        # set to None if memory_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.memory_strategy is None and "memory_strategy" in self.model_fields_set:
            _dict['memory_strategy'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if extra_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.extra_metadata is None and "extra_metadata" in self.model_fields_set:
            _dict['extra_metadata'] = None

        # set to None if workflow_config (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_config is None and "workflow_config" in self.model_fields_set:
            _dict['workflow_config'] = None

        # set to None if last_message_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_message_at is None and "last_message_at" in self.model_fields_set:
            _dict['last_message_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ConversationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "profile_id": obj.get("profile_id"),
            "status": obj.get("status"),
            "llm_provider": obj.get("llm_provider"),
            "llm_model": obj.get("llm_model"),
            "temperature": obj.get("temperature"),
            "max_tokens": obj.get("max_tokens"),
            "enable_retrieval": obj.get("enable_retrieval"),
            "message_count": obj.get("message_count"),
            "total_tokens": obj.get("total_tokens"),
            "total_cost": obj.get("total_cost"),
            "system_prompt": obj.get("system_prompt"),
            "context_window": obj.get("context_window"),
            "memory_enabled": obj.get("memory_enabled"),
            "memory_strategy": obj.get("memory_strategy"),
            "retrieval_limit": obj.get("retrieval_limit"),
            "retrieval_score_threshold": obj.get("retrieval_score_threshold"),
            "tags": obj.get("tags"),
            "extra_metadata": obj.get("extra_metadata"),
            "workflow_config": obj.get("workflow_config"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "last_message_at": obj.get("last_message_at")
        })
        return _obj


