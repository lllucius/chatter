
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Self

from chatter_sdk.models.conversation_response import (
    ConversationResponse,
)


class ConversationSearchResponse(BaseModel):
    """
    Schema for conversation search response.
    """ # noqa: E501
    conversations: list[ConversationResponse] = Field(description="Conversations")
    total: StrictInt = Field(description="Total number of conversations")
    limit: StrictInt = Field(description="Request limit")
    offset: StrictInt = Field(description="Request offset")
    __properties: ClassVar[list[str]] = ["conversations", "total", "limit", "offset"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ConversationSearchResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conversations (list)
        _items = []
        if self.conversations:
            for _item_conversations in self.conversations:
                if _item_conversations:
                    _items.append(_item_conversations.to_dict())
            _dict["conversations"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ConversationSearchResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversations": [ConversationResponse.from_dict(_item) for _item in obj["conversations"]] if obj.get("conversations") is not None else None,
            "total": obj.get("total"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset")
        })
        return _obj


