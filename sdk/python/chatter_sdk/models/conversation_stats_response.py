# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ConversationStatsResponse(BaseModel):
    """
    Schema for conversation statistics response.
    """ # noqa: E501
    total_conversations: StrictInt = Field(description="Total number of conversations")
    conversations_by_status: Dict[str, StrictInt] = Field(description="Conversations grouped by status")
    total_messages: StrictInt = Field(description="Total number of messages")
    messages_by_role: Dict[str, StrictInt] = Field(description="Messages grouped by role")
    avg_messages_per_conversation: Union[StrictFloat, StrictInt] = Field(description="Average messages per conversation")
    total_tokens_used: StrictInt = Field(description="Total tokens used")
    total_cost: Union[StrictFloat, StrictInt] = Field(description="Total cost incurred")
    avg_response_time_ms: Union[StrictFloat, StrictInt] = Field(description="Average response time in milliseconds")
    conversations_by_date: Dict[str, StrictInt] = Field(description="Conversations by date")
    most_active_hours: Dict[str, StrictInt] = Field(description="Most active hours")
    popular_models: Dict[str, StrictInt] = Field(description="Popular LLM models")
    popular_providers: Dict[str, StrictInt] = Field(description="Popular LLM providers")
    total_ratings: Optional[StrictInt] = Field(default=0, description="Total number of message ratings")
    avg_message_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Average message rating")
    messages_with_ratings: Optional[StrictInt] = Field(default=0, description="Number of messages with ratings")
    rating_distribution: Optional[Dict[str, StrictInt]] = Field(default=None, description="Distribution of ratings (1-5 stars)")
    __properties: ClassVar[List[str]] = ["total_conversations", "conversations_by_status", "total_messages", "messages_by_role", "avg_messages_per_conversation", "total_tokens_used", "total_cost", "avg_response_time_ms", "conversations_by_date", "most_active_hours", "popular_models", "popular_providers", "total_ratings", "avg_message_rating", "messages_with_ratings", "rating_distribution"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversationStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversationStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_conversations": obj.get("total_conversations"),
            "conversations_by_status": obj.get("conversations_by_status"),
            "total_messages": obj.get("total_messages"),
            "messages_by_role": obj.get("messages_by_role"),
            "avg_messages_per_conversation": obj.get("avg_messages_per_conversation"),
            "total_tokens_used": obj.get("total_tokens_used"),
            "total_cost": obj.get("total_cost"),
            "avg_response_time_ms": obj.get("avg_response_time_ms"),
            "conversations_by_date": obj.get("conversations_by_date"),
            "most_active_hours": obj.get("most_active_hours"),
            "popular_models": obj.get("popular_models"),
            "popular_providers": obj.get("popular_providers"),
            "total_ratings": obj.get("total_ratings") if obj.get("total_ratings") is not None else 0,
            "avg_message_rating": obj.get("avg_message_rating") if obj.get("avg_message_rating") is not None else 0.0,
            "messages_with_ratings": obj.get("messages_with_ratings") if obj.get("messages_with_ratings") is not None else 0,
            "rating_distribution": obj.get("rating_distribution")
        })
        return _obj


