
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar
from chatter_sdk.models.conversation_stats_response import ConversationStatsResponse
from chatter_sdk.models.document_analytics_response import DocumentAnalyticsResponse
from chatter_sdk.models.performance_metrics_response import PerformanceMetricsResponse
from chatter_sdk.models.system_analytics_response import SystemAnalyticsResponse
from chatter_sdk.models.usage_metrics_response import UsageMetricsResponse
from typing import Self

class DashboardResponse(BaseModel):
    """
    Schema for analytics dashboard response.
    """ # noqa: E501
    conversation_stats: ConversationStatsResponse
    usage_metrics: UsageMetricsResponse
    performance_metrics: PerformanceMetricsResponse
    document_analytics: DocumentAnalyticsResponse
    system_health: SystemAnalyticsResponse
    custom_metrics: list[dict[str, Any]] = Field(description="Custom metrics")
    generated_at: datetime = Field(description="Dashboard generation time")
    __properties: ClassVar[list[str]] = ["conversation_stats", "usage_metrics", "performance_metrics", "document_analytics", "system_health", "custom_metrics", "generated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DashboardResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conversation_stats
        if self.conversation_stats:
            _dict['conversation_stats'] = self.conversation_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_metrics
        if self.usage_metrics:
            _dict['usage_metrics'] = self.usage_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performance_metrics
        if self.performance_metrics:
            _dict['performance_metrics'] = self.performance_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_analytics
        if self.document_analytics:
            _dict['document_analytics'] = self.document_analytics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_health
        if self.system_health:
            _dict['system_health'] = self.system_health.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DashboardResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversation_stats": ConversationStatsResponse.from_dict(obj["conversation_stats"]) if obj.get("conversation_stats") is not None else None,
            "usage_metrics": UsageMetricsResponse.from_dict(obj["usage_metrics"]) if obj.get("usage_metrics") is not None else None,
            "performance_metrics": PerformanceMetricsResponse.from_dict(obj["performance_metrics"]) if obj.get("performance_metrics") is not None else None,
            "document_analytics": DocumentAnalyticsResponse.from_dict(obj["document_analytics"]) if obj.get("document_analytics") is not None else None,
            "system_health": SystemAnalyticsResponse.from_dict(obj["system_health"]) if obj.get("system_health") is not None else None,
            "custom_metrics": obj.get("custom_metrics"),
            "generated_at": obj.get("generated_at")
        })
        return _obj


