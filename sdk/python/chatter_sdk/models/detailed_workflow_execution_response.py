# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from chatter_sdk.models.workflow_debug_info import WorkflowDebugInfo
from chatter_sdk.models.workflow_execution_log_entry import WorkflowExecutionLogEntry
from typing import Optional, Set
from typing_extensions import Self

class DetailedWorkflowExecutionResponse(BaseModel):
    """
    Schema for detailed workflow execution response with full debug info.
    """ # noqa: E501
    input_data: Optional[Dict[str, Any]] = None
    id: StrictStr = Field(description="Execution ID")
    definition_id: StrictStr = Field(description="Workflow definition ID")
    owner_id: StrictStr = Field(description="Owner user ID")
    status: StrictStr = Field(description="Execution status")
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    execution_time_ms: Optional[StrictInt] = None
    output_data: Optional[Dict[str, Any]] = None
    error_message: Optional[StrictStr] = None
    tokens_used: Optional[StrictInt] = Field(default=0, description="Total tokens used")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Total cost")
    execution_log: Optional[List[Dict[str, Any]]] = None
    debug_info: Optional[Dict[str, Any]] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    logs: Optional[List[WorkflowExecutionLogEntry]] = Field(default=None, description="Structured execution logs")
    debug_details: Optional[WorkflowDebugInfo] = None
    __properties: ClassVar[List[str]] = ["input_data", "id", "definition_id", "owner_id", "status", "started_at", "completed_at", "execution_time_ms", "output_data", "error_message", "tokens_used", "cost", "execution_log", "debug_info", "created_at", "updated_at", "logs", "debug_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DetailedWorkflowExecutionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logs (list)
        _items = []
        if self.logs:
            for _item_logs in self.logs:
                if _item_logs:
                    _items.append(_item_logs.to_dict())
            _dict['logs'] = _items
        # override the default output from pydantic by calling `to_dict()` of debug_details
        if self.debug_details:
            _dict['debug_details'] = self.debug_details.to_dict()
        # set to None if input_data (nullable) is None
        # and model_fields_set contains the field
        if self.input_data is None and "input_data" in self.model_fields_set:
            _dict['input_data'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if execution_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.execution_time_ms is None and "execution_time_ms" in self.model_fields_set:
            _dict['execution_time_ms'] = None

        # set to None if output_data (nullable) is None
        # and model_fields_set contains the field
        if self.output_data is None and "output_data" in self.model_fields_set:
            _dict['output_data'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if execution_log (nullable) is None
        # and model_fields_set contains the field
        if self.execution_log is None and "execution_log" in self.model_fields_set:
            _dict['execution_log'] = None

        # set to None if debug_info (nullable) is None
        # and model_fields_set contains the field
        if self.debug_info is None and "debug_info" in self.model_fields_set:
            _dict['debug_info'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if debug_details (nullable) is None
        # and model_fields_set contains the field
        if self.debug_details is None and "debug_details" in self.model_fields_set:
            _dict['debug_details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DetailedWorkflowExecutionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input_data": obj.get("input_data"),
            "id": obj.get("id"),
            "definition_id": obj.get("definition_id"),
            "owner_id": obj.get("owner_id"),
            "status": obj.get("status"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "execution_time_ms": obj.get("execution_time_ms"),
            "output_data": obj.get("output_data"),
            "error_message": obj.get("error_message"),
            "tokens_used": obj.get("tokens_used") if obj.get("tokens_used") is not None else 0,
            "cost": obj.get("cost") if obj.get("cost") is not None else 0.0,
            "execution_log": obj.get("execution_log"),
            "debug_info": obj.get("debug_info"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "logs": [WorkflowExecutionLogEntry.from_dict(_item) for _item in obj["logs"]] if obj.get("logs") is not None else None,
            "debug_details": WorkflowDebugInfo.from_dict(obj["debug_details"]) if obj.get("debug_details") is not None else None
        })
        return _obj


