# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class DocumentAnalyticsResponse(BaseModel):
    """
    Schema for document analytics response.
    """ # noqa: E501
    total_documents: StrictInt = Field(description="Total number of documents")
    documents_by_status: Dict[str, StrictInt] = Field(description="Documents by processing status")
    documents_by_type: Dict[str, StrictInt] = Field(description="Documents by file type")
    avg_processing_time_seconds: Union[StrictFloat, StrictInt] = Field(description="Average processing time")
    processing_success_rate: Union[StrictFloat, StrictInt] = Field(description="Processing success rate")
    total_chunks: StrictInt = Field(description="Total number of chunks")
    avg_chunks_per_document: Union[StrictFloat, StrictInt] = Field(description="Average chunks per document")
    total_storage_bytes: StrictInt = Field(description="Total storage used")
    avg_document_size_bytes: Union[StrictFloat, StrictInt] = Field(description="Average document size")
    storage_by_type: Dict[str, StrictInt] = Field(description="Storage usage by document type")
    total_searches: StrictInt = Field(description="Total number of searches")
    avg_search_results: Union[StrictFloat, StrictInt] = Field(description="Average search results returned")
    popular_search_terms: Dict[str, StrictInt] = Field(description="Popular search terms")
    total_views: StrictInt = Field(description="Total document views")
    most_viewed_documents: List[Dict[str, Any]] = Field(description="Most viewed documents")
    documents_by_access_level: Dict[str, StrictInt] = Field(description="Documents by access level")
    __properties: ClassVar[List[str]] = ["total_documents", "documents_by_status", "documents_by_type", "avg_processing_time_seconds", "processing_success_rate", "total_chunks", "avg_chunks_per_document", "total_storage_bytes", "avg_document_size_bytes", "storage_by_type", "total_searches", "avg_search_results", "popular_search_terms", "total_views", "most_viewed_documents", "documents_by_access_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_documents": obj.get("total_documents"),
            "documents_by_status": obj.get("documents_by_status"),
            "documents_by_type": obj.get("documents_by_type"),
            "avg_processing_time_seconds": obj.get("avg_processing_time_seconds"),
            "processing_success_rate": obj.get("processing_success_rate"),
            "total_chunks": obj.get("total_chunks"),
            "avg_chunks_per_document": obj.get("avg_chunks_per_document"),
            "total_storage_bytes": obj.get("total_storage_bytes"),
            "avg_document_size_bytes": obj.get("avg_document_size_bytes"),
            "storage_by_type": obj.get("storage_by_type"),
            "total_searches": obj.get("total_searches"),
            "avg_search_results": obj.get("avg_search_results"),
            "popular_search_terms": obj.get("popular_search_terms"),
            "total_views": obj.get("total_views"),
            "most_viewed_documents": obj.get("most_viewed_documents"),
            "documents_by_access_level": obj.get("documents_by_access_level")
        })
        return _obj


