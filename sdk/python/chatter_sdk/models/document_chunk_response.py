
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar
from typing import Self

class DocumentChunkResponse(BaseModel):
    """
    Schema for document chunk response.
    """ # noqa: E501
    id: StrictStr = Field(description="Chunk ID")
    document_id: StrictStr = Field(description="Document ID")
    content: StrictStr = Field(description="Chunk content")
    chunk_index: StrictInt = Field(description="Chunk index")
    start_char: StrictInt | None = None
    end_char: StrictInt | None = None
    extra_metadata: dict[str, Any] | None = None
    token_count: StrictInt | None = None
    language: StrictStr | None = None
    embedding_model: StrictStr | None = None
    embedding_provider: StrictStr | None = None
    embedding_created_at: datetime | None = None
    content_hash: StrictStr = Field(description="Content hash")
    created_at: datetime = Field(description="Creation time")
    updated_at: datetime = Field(description="Last update time")
    __properties: ClassVar[list[str]] = ["id", "document_id", "content", "chunk_index", "start_char", "end_char", "extra_metadata", "token_count", "language", "embedding_model", "embedding_provider", "embedding_created_at", "content_hash", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DocumentChunkResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_char (nullable) is None
        # and model_fields_set contains the field
        if self.start_char is None and "start_char" in self.model_fields_set:
            _dict['start_char'] = None

        # set to None if end_char (nullable) is None
        # and model_fields_set contains the field
        if self.end_char is None and "end_char" in self.model_fields_set:
            _dict['end_char'] = None

        # set to None if extra_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.extra_metadata is None and "extra_metadata" in self.model_fields_set:
            _dict['extra_metadata'] = None

        # set to None if token_count (nullable) is None
        # and model_fields_set contains the field
        if self.token_count is None and "token_count" in self.model_fields_set:
            _dict['token_count'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if embedding_model (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_model is None and "embedding_model" in self.model_fields_set:
            _dict['embedding_model'] = None

        # set to None if embedding_provider (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_provider is None and "embedding_provider" in self.model_fields_set:
            _dict['embedding_provider'] = None

        # set to None if embedding_created_at (nullable) is None
        # and model_fields_set contains the field
        if self.embedding_created_at is None and "embedding_created_at" in self.model_fields_set:
            _dict['embedding_created_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DocumentChunkResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "document_id": obj.get("document_id"),
            "content": obj.get("content"),
            "chunk_index": obj.get("chunk_index"),
            "start_char": obj.get("start_char"),
            "end_char": obj.get("end_char"),
            "extra_metadata": obj.get("extra_metadata"),
            "token_count": obj.get("token_count"),
            "language": obj.get("language"),
            "embedding_model": obj.get("embedding_model"),
            "embedding_provider": obj.get("embedding_provider"),
            "embedding_created_at": obj.get("embedding_created_at"),
            "content_hash": obj.get("content_hash"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


