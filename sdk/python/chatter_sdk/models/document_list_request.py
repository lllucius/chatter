# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.document_status import DocumentStatus
from chatter_sdk.models.document_type import DocumentType
from typing import Optional, Set
from typing_extensions import Self

class DocumentListRequest(BaseModel):
    """
    Schema for document list request.
    """ # noqa: E501
    status: Optional[DocumentStatus] = None
    document_type: Optional[DocumentType] = None
    tags: Optional[List[StrictStr]] = None
    owner_id: Optional[StrictStr] = None
    limit: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=50, description="Maximum number of results")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, description="Number of results to skip")
    sort_by: Optional[StrictStr] = Field(default='created_at', description="Sort field")
    sort_order: Optional[Annotated[str, Field(strict=True)]] = Field(default='desc', description="Sort order")
    __properties: ClassVar[List[str]] = ["status", "document_type", "tags", "owner_id", "limit", "offset", "sort_by", "sort_order"]

    @field_validator('sort_order')
    def sort_order_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(asc|desc)$", value):
            raise ValueError(r"must validate the regular expression /^(asc|desc)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentListRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if document_type (nullable) is None
        # and model_fields_set contains the field
        if self.document_type is None and "document_type" in self.model_fields_set:
            _dict['document_type'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if owner_id (nullable) is None
        # and model_fields_set contains the field
        if self.owner_id is None and "owner_id" in self.model_fields_set:
            _dict['owner_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentListRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "document_type": obj.get("document_type"),
            "tags": obj.get("tags"),
            "owner_id": obj.get("owner_id"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 50,
            "offset": obj.get("offset") if obj.get("offset") is not None else 0,
            "sort_by": obj.get("sort_by") if obj.get("sort_by") is not None else 'created_at',
            "sort_order": obj.get("sort_order") if obj.get("sort_order") is not None else 'desc'
        })
        return _obj


