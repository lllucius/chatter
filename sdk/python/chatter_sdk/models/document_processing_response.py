"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from chatter_sdk.models.document_status import DocumentStatus
from pydantic import BaseModel, ConfigDict, Field, StrictStr


class DocumentProcessingResponse(BaseModel):
    """
    Schema for document processing response.
    """  # noqa: E501

    document_id: StrictStr = Field(description="Document ID")
    status: DocumentStatus
    message: StrictStr = Field(description="Status message")
    processing_started_at: datetime | None = None
    __properties: ClassVar[list[str]] = [
        "document_id",
        "status",
        "message",
        "processing_started_at",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DocumentProcessingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if processing_started_at (nullable) is None
        # and model_fields_set contains the field
        if (
            self.processing_started_at is None
            and "processing_started_at" in self.model_fields_set
        ):
            _dict['processing_started_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DocumentProcessingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "document_id": obj.get("document_id"),
                "status": obj.get("status"),
                "message": obj.get("message"),
                "processing_started_at": obj.get(
                    "processing_started_at"
                ),
            }
        )
        return _obj
