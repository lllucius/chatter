
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)
from typing import Self

from chatter_sdk.models.document_status import DocumentStatus
from chatter_sdk.models.document_type import DocumentType


class DocumentResponse(BaseModel):
    """
    Schema for document response.
    """ # noqa: E501
    title: StrictStr | None = None
    description: StrictStr | None = None
    tags: list[StrictStr] | None = None
    extra_metadata: dict[str, Any] | None = None
    is_public: StrictBool | None = Field(default=False, description="Whether document is public")
    id: StrictStr = Field(description="Document ID")
    owner_id: StrictStr = Field(description="Owner user ID")
    filename: StrictStr = Field(description="Document filename")
    original_filename: StrictStr = Field(description="Original filename")
    file_size: StrictInt = Field(description="File size in bytes")
    file_hash: StrictStr = Field(description="File hash (SHA-256)")
    mime_type: StrictStr = Field(description="MIME type")
    document_type: DocumentType
    status: DocumentStatus
    processing_started_at: datetime | None = None
    processing_completed_at: datetime | None = None
    processing_error: StrictStr | None = None
    chunk_size: StrictInt = Field(description="Chunk size")
    chunk_overlap: StrictInt = Field(description="Chunk overlap")
    chunk_count: StrictInt = Field(description="Number of chunks")
    version: StrictInt = Field(description="Document version")
    parent_document_id: StrictStr | None = None
    view_count: StrictInt = Field(description="View count")
    search_count: StrictInt = Field(description="Search count")
    last_accessed_at: datetime | None = None
    created_at: datetime = Field(description="Creation time")
    updated_at: datetime = Field(description="Last update time")
    __properties: ClassVar[list[str]] = ["title", "description", "tags", "extra_metadata", "is_public", "id", "owner_id", "filename", "original_filename", "file_size", "file_hash", "mime_type", "document_type", "status", "processing_started_at", "processing_completed_at", "processing_error", "chunk_size", "chunk_overlap", "chunk_count", "version", "parent_document_id", "view_count", "search_count", "last_accessed_at", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DocumentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict["title"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict["tags"] = None

        # set to None if extra_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.extra_metadata is None and "extra_metadata" in self.model_fields_set:
            _dict["extra_metadata"] = None

        # set to None if processing_started_at (nullable) is None
        # and model_fields_set contains the field
        if self.processing_started_at is None and "processing_started_at" in self.model_fields_set:
            _dict["processing_started_at"] = None

        # set to None if processing_completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.processing_completed_at is None and "processing_completed_at" in self.model_fields_set:
            _dict["processing_completed_at"] = None

        # set to None if processing_error (nullable) is None
        # and model_fields_set contains the field
        if self.processing_error is None and "processing_error" in self.model_fields_set:
            _dict["processing_error"] = None

        # set to None if parent_document_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_document_id is None and "parent_document_id" in self.model_fields_set:
            _dict["parent_document_id"] = None

        # set to None if last_accessed_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_accessed_at is None and "last_accessed_at" in self.model_fields_set:
            _dict["last_accessed_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DocumentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "description": obj.get("description"),
            "tags": obj.get("tags"),
            "extra_metadata": obj.get("extra_metadata"),
            "is_public": obj.get("is_public") if obj.get("is_public") is not None else False,
            "id": obj.get("id"),
            "owner_id": obj.get("owner_id"),
            "filename": obj.get("filename"),
            "original_filename": obj.get("original_filename"),
            "file_size": obj.get("file_size"),
            "file_hash": obj.get("file_hash"),
            "mime_type": obj.get("mime_type"),
            "document_type": obj.get("document_type"),
            "status": obj.get("status"),
            "processing_started_at": obj.get("processing_started_at"),
            "processing_completed_at": obj.get("processing_completed_at"),
            "processing_error": obj.get("processing_error"),
            "chunk_size": obj.get("chunk_size"),
            "chunk_overlap": obj.get("chunk_overlap"),
            "chunk_count": obj.get("chunk_count"),
            "version": obj.get("version"),
            "parent_document_id": obj.get("parent_document_id"),
            "view_count": obj.get("view_count"),
            "search_count": obj.get("search_count"),
            "last_accessed_at": obj.get("last_accessed_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


