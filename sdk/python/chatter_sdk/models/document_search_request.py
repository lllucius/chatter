
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar
from typing import Annotated
from chatter_sdk.models.document_type import DocumentType
from typing import Self

class DocumentSearchRequest(BaseModel):
    """
    Schema for document search request.
    """ # noqa: E501
    query: Annotated[str, Field(min_length=1, strict=True, max_length=1000)] = Field(description="Search query")
    limit: Annotated[int, Field(le=100, strict=True, ge=1)] | None = Field(default=10, description="Maximum number of results")
    score_threshold: Annotated[float, Field(le=1.0, strict=True, ge=0.0)] | Annotated[int, Field(le=1, strict=True, ge=0)] | None = Field(default=0.5, description="Minimum similarity score")
    document_types: list[DocumentType] | None = None
    tags: list[StrictStr] | None = None
    include_content: StrictBool | None = Field(default=False, description="Include document content in results")
    __properties: ClassVar[list[str]] = ["query", "limit", "score_threshold", "document_types", "tags", "include_content"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DocumentSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if document_types (nullable) is None
        # and model_fields_set contains the field
        if self.document_types is None and "document_types" in self.model_fields_set:
            _dict['document_types'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DocumentSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "query": obj.get("query"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 10,
            "score_threshold": obj.get("score_threshold") if obj.get("score_threshold") is not None else 0.5,
            "document_types": obj.get("document_types"),
            "tags": obj.get("tags"),
            "include_content": obj.get("include_content") if obj.get("include_content") is not None else False
        })
        return _obj


