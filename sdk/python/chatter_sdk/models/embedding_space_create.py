
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Annotated, Self

from chatter_sdk.models.distance_metric import DistanceMetric
from chatter_sdk.models.reduction_strategy import ReductionStrategy


class EmbeddingSpaceCreate(BaseModel):
    """
    Schema for creating an embedding space.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Unique space name")
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="Human-readable name")
    description: Annotated[str, Field(strict=True, max_length=1000)] | None = None
    base_dimensions: Annotated[int, Field(le=10000, strict=True)] = Field(description="Original model dimensions")
    effective_dimensions: Annotated[int, Field(le=10000, strict=True)] = Field(description="Effective dimensions after reduction")
    reduction_strategy: ReductionStrategy | None = None
    reducer_path: Annotated[str, Field(strict=True, max_length=500)] | None = None
    reducer_version: Annotated[str, Field(strict=True, max_length=100)] | None = None
    normalize_vectors: StrictBool | None = Field(default=True, description="Whether to normalize vectors")
    distance_metric: DistanceMetric | None = None
    table_name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Database table name")
    index_type: Annotated[str, Field(strict=True, max_length=50)] | None = Field(default="hnsw", description="Index type")
    index_config: dict[str, Any] | None = Field(default=None, description="Index configuration")
    is_active: StrictBool | None = Field(default=True, description="Whether space is active")
    is_default: StrictBool | None = Field(default=False, description="Whether this is the default space")
    model_id: StrictStr = Field(description="Model ID")
    __properties: ClassVar[list[str]] = ["name", "display_name", "description", "base_dimensions", "effective_dimensions", "reduction_strategy", "reducer_path", "reducer_version", "normalize_vectors", "distance_metric", "table_name", "index_type", "index_config", "is_active", "is_default", "model_id"]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    @field_validator("table_name")
    def table_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of EmbeddingSpaceCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if reducer_path (nullable) is None
        # and model_fields_set contains the field
        if self.reducer_path is None and "reducer_path" in self.model_fields_set:
            _dict["reducer_path"] = None

        # set to None if reducer_version (nullable) is None
        # and model_fields_set contains the field
        if self.reducer_version is None and "reducer_version" in self.model_fields_set:
            _dict["reducer_version"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of EmbeddingSpaceCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "base_dimensions": obj.get("base_dimensions"),
            "effective_dimensions": obj.get("effective_dimensions"),
            "reduction_strategy": obj.get("reduction_strategy"),
            "reducer_path": obj.get("reducer_path"),
            "reducer_version": obj.get("reducer_version"),
            "normalize_vectors": obj.get("normalize_vectors") if obj.get("normalize_vectors") is not None else True,
            "distance_metric": obj.get("distance_metric"),
            "table_name": obj.get("table_name"),
            "index_type": obj.get("index_type") if obj.get("index_type") is not None else "hnsw",
            "index_config": obj.get("index_config"),
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else True,
            "is_default": obj.get("is_default") if obj.get("is_default") is not None else False,
            "model_id": obj.get("model_id")
        })
        return _obj


