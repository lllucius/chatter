
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Self

from chatter_sdk.models.distance_metric import DistanceMetric
from chatter_sdk.models.reduction_strategy import ReductionStrategy


class EmbeddingSpaceUpdate(BaseModel):
    """
    Schema for updating an embedding space.
    """ # noqa: E501
    display_name: StrictStr | None = None
    description: StrictStr | None = None
    reduction_strategy: ReductionStrategy | None = None
    reducer_path: StrictStr | None = None
    reducer_version: StrictStr | None = None
    normalize_vectors: StrictBool | None = None
    distance_metric: DistanceMetric | None = None
    index_type: StrictStr | None = None
    index_config: dict[str, Any] | None = None
    is_active: StrictBool | None = None
    is_default: StrictBool | None = None
    __properties: ClassVar[list[str]] = ["display_name", "description", "reduction_strategy", "reducer_path", "reducer_version", "normalize_vectors", "distance_metric", "index_type", "index_config", "is_active", "is_default"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of EmbeddingSpaceUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if self.display_name is None and "display_name" in self.model_fields_set:
            _dict["display_name"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if reduction_strategy (nullable) is None
        # and model_fields_set contains the field
        if self.reduction_strategy is None and "reduction_strategy" in self.model_fields_set:
            _dict["reduction_strategy"] = None

        # set to None if reducer_path (nullable) is None
        # and model_fields_set contains the field
        if self.reducer_path is None and "reducer_path" in self.model_fields_set:
            _dict["reducer_path"] = None

        # set to None if reducer_version (nullable) is None
        # and model_fields_set contains the field
        if self.reducer_version is None and "reducer_version" in self.model_fields_set:
            _dict["reducer_version"] = None

        # set to None if normalize_vectors (nullable) is None
        # and model_fields_set contains the field
        if self.normalize_vectors is None and "normalize_vectors" in self.model_fields_set:
            _dict["normalize_vectors"] = None

        # set to None if distance_metric (nullable) is None
        # and model_fields_set contains the field
        if self.distance_metric is None and "distance_metric" in self.model_fields_set:
            _dict["distance_metric"] = None

        # set to None if index_type (nullable) is None
        # and model_fields_set contains the field
        if self.index_type is None and "index_type" in self.model_fields_set:
            _dict["index_type"] = None

        # set to None if index_config (nullable) is None
        # and model_fields_set contains the field
        if self.index_config is None and "index_config" in self.model_fields_set:
            _dict["index_config"] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if self.is_active is None and "is_active" in self.model_fields_set:
            _dict["is_active"] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if self.is_default is None and "is_default" in self.model_fields_set:
            _dict["is_default"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of EmbeddingSpaceUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "reduction_strategy": obj.get("reduction_strategy"),
            "reducer_path": obj.get("reducer_path"),
            "reducer_version": obj.get("reducer_version"),
            "normalize_vectors": obj.get("normalize_vectors"),
            "distance_metric": obj.get("distance_metric"),
            "index_type": obj.get("index_type"),
            "index_config": obj.get("index_config"),
            "is_active": obj.get("is_active"),
            "is_default": obj.get("is_default")
        })
        return _obj


