# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chatter_sdk.models.data_format import DataFormat
from chatter_sdk.models.export_scope import ExportScope
from typing import Optional, Set
from typing_extensions import Self

class ExportDataRequest(BaseModel):
    """
    Request schema for data export API.
    """ # noqa: E501
    scope: ExportScope
    format: Optional[DataFormat] = None
    user_id: Optional[StrictStr] = None
    conversation_id: Optional[StrictStr] = None
    date_from: Optional[datetime] = None
    date_to: Optional[datetime] = None
    include_metadata: Optional[StrictBool] = Field(default=True, description="Include metadata")
    compress: Optional[StrictBool] = Field(default=True, description="Compress export file")
    encrypt: Optional[StrictBool] = Field(default=False, description="Encrypt export file")
    custom_query: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["scope", "format", "user_id", "conversation_id", "date_from", "date_to", "include_metadata", "compress", "encrypt", "custom_query"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if conversation_id (nullable) is None
        # and model_fields_set contains the field
        if self.conversation_id is None and "conversation_id" in self.model_fields_set:
            _dict['conversation_id'] = None

        # set to None if date_from (nullable) is None
        # and model_fields_set contains the field
        if self.date_from is None and "date_from" in self.model_fields_set:
            _dict['date_from'] = None

        # set to None if date_to (nullable) is None
        # and model_fields_set contains the field
        if self.date_to is None and "date_to" in self.model_fields_set:
            _dict['date_to'] = None

        # set to None if custom_query (nullable) is None
        # and model_fields_set contains the field
        if self.custom_query is None and "custom_query" in self.model_fields_set:
            _dict['custom_query'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "format": obj.get("format"),
            "user_id": obj.get("user_id"),
            "conversation_id": obj.get("conversation_id"),
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "include_metadata": obj.get("include_metadata") if obj.get("include_metadata") is not None else True,
            "compress": obj.get("compress") if obj.get("compress") is not None else True,
            "encrypt": obj.get("encrypt") if obj.get("encrypt") is not None else False,
            "custom_query": obj.get("custom_query")
        })
        return _obj


