"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from chatter_sdk.models.job_priority import JobPriority
from pydantic import BaseModel, ConfigDict, Field, StrictStr


class JobCreateRequest(BaseModel):
    """
    Request schema for creating a job.
    """  # noqa: E501

    name: StrictStr = Field(description="Job name")
    function_name: StrictStr = Field(description="Function to execute")
    args: list[Any] | None = Field(
        default=None, description="Function arguments"
    )
    kwargs: dict[str, Any] | None = Field(
        default=None, description="Function keyword arguments"
    )
    priority: JobPriority | None = None
    max_retries: (
        Annotated[int, Field(le=10, strict=True, ge=0)] | None
    ) = Field(default=3, description="Maximum retry attempts")
    schedule_at: datetime | None = None
    __properties: ClassVar[list[str]] = [
        "name",
        "function_name",
        "args",
        "kwargs",
        "priority",
        "max_retries",
        "schedule_at",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of JobCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if schedule_at (nullable) is None
        # and model_fields_set contains the field
        if (
            self.schedule_at is None
            and "schedule_at" in self.model_fields_set
        ):
            _dict['schedule_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of JobCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "function_name": obj.get("function_name"),
                "args": obj.get("args"),
                "kwargs": obj.get("kwargs"),
                "priority": obj.get("priority"),
                "max_retries": (
                    obj.get("max_retries")
                    if obj.get("max_retries") is not None
                    else 3
                ),
                "schedule_at": obj.get("schedule_at"),
            }
        )
        return _obj
