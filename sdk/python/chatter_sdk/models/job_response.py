
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar
from typing import Annotated
from chatter_sdk.models.job_priority import JobPriority
from chatter_sdk.models.job_status import JobStatus
from typing import Self

class JobResponse(BaseModel):
    """
    Response schema for job data.
    """ # noqa: E501
    id: StrictStr = Field(description="Job ID")
    name: StrictStr = Field(description="Job name")
    function_name: StrictStr = Field(description="Function name")
    priority: JobPriority
    status: JobStatus
    created_at: datetime = Field(description="Creation timestamp")
    started_at: datetime | None = None
    completed_at: datetime | None = None
    scheduled_at: datetime | None = None
    retry_count: StrictInt = Field(description="Number of retry attempts")
    max_retries: StrictInt = Field(description="Maximum retry attempts")
    error_message: StrictStr | None = None
    result: Any | None = Field(default=None, description="Job result if completed")
    progress: Annotated[int, Field(le=100, strict=True, ge=0)] | None = Field(default=0, description="Job progress percentage")
    progress_message: StrictStr | None = None
    __properties: ClassVar[list[str]] = ["id", "name", "function_name", "priority", "status", "created_at", "started_at", "completed_at", "scheduled_at", "retry_count", "max_retries", "error_message", "result", "progress", "progress_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if scheduled_at (nullable) is None
        # and model_fields_set contains the field
        if self.scheduled_at is None and "scheduled_at" in self.model_fields_set:
            _dict['scheduled_at'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if result (nullable) is None
        # and model_fields_set contains the field
        if self.result is None and "result" in self.model_fields_set:
            _dict['result'] = None

        # set to None if progress_message (nullable) is None
        # and model_fields_set contains the field
        if self.progress_message is None and "progress_message" in self.model_fields_set:
            _dict['progress_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "function_name": obj.get("function_name"),
            "priority": obj.get("priority"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "scheduled_at": obj.get("scheduled_at"),
            "retry_count": obj.get("retry_count"),
            "max_retries": obj.get("max_retries"),
            "error_message": obj.get("error_message"),
            "result": AnyOf.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "progress": obj.get("progress") if obj.get("progress") is not None else 0,
            "progress_message": obj.get("progress_message")
        })
        return _obj


