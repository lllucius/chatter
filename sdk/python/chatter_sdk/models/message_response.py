# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from chatter_sdk.models.message_role import MessageRole
from typing import Optional, Set
from typing_extensions import Self

class MessageResponse(BaseModel):
    """
    Schema for message response.
    """ # noqa: E501
    role: MessageRole
    content: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Message content")
    id: StrictStr = Field(description="Message ID")
    conversation_id: StrictStr = Field(description="Conversation ID")
    sequence_number: StrictInt = Field(description="Message sequence number")
    prompt_tokens: Optional[StrictInt] = None
    completion_tokens: Optional[StrictInt] = None
    total_tokens: Optional[StrictInt] = None
    model_used: Optional[StrictStr] = None
    provider_used: Optional[StrictStr] = None
    response_time_ms: Optional[StrictInt] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    finish_reason: Optional[StrictStr] = None
    rating: Optional[Union[Annotated[float, Field(le=5.0, strict=True, ge=0.0)], Annotated[int, Field(le=5, strict=True, ge=0)]]] = None
    rating_count: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=0, description="Number of ratings for the message")
    created_at: datetime = Field(description="Creation timestamp")
    __properties: ClassVar[List[str]] = ["role", "content", "id", "conversation_id", "sequence_number", "prompt_tokens", "completion_tokens", "total_tokens", "model_used", "provider_used", "response_time_ms", "cost", "finish_reason", "rating", "rating_count", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # set to None if prompt_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.prompt_tokens is None and "prompt_tokens" in self.model_fields_set:
            _dict['prompt_tokens'] = None

        # set to None if completion_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.completion_tokens is None and "completion_tokens" in self.model_fields_set:
            _dict['completion_tokens'] = None

        # set to None if total_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.total_tokens is None and "total_tokens" in self.model_fields_set:
            _dict['total_tokens'] = None

        # set to None if model_used (nullable) is None
        # and model_fields_set contains the field
        if self.model_used is None and "model_used" in self.model_fields_set:
            _dict['model_used'] = None

        # set to None if provider_used (nullable) is None
        # and model_fields_set contains the field
        if self.provider_used is None and "provider_used" in self.model_fields_set:
            _dict['provider_used'] = None

        # set to None if response_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.response_time_ms is None and "response_time_ms" in self.model_fields_set:
            _dict['response_time_ms'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if finish_reason (nullable) is None
        # and model_fields_set contains the field
        if self.finish_reason is None and "finish_reason" in self.model_fields_set:
            _dict['finish_reason'] = None

        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "content": obj.get("content"),
            "id": obj.get("id"),
            "conversation_id": obj.get("conversation_id"),
            "sequence_number": obj.get("sequence_number"),
            "prompt_tokens": obj.get("prompt_tokens"),
            "completion_tokens": obj.get("completion_tokens"),
            "total_tokens": obj.get("total_tokens"),
            "model_used": obj.get("model_used"),
            "provider_used": obj.get("provider_used"),
            "response_time_ms": obj.get("response_time_ms"),
            "cost": obj.get("cost"),
            "finish_reason": obj.get("finish_reason"),
            "rating": obj.get("rating"),
            "rating_count": obj.get("rating_count") if obj.get("rating_count") is not None else 0,
            "created_at": obj.get("created_at")
        })
        return _obj


