
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictStr,
    field_validator,
)
from typing import Annotated, Self

from chatter_sdk.models.model_type import ModelType


class ModelDefCreate(BaseModel):
    """
    Schema for creating a model definition.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Model name")
    model_type: ModelType
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="Human-readable name")
    description: Annotated[str, Field(strict=True, max_length=1000)] | None = None
    model_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="Actual model name for API calls")
    max_tokens: Annotated[int, Field(le=1000000, strict=True)] | None = None
    context_length: Annotated[int, Field(le=10000000, strict=True)] | None = None
    dimensions: Annotated[int, Field(le=10000, strict=True)] | None = None
    chunk_size: Annotated[int, Field(le=100000, strict=True)] | None = None
    supports_batch: StrictBool | None = Field(default=False, description="Whether model supports batch operations")
    max_batch_size: Annotated[int, Field(le=10000, strict=True)] | None = None
    default_config: dict[str, Any] | None = Field(default=None, description="Default configuration")
    is_active: StrictBool | None = Field(default=True, description="Whether model is active")
    is_default: StrictBool | None = Field(default=False, description="Whether this is the default model")
    provider_id: StrictStr = Field(description="Provider ID")
    __properties: ClassVar[list[str]] = ["name", "model_type", "display_name", "description", "model_name", "max_tokens", "context_length", "dimensions", "chunk_size", "supports_batch", "max_batch_size", "default_config", "is_active", "is_default", "provider_id"]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ModelDefCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.max_tokens is None and "max_tokens" in self.model_fields_set:
            _dict["max_tokens"] = None

        # set to None if context_length (nullable) is None
        # and model_fields_set contains the field
        if self.context_length is None and "context_length" in self.model_fields_set:
            _dict["context_length"] = None

        # set to None if dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.dimensions is None and "dimensions" in self.model_fields_set:
            _dict["dimensions"] = None

        # set to None if chunk_size (nullable) is None
        # and model_fields_set contains the field
        if self.chunk_size is None and "chunk_size" in self.model_fields_set:
            _dict["chunk_size"] = None

        # set to None if max_batch_size (nullable) is None
        # and model_fields_set contains the field
        if self.max_batch_size is None and "max_batch_size" in self.model_fields_set:
            _dict["max_batch_size"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ModelDefCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "model_type": obj.get("model_type"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "model_name": obj.get("model_name"),
            "max_tokens": obj.get("max_tokens"),
            "context_length": obj.get("context_length"),
            "dimensions": obj.get("dimensions"),
            "chunk_size": obj.get("chunk_size"),
            "supports_batch": obj.get("supports_batch") if obj.get("supports_batch") is not None else False,
            "max_batch_size": obj.get("max_batch_size"),
            "default_config": obj.get("default_config"),
            "is_active": obj.get("is_active") if obj.get("is_active") is not None else True,
            "is_default": obj.get("is_default") if obj.get("is_default") is not None else False,
            "provider_id": obj.get("provider_id")
        })
        return _obj


