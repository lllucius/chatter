
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
)
from typing import Self


class PerformanceMetricsResponse(BaseModel):
    """
    Schema for performance metrics response.
    """ # noqa: E501
    avg_response_time_ms: StrictFloat | StrictInt = Field(description="Average response time")
    median_response_time_ms: StrictFloat | StrictInt = Field(description="Median response time")
    p95_response_time_ms: StrictFloat | StrictInt = Field(description="95th percentile response time")
    p99_response_time_ms: StrictFloat | StrictInt = Field(description="99th percentile response time")
    requests_per_minute: StrictFloat | StrictInt = Field(description="Average requests per minute")
    tokens_per_minute: StrictFloat | StrictInt = Field(description="Average tokens per minute")
    total_errors: StrictInt = Field(description="Total number of errors")
    error_rate: StrictFloat | StrictInt = Field(description="Error rate percentage")
    errors_by_type: dict[str, StrictInt] = Field(description="Errors grouped by type")
    performance_by_model: dict[str, dict[str, StrictFloat | StrictInt]] = Field(description="Performance metrics by model")
    performance_by_provider: dict[str, dict[str, StrictFloat | StrictInt]] = Field(description="Performance metrics by provider")
    database_response_time_ms: StrictFloat | StrictInt = Field(description="Average database response time")
    vector_search_time_ms: StrictFloat | StrictInt = Field(description="Average vector search time")
    embedding_generation_time_ms: StrictFloat | StrictInt = Field(description="Average embedding generation time")
    __properties: ClassVar[list[str]] = ["avg_response_time_ms", "median_response_time_ms", "p95_response_time_ms", "p99_response_time_ms", "requests_per_minute", "tokens_per_minute", "total_errors", "error_rate", "errors_by_type", "performance_by_model", "performance_by_provider", "database_response_time_ms", "vector_search_time_ms", "embedding_generation_time_ms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of PerformanceMetricsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of PerformanceMetricsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avg_response_time_ms": obj.get("avg_response_time_ms"),
            "median_response_time_ms": obj.get("median_response_time_ms"),
            "p95_response_time_ms": obj.get("p95_response_time_ms"),
            "p99_response_time_ms": obj.get("p99_response_time_ms"),
            "requests_per_minute": obj.get("requests_per_minute"),
            "tokens_per_minute": obj.get("tokens_per_minute"),
            "total_errors": obj.get("total_errors"),
            "error_rate": obj.get("error_rate"),
            "errors_by_type": obj.get("errors_by_type"),
            "performance_by_model": obj.get("performance_by_model"),
            "performance_by_provider": obj.get("performance_by_provider"),
            "database_response_time_ms": obj.get("database_response_time_ms"),
            "vector_search_time_ms": obj.get("vector_search_time_ms"),
            "embedding_generation_time_ms": obj.get("embedding_generation_time_ms")
        })
        return _obj


