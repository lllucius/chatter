# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class PerformanceStatsResponse(BaseModel):
    """
    Schema for performance statistics response.
    """ # noqa: E501
    total_executions: StrictInt = Field(description="Total number of executions")
    avg_execution_time_ms: StrictInt = Field(description="Average execution time in milliseconds")
    min_execution_time_ms: StrictInt = Field(description="Minimum execution time in milliseconds")
    max_execution_time_ms: StrictInt = Field(description="Maximum execution time in milliseconds")
    workflow_types: Dict[str, StrictInt] = Field(description="Execution count by workflow type")
    error_counts: Dict[str, StrictInt] = Field(description="Error count by type")
    cache_stats: Dict[str, Any] = Field(description="Cache statistics")
    tool_stats: Dict[str, Any] = Field(description="Tool usage statistics")
    timestamp: Union[StrictFloat, StrictInt] = Field(description="Statistics timestamp")
    __properties: ClassVar[List[str]] = ["total_executions", "avg_execution_time_ms", "min_execution_time_ms", "max_execution_time_ms", "workflow_types", "error_counts", "cache_stats", "tool_stats", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_executions": obj.get("total_executions"),
            "avg_execution_time_ms": obj.get("avg_execution_time_ms"),
            "min_execution_time_ms": obj.get("min_execution_time_ms"),
            "max_execution_time_ms": obj.get("max_execution_time_ms"),
            "workflow_types": obj.get("workflow_types"),
            "error_counts": obj.get("error_counts"),
            "cache_stats": obj.get("cache_stats"),
            "tool_stats": obj.get("tool_stats"),
            "timestamp": obj.get("timestamp")
        })
        return _obj


