# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chatter_sdk.models.plugin_status import PluginStatus
from chatter_sdk.models.plugin_type import PluginType
from typing import Optional, Set
from typing_extensions import Self

class PluginResponse(BaseModel):
    """
    Response schema for plugin data.
    """ # noqa: E501
    id: StrictStr = Field(description="Plugin ID")
    name: StrictStr = Field(description="Plugin name")
    version: StrictStr = Field(description="Plugin version")
    description: StrictStr = Field(description="Plugin description")
    author: StrictStr = Field(description="Plugin author")
    plugin_type: PluginType
    status: PluginStatus
    entry_point: StrictStr = Field(description="Plugin entry point")
    capabilities: List[Dict[str, Any]] = Field(description="Plugin capabilities")
    dependencies: List[StrictStr] = Field(description="Plugin dependencies")
    permissions: List[StrictStr] = Field(description="Required permissions")
    enabled: StrictBool = Field(description="Whether plugin is enabled")
    error_message: Optional[StrictStr] = None
    installed_at: datetime = Field(description="Installation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    metadata: Dict[str, Any] = Field(description="Additional metadata")
    __properties: ClassVar[List[str]] = ["id", "name", "version", "description", "author", "plugin_type", "status", "entry_point", "capabilities", "dependencies", "permissions", "enabled", "error_message", "installed_at", "updated_at", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PluginResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PluginResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "author": obj.get("author"),
            "plugin_type": obj.get("plugin_type"),
            "status": obj.get("status"),
            "entry_point": obj.get("entry_point"),
            "capabilities": obj.get("capabilities"),
            "dependencies": obj.get("dependencies"),
            "permissions": obj.get("permissions"),
            "enabled": obj.get("enabled"),
            "error_message": obj.get("error_message"),
            "installed_at": obj.get("installed_at"),
            "updated_at": obj.get("updated_at"),
            "metadata": obj.get("metadata")
        })
        return _obj


