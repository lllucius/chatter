"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Self

from chatter_sdk.models.profile_response import ProfileResponse
from pydantic import BaseModel, ConfigDict, Field, StrictInt


class ProfileStatsResponse(BaseModel):
    """
    Schema for profile statistics response.
    """  # noqa: E501

    total_profiles: StrictInt = Field(
        description="Total number of profiles"
    )
    profiles_by_type: dict[str, StrictInt] = Field(
        description="Profiles grouped by type"
    )
    profiles_by_provider: dict[str, StrictInt] = Field(
        description="Profiles grouped by LLM provider"
    )
    most_used_profiles: list[ProfileResponse] = Field(
        description="Most frequently used profiles"
    )
    recent_profiles: list[ProfileResponse] = Field(
        description="Recently created profiles"
    )
    usage_stats: dict[str, Any] = Field(description="Usage statistics")
    __properties: ClassVar[list[str]] = [
        "total_profiles",
        "profiles_by_type",
        "profiles_by_provider",
        "most_used_profiles",
        "recent_profiles",
        "usage_stats",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ProfileStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in most_used_profiles (list)
        _items = []
        if self.most_used_profiles:
            for _item_most_used_profiles in self.most_used_profiles:
                if _item_most_used_profiles:
                    _items.append(_item_most_used_profiles.to_dict())
            _dict['most_used_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recent_profiles (list)
        _items = []
        if self.recent_profiles:
            for _item_recent_profiles in self.recent_profiles:
                if _item_recent_profiles:
                    _items.append(_item_recent_profiles.to_dict())
            _dict['recent_profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ProfileStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "total_profiles": obj.get("total_profiles"),
                "profiles_by_type": obj.get("profiles_by_type"),
                "profiles_by_provider": obj.get("profiles_by_provider"),
                "most_used_profiles": (
                    [
                        ProfileResponse.from_dict(_item)
                        for _item in obj["most_used_profiles"]
                    ]
                    if obj.get("most_used_profiles") is not None
                    else None
                ),
                "recent_profiles": (
                    [
                        ProfileResponse.from_dict(_item)
                        for _item in obj["recent_profiles"]
                    ]
                    if obj.get("recent_profiles") is not None
                    else None
                ),
                "usage_stats": obj.get("usage_stats"),
            }
        )
        return _obj
