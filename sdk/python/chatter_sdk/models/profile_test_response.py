# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProfileTestResponse(BaseModel):
    """
    Schema for profile test response.
    """ # noqa: E501
    profile_id: StrictStr = Field(description="Profile ID")
    test_message: StrictStr = Field(description="Test message sent")
    response: StrictStr = Field(description="Generated response")
    usage_info: Dict[str, Any] = Field(description="Token usage and cost information")
    response_time_ms: StrictInt = Field(description="Response time in milliseconds")
    retrieval_results: Optional[List[Dict[str, Any]]] = None
    tools_used: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["profile_id", "test_message", "response", "usage_info", "response_time_ms", "retrieval_results", "tools_used"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if retrieval_results (nullable) is None
        # and model_fields_set contains the field
        if self.retrieval_results is None and "retrieval_results" in self.model_fields_set:
            _dict['retrieval_results'] = None

        # set to None if tools_used (nullable) is None
        # and model_fields_set contains the field
        if self.tools_used is None and "tools_used" in self.model_fields_set:
            _dict['tools_used'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profile_id": obj.get("profile_id"),
            "test_message": obj.get("test_message"),
            "response": obj.get("response"),
            "usage_info": obj.get("usage_info"),
            "response_time_ms": obj.get("response_time_ms"),
            "retrieval_results": obj.get("retrieval_results"),
            "tools_used": obj.get("tools_used")
        })
        return _obj


