
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Self


class PromptTestResponse(BaseModel):
    """
    Schema for prompt test response.
    """ # noqa: E501
    rendered_content: StrictStr | None = None
    validation_result: dict[str, Any] = Field(description="Validation results")
    estimated_tokens: StrictInt | None = None
    test_duration_ms: StrictInt = Field(description="Test execution time")
    template_variables_used: list[StrictStr] = Field(description="Template variables actually used")
    security_warnings: list[StrictStr] | None = Field(default=None, description="Security warnings if any")
    performance_metrics: dict[str, Any] | None = None
    __properties: ClassVar[list[str]] = ["rendered_content", "validation_result", "estimated_tokens", "test_duration_ms", "template_variables_used", "security_warnings", "performance_metrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of PromptTestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rendered_content (nullable) is None
        # and model_fields_set contains the field
        if self.rendered_content is None and "rendered_content" in self.model_fields_set:
            _dict["rendered_content"] = None

        # set to None if estimated_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_tokens is None and "estimated_tokens" in self.model_fields_set:
            _dict["estimated_tokens"] = None

        # set to None if performance_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.performance_metrics is None and "performance_metrics" in self.model_fields_set:
            _dict["performance_metrics"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of PromptTestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rendered_content": obj.get("rendered_content"),
            "validation_result": obj.get("validation_result"),
            "estimated_tokens": obj.get("estimated_tokens"),
            "test_duration_ms": obj.get("test_duration_ms"),
            "template_variables_used": obj.get("template_variables_used"),
            "security_warnings": obj.get("security_warnings"),
            "performance_metrics": obj.get("performance_metrics")
        })
        return _obj


