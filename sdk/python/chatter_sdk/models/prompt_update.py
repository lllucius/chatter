
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Annotated, Self

from chatter_sdk.models.prompt_category import PromptCategory
from chatter_sdk.models.prompt_type import PromptType


class PromptUpdate(BaseModel):
    """
    Schema for updating a prompt.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] | None = None
    description: StrictStr | None = None
    prompt_type: PromptType | None = None
    category: PromptCategory | None = None
    content: Annotated[str, Field(min_length=1, strict=True)] | None = None
    variables: list[StrictStr] | None = None
    template_format: StrictStr | None = None
    input_schema: dict[str, Any] | None = None
    output_schema: dict[str, Any] | None = None
    max_length: Annotated[int, Field(strict=True, ge=1)] | None = None
    min_length: Annotated[int, Field(strict=True, ge=1)] | None = None
    required_variables: list[StrictStr] | None = None
    examples: list[dict[str, Any]] | None = None
    test_cases: list[dict[str, Any]] | None = None
    suggested_temperature: Annotated[float, Field(le=2.0, strict=True, ge=0.0)] | Annotated[int, Field(le=2, strict=True, ge=0)] | None = None
    suggested_max_tokens: Annotated[int, Field(strict=True, ge=1)] | None = None
    suggested_providers: list[StrictStr] | None = None
    is_chain: StrictBool | None = None
    chain_steps: list[dict[str, Any]] | None = None
    parent_prompt_id: StrictStr | None = None
    is_public: StrictBool | None = None
    tags: list[StrictStr] | None = None
    extra_metadata: dict[str, Any] | None = None
    __properties: ClassVar[list[str]] = ["name", "description", "prompt_type", "category", "content", "variables", "template_format", "input_schema", "output_schema", "max_length", "min_length", "required_variables", "examples", "test_cases", "suggested_temperature", "suggested_max_tokens", "suggested_providers", "is_chain", "chain_steps", "parent_prompt_id", "is_public", "tags", "extra_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of PromptUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if prompt_type (nullable) is None
        # and model_fields_set contains the field
        if self.prompt_type is None and "prompt_type" in self.model_fields_set:
            _dict["prompt_type"] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict["category"] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict["content"] = None

        # set to None if variables (nullable) is None
        # and model_fields_set contains the field
        if self.variables is None and "variables" in self.model_fields_set:
            _dict["variables"] = None

        # set to None if template_format (nullable) is None
        # and model_fields_set contains the field
        if self.template_format is None and "template_format" in self.model_fields_set:
            _dict["template_format"] = None

        # set to None if input_schema (nullable) is None
        # and model_fields_set contains the field
        if self.input_schema is None and "input_schema" in self.model_fields_set:
            _dict["input_schema"] = None

        # set to None if output_schema (nullable) is None
        # and model_fields_set contains the field
        if self.output_schema is None and "output_schema" in self.model_fields_set:
            _dict["output_schema"] = None

        # set to None if max_length (nullable) is None
        # and model_fields_set contains the field
        if self.max_length is None and "max_length" in self.model_fields_set:
            _dict["max_length"] = None

        # set to None if min_length (nullable) is None
        # and model_fields_set contains the field
        if self.min_length is None and "min_length" in self.model_fields_set:
            _dict["min_length"] = None

        # set to None if required_variables (nullable) is None
        # and model_fields_set contains the field
        if self.required_variables is None and "required_variables" in self.model_fields_set:
            _dict["required_variables"] = None

        # set to None if examples (nullable) is None
        # and model_fields_set contains the field
        if self.examples is None and "examples" in self.model_fields_set:
            _dict["examples"] = None

        # set to None if test_cases (nullable) is None
        # and model_fields_set contains the field
        if self.test_cases is None and "test_cases" in self.model_fields_set:
            _dict["test_cases"] = None

        # set to None if suggested_temperature (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_temperature is None and "suggested_temperature" in self.model_fields_set:
            _dict["suggested_temperature"] = None

        # set to None if suggested_max_tokens (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_max_tokens is None and "suggested_max_tokens" in self.model_fields_set:
            _dict["suggested_max_tokens"] = None

        # set to None if suggested_providers (nullable) is None
        # and model_fields_set contains the field
        if self.suggested_providers is None and "suggested_providers" in self.model_fields_set:
            _dict["suggested_providers"] = None

        # set to None if is_chain (nullable) is None
        # and model_fields_set contains the field
        if self.is_chain is None and "is_chain" in self.model_fields_set:
            _dict["is_chain"] = None

        # set to None if chain_steps (nullable) is None
        # and model_fields_set contains the field
        if self.chain_steps is None and "chain_steps" in self.model_fields_set:
            _dict["chain_steps"] = None

        # set to None if parent_prompt_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_prompt_id is None and "parent_prompt_id" in self.model_fields_set:
            _dict["parent_prompt_id"] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if self.is_public is None and "is_public" in self.model_fields_set:
            _dict["is_public"] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict["tags"] = None

        # set to None if extra_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.extra_metadata is None and "extra_metadata" in self.model_fields_set:
            _dict["extra_metadata"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of PromptUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "prompt_type": obj.get("prompt_type"),
            "category": obj.get("category"),
            "content": obj.get("content"),
            "variables": obj.get("variables"),
            "template_format": obj.get("template_format"),
            "input_schema": obj.get("input_schema"),
            "output_schema": obj.get("output_schema"),
            "max_length": obj.get("max_length"),
            "min_length": obj.get("min_length"),
            "required_variables": obj.get("required_variables"),
            "examples": obj.get("examples"),
            "test_cases": obj.get("test_cases"),
            "suggested_temperature": obj.get("suggested_temperature"),
            "suggested_max_tokens": obj.get("suggested_max_tokens"),
            "suggested_providers": obj.get("suggested_providers"),
            "is_chain": obj.get("is_chain"),
            "chain_steps": obj.get("chain_steps"),
            "parent_prompt_id": obj.get("parent_prompt_id"),
            "is_public": obj.get("is_public"),
            "tags": obj.get("tags"),
            "extra_metadata": obj.get("extra_metadata")
        })
        return _obj


