"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool


class ProviderUpdate(BaseModel):
    """
    Schema for updating a provider.
    """  # noqa: E501

    display_name: (
        Annotated[str, Field(min_length=1, strict=True, max_length=200)]
        | None
    ) = None
    description: (
        Annotated[str, Field(strict=True, max_length=1000)] | None
    ) = None
    api_key_required: StrictBool | None = None
    base_url: (
        Annotated[str, Field(strict=True, max_length=500)] | None
    ) = None
    default_config: dict[str, Any] | None = None
    is_active: StrictBool | None = None
    is_default: StrictBool | None = None
    __properties: ClassVar[list[str]] = [
        "display_name",
        "description",
        "api_key_required",
        "base_url",
        "default_config",
        "is_active",
        "is_default",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ProviderUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if display_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.display_name is None
            and "display_name" in self.model_fields_set
        ):
            _dict['display_name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if (
            self.description is None
            and "description" in self.model_fields_set
        ):
            _dict['description'] = None

        # set to None if api_key_required (nullable) is None
        # and model_fields_set contains the field
        if (
            self.api_key_required is None
            and "api_key_required" in self.model_fields_set
        ):
            _dict['api_key_required'] = None

        # set to None if base_url (nullable) is None
        # and model_fields_set contains the field
        if (
            self.base_url is None
            and "base_url" in self.model_fields_set
        ):
            _dict['base_url'] = None

        # set to None if default_config (nullable) is None
        # and model_fields_set contains the field
        if (
            self.default_config is None
            and "default_config" in self.model_fields_set
        ):
            _dict['default_config'] = None

        # set to None if is_active (nullable) is None
        # and model_fields_set contains the field
        if (
            self.is_active is None
            and "is_active" in self.model_fields_set
        ):
            _dict['is_active'] = None

        # set to None if is_default (nullable) is None
        # and model_fields_set contains the field
        if (
            self.is_default is None
            and "is_default" in self.model_fields_set
        ):
            _dict['is_default'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ProviderUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "display_name": obj.get("display_name"),
                "description": obj.get("description"),
                "api_key_required": obj.get("api_key_required"),
                "base_url": obj.get("base_url"),
                "default_config": obj.get("default_config"),
                "is_active": obj.get("is_active"),
                "is_default": obj.get("is_default"),
            }
        )
        return _obj
