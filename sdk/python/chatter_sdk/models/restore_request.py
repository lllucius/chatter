
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Self


class RestoreRequest(BaseModel):
    """
    Request schema for restoring from backup.
    """ # noqa: E501
    backup_id: StrictStr = Field(description="Backup ID to restore from")
    restore_options: dict[str, Any] | None = Field(default=None, description="Restore options")
    create_backup_before_restore: StrictBool | None = Field(default=True, description="Create backup before restore")
    verify_integrity: StrictBool | None = Field(default=True, description="Verify backup integrity before restore")
    __properties: ClassVar[list[str]] = ["backup_id", "restore_options", "create_backup_before_restore", "verify_integrity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of RestoreRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of RestoreRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backup_id": obj.get("backup_id"),
            "restore_options": obj.get("restore_options"),
            "create_backup_before_restore": obj.get("create_backup_before_restore") if obj.get("create_backup_before_restore") is not None else True,
            "verify_integrity": obj.get("verify_integrity") if obj.get("verify_integrity") is not None else True
        })
        return _obj


