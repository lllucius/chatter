# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RetrievalConfig(BaseModel):
    """
    Retrieval configuration for RAG workflows.
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Enable retrieval")
    max_documents: Optional[Annotated[int, Field(le=20, strict=True, ge=1)]] = Field(default=5, description="Max documents to retrieve")
    similarity_threshold: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=0.7, description="Similarity threshold")
    document_ids: Optional[List[StrictStr]] = None
    collections: Optional[List[StrictStr]] = None
    rerank: Optional[StrictBool] = Field(default=False, description="Enable reranking")
    __properties: ClassVar[List[str]] = ["enabled", "max_documents", "similarity_threshold", "document_ids", "collections", "rerank"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetrievalConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if document_ids (nullable) is None
        # and model_fields_set contains the field
        if self.document_ids is None and "document_ids" in self.model_fields_set:
            _dict['document_ids'] = None

        # set to None if collections (nullable) is None
        # and model_fields_set contains the field
        if self.collections is None and "collections" in self.model_fields_set:
            _dict['collections'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetrievalConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "max_documents": obj.get("max_documents") if obj.get("max_documents") is not None else 5,
            "similarity_threshold": obj.get("similarity_threshold") if obj.get("similarity_threshold") is not None else 0.7,
            "document_ids": obj.get("document_ids"),
            "collections": obj.get("collections"),
            "rerank": obj.get("rerank") if obj.get("rerank") is not None else False
        })
        return _obj


