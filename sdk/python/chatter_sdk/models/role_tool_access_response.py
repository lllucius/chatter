# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.tool_access_level import ToolAccessLevel
from chatter_sdk.models.user_role import UserRole
from typing import Optional, Set
from typing_extensions import Self

class RoleToolAccessResponse(BaseModel):
    """
    Schema for role-based tool access response.
    """ # noqa: E501
    role: UserRole
    tool_pattern: Optional[StrictStr] = None
    server_pattern: Optional[StrictStr] = None
    access_level: ToolAccessLevel
    default_rate_limit_per_hour: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    default_rate_limit_per_day: Optional[Annotated[int, Field(strict=True, ge=0)]] = None
    allowed_hours: Optional[List[StrictInt]] = None
    allowed_days: Optional[List[StrictInt]] = None
    id: StrictStr = Field(description="Access rule ID")
    created_by: StrictStr = Field(description="Creator user ID")
    created_at: datetime = Field(description="Creation timestamp")
    __properties: ClassVar[List[str]] = ["role", "tool_pattern", "server_pattern", "access_level", "default_rate_limit_per_hour", "default_rate_limit_per_day", "allowed_hours", "allowed_days", "id", "created_by", "created_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleToolAccessResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tool_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.tool_pattern is None and "tool_pattern" in self.model_fields_set:
            _dict['tool_pattern'] = None

        # set to None if server_pattern (nullable) is None
        # and model_fields_set contains the field
        if self.server_pattern is None and "server_pattern" in self.model_fields_set:
            _dict['server_pattern'] = None

        # set to None if default_rate_limit_per_hour (nullable) is None
        # and model_fields_set contains the field
        if self.default_rate_limit_per_hour is None and "default_rate_limit_per_hour" in self.model_fields_set:
            _dict['default_rate_limit_per_hour'] = None

        # set to None if default_rate_limit_per_day (nullable) is None
        # and model_fields_set contains the field
        if self.default_rate_limit_per_day is None and "default_rate_limit_per_day" in self.model_fields_set:
            _dict['default_rate_limit_per_day'] = None

        # set to None if allowed_hours (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_hours is None and "allowed_hours" in self.model_fields_set:
            _dict['allowed_hours'] = None

        # set to None if allowed_days (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_days is None and "allowed_days" in self.model_fields_set:
            _dict['allowed_days'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleToolAccessResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role": obj.get("role"),
            "tool_pattern": obj.get("tool_pattern"),
            "server_pattern": obj.get("server_pattern"),
            "access_level": obj.get("access_level"),
            "default_rate_limit_per_hour": obj.get("default_rate_limit_per_hour"),
            "default_rate_limit_per_day": obj.get("default_rate_limit_per_day"),
            "allowed_hours": obj.get("allowed_hours"),
            "allowed_days": obj.get("allowed_days"),
            "id": obj.get("id"),
            "created_by": obj.get("created_by"),
            "created_at": obj.get("created_at")
        })
        return _obj


