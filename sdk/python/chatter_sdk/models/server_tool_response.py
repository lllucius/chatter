
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing import Annotated, Self

from chatter_sdk.models.tool_status import ToolStatus


class ServerToolResponse(BaseModel):
    """
    Schema for server tool response.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Tool name")
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="Display name")
    description: StrictStr | None = None
    args_schema: dict[str, Any] | None = None
    bypass_when_unavailable: StrictBool | None = Field(default=False, description="Bypass when tool is unavailable")
    id: StrictStr = Field(description="Tool ID")
    server_id: StrictStr = Field(description="Server ID")
    status: ToolStatus
    is_available: StrictBool = Field(description="Tool availability")
    total_calls: StrictInt = Field(description="Total number of calls")
    total_errors: StrictInt = Field(description="Total number of errors")
    last_called: datetime | None = None
    last_error: StrictStr | None = None
    avg_response_time_ms: StrictFloat | StrictInt | None = None
    created_at: datetime = Field(description="Creation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    __properties: ClassVar[list[str]] = ["name", "display_name", "description", "args_schema", "bypass_when_unavailable", "id", "server_id", "status", "is_available", "total_calls", "total_errors", "last_called", "last_error", "avg_response_time_ms", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ServerToolResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if args_schema (nullable) is None
        # and model_fields_set contains the field
        if self.args_schema is None and "args_schema" in self.model_fields_set:
            _dict["args_schema"] = None

        # set to None if last_called (nullable) is None
        # and model_fields_set contains the field
        if self.last_called is None and "last_called" in self.model_fields_set:
            _dict["last_called"] = None

        # set to None if last_error (nullable) is None
        # and model_fields_set contains the field
        if self.last_error is None and "last_error" in self.model_fields_set:
            _dict["last_error"] = None

        # set to None if avg_response_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.avg_response_time_ms is None and "avg_response_time_ms" in self.model_fields_set:
            _dict["avg_response_time_ms"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ServerToolResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "args_schema": obj.get("args_schema"),
            "bypass_when_unavailable": obj.get("bypass_when_unavailable") if obj.get("bypass_when_unavailable") is not None else False,
            "id": obj.get("id"),
            "server_id": obj.get("server_id"),
            "status": obj.get("status"),
            "is_available": obj.get("is_available"),
            "total_calls": obj.get("total_calls"),
            "total_errors": obj.get("total_errors"),
            "last_called": obj.get("last_called"),
            "last_error": obj.get("last_error"),
            "avg_response_time_ms": obj.get("avg_response_time_ms"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


