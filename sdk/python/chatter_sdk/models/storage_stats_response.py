
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
)
from typing import Self


class StorageStatsResponse(BaseModel):
    """
    Response schema for storage statistics.
    """ # noqa: E501
    total_size: StrictInt = Field(description="Total storage used in bytes")
    database_size: StrictInt = Field(description="Database size in bytes")
    files_size: StrictInt = Field(description="Uploaded files size in bytes")
    backups_size: StrictInt = Field(description="Backups size in bytes")
    exports_size: StrictInt = Field(description="Exports size in bytes")
    total_records: StrictInt = Field(description="Total number of records")
    total_files: StrictInt = Field(description="Total number of files")
    total_backups: StrictInt = Field(description="Total number of backups")
    storage_by_type: dict[str, StrictInt] = Field(description="Storage usage by data type")
    storage_by_user: dict[str, StrictInt] = Field(description="Storage usage by user")
    growth_rate_mb_per_day: StrictFloat | StrictInt = Field(description="Storage growth rate in MB per day")
    projected_size_30_days: StrictInt = Field(description="Projected size in 30 days")
    last_updated: datetime = Field(description="Statistics last updated timestamp")
    __properties: ClassVar[list[str]] = ["total_size", "database_size", "files_size", "backups_size", "exports_size", "total_records", "total_files", "total_backups", "storage_by_type", "storage_by_user", "growth_rate_mb_per_day", "projected_size_30_days", "last_updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of StorageStatsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of StorageStatsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_size": obj.get("total_size"),
            "database_size": obj.get("database_size"),
            "files_size": obj.get("files_size"),
            "backups_size": obj.get("backups_size"),
            "exports_size": obj.get("exports_size"),
            "total_records": obj.get("total_records"),
            "total_files": obj.get("total_files"),
            "total_backups": obj.get("total_backups"),
            "storage_by_type": obj.get("storage_by_type"),
            "storage_by_user": obj.get("storage_by_user"),
            "growth_rate_mb_per_day": obj.get("growth_rate_mb_per_day"),
            "projected_size_30_days": obj.get("projected_size_30_days"),
            "last_updated": obj.get("last_updated")
        })
        return _obj


