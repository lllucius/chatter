
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
)
from typing import Self


class SystemAnalyticsResponse(BaseModel):
    """
    Schema for system analytics response.
    """ # noqa: E501
    total_users: StrictInt = Field(description="Total number of users")
    active_users_today: StrictInt = Field(description="Active users today")
    active_users_week: StrictInt = Field(description="Active users this week")
    active_users_month: StrictInt = Field(description="Active users this month")
    system_uptime_seconds: StrictFloat | StrictInt = Field(description="System uptime in seconds")
    avg_cpu_usage: StrictFloat | StrictInt = Field(description="Average CPU usage percentage")
    avg_memory_usage: StrictFloat | StrictInt = Field(description="Average memory usage percentage")
    database_connections: StrictInt = Field(description="Current database connections")
    total_api_requests: StrictInt = Field(description="Total API requests")
    requests_per_endpoint: dict[str, StrictInt] = Field(description="Requests by endpoint")
    avg_api_response_time: StrictFloat | StrictInt = Field(description="Average API response time")
    api_error_rate: StrictFloat | StrictInt = Field(description="API error rate")
    storage_usage_bytes: StrictInt = Field(description="Total storage usage")
    vector_database_size_bytes: StrictInt = Field(description="Vector database size")
    cache_hit_rate: StrictFloat | StrictInt = Field(description="Cache hit rate")
    __properties: ClassVar[list[str]] = ["total_users", "active_users_today", "active_users_week", "active_users_month", "system_uptime_seconds", "avg_cpu_usage", "avg_memory_usage", "database_connections", "total_api_requests", "requests_per_endpoint", "avg_api_response_time", "api_error_rate", "storage_usage_bytes", "vector_database_size_bytes", "cache_hit_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of SystemAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of SystemAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_users": obj.get("total_users"),
            "active_users_today": obj.get("active_users_today"),
            "active_users_week": obj.get("active_users_week"),
            "active_users_month": obj.get("active_users_month"),
            "system_uptime_seconds": obj.get("system_uptime_seconds"),
            "avg_cpu_usage": obj.get("avg_cpu_usage"),
            "avg_memory_usage": obj.get("avg_memory_usage"),
            "database_connections": obj.get("database_connections"),
            "total_api_requests": obj.get("total_api_requests"),
            "requests_per_endpoint": obj.get("requests_per_endpoint"),
            "avg_api_response_time": obj.get("avg_api_response_time"),
            "api_error_rate": obj.get("api_error_rate"),
            "storage_usage_bytes": obj.get("storage_usage_bytes"),
            "vector_database_size_bytes": obj.get("vector_database_size_bytes"),
            "cache_hit_rate": obj.get("cache_hit_rate")
        })
        return _obj


