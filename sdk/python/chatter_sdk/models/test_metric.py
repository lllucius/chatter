
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar
from chatter_sdk.models.metric_type import MetricType
from typing import Self

class TestMetric(BaseModel):
    """
    Test metric data.
    """ # noqa: E501
    metric_type: MetricType
    variant_name: StrictStr = Field(description="Variant name")
    value: StrictFloat | StrictInt = Field(description="Metric value")
    sample_size: StrictInt = Field(description="Sample size")
    confidence_interval: list[StrictFloat | StrictInt] | None = None
    __properties: ClassVar[list[str]] = ["metric_type", "variant_name", "value", "sample_size", "confidence_interval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of TestMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if confidence_interval (nullable) is None
        # and model_fields_set contains the field
        if self.confidence_interval is None and "confidence_interval" in self.model_fields_set:
            _dict['confidence_interval'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of TestMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metric_type": obj.get("metric_type"),
            "variant_name": obj.get("variant_name"),
            "value": obj.get("value"),
            "sample_size": obj.get("sample_size"),
            "confidence_interval": obj.get("confidence_interval")
        })
        return _obj


