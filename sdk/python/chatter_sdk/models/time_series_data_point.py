# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TimeSeriesDataPoint(BaseModel):
    """
    Schema for time series chart data point.
    """ # noqa: E501
    var_date: StrictStr = Field(description="Date label (e.g., 'Mon', 'Jan 01')", alias="date")
    conversations: Optional[StrictInt] = None
    tokens: Optional[StrictInt] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    workflows: Optional[StrictInt] = None
    agents: Optional[StrictInt] = None
    ab_tests: Optional[StrictInt] = Field(default=None, alias="abTests")
    __properties: ClassVar[List[str]] = ["date", "conversations", "tokens", "cost", "workflows", "agents", "abTests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesDataPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if conversations (nullable) is None
        # and model_fields_set contains the field
        if self.conversations is None and "conversations" in self.model_fields_set:
            _dict['conversations'] = None

        # set to None if tokens (nullable) is None
        # and model_fields_set contains the field
        if self.tokens is None and "tokens" in self.model_fields_set:
            _dict['tokens'] = None

        # set to None if cost (nullable) is None
        # and model_fields_set contains the field
        if self.cost is None and "cost" in self.model_fields_set:
            _dict['cost'] = None

        # set to None if workflows (nullable) is None
        # and model_fields_set contains the field
        if self.workflows is None and "workflows" in self.model_fields_set:
            _dict['workflows'] = None

        # set to None if agents (nullable) is None
        # and model_fields_set contains the field
        if self.agents is None and "agents" in self.model_fields_set:
            _dict['agents'] = None

        # set to None if ab_tests (nullable) is None
        # and model_fields_set contains the field
        if self.ab_tests is None and "ab_tests" in self.model_fields_set:
            _dict['abTests'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesDataPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "conversations": obj.get("conversations"),
            "tokens": obj.get("tokens"),
            "cost": obj.get("cost"),
            "workflows": obj.get("workflows"),
            "agents": obj.get("agents"),
            "abTests": obj.get("abTests")
        })
        return _obj


