
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar
from chatter_sdk.models.tool_access_level import ToolAccessLevel
from typing import Self

class ToolAccessResult(BaseModel):
    """
    Schema for tool access check result.
    """ # noqa: E501
    allowed: StrictBool = Field(description="Whether access is allowed")
    access_level: ToolAccessLevel
    rate_limit_remaining_hour: StrictInt | None = None
    rate_limit_remaining_day: StrictInt | None = None
    restriction_reason: StrictStr | None = None
    expires_at: datetime | None = None
    __properties: ClassVar[list[str]] = ["allowed", "access_level", "rate_limit_remaining_hour", "rate_limit_remaining_day", "restriction_reason", "expires_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ToolAccessResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rate_limit_remaining_hour (nullable) is None
        # and model_fields_set contains the field
        if self.rate_limit_remaining_hour is None and "rate_limit_remaining_hour" in self.model_fields_set:
            _dict['rate_limit_remaining_hour'] = None

        # set to None if rate_limit_remaining_day (nullable) is None
        # and model_fields_set contains the field
        if self.rate_limit_remaining_day is None and "rate_limit_remaining_day" in self.model_fields_set:
            _dict['rate_limit_remaining_day'] = None

        # set to None if restriction_reason (nullable) is None
        # and model_fields_set contains the field
        if self.restriction_reason is None and "restriction_reason" in self.model_fields_set:
            _dict['restriction_reason'] = None

        # set to None if expires_at (nullable) is None
        # and model_fields_set contains the field
        if self.expires_at is None and "expires_at" in self.model_fields_set:
            _dict['expires_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ToolAccessResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed": obj.get("allowed"),
            "access_level": obj.get("access_level"),
            "rate_limit_remaining_hour": obj.get("rate_limit_remaining_hour"),
            "rate_limit_remaining_day": obj.get("rate_limit_remaining_day"),
            "restriction_reason": obj.get("restriction_reason"),
            "expires_at": obj.get("expires_at")
        })
        return _obj


