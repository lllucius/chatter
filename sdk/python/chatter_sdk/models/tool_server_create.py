# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.o_auth_config_schema import OAuthConfigSchema
from typing import Optional, Set
from typing_extensions import Self

class ToolServerCreate(BaseModel):
    """
    Schema for creating a tool server.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Server name")
    display_name: Annotated[str, Field(min_length=1, strict=True, max_length=200)] = Field(description="Display name")
    description: Optional[StrictStr] = None
    base_url: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2083)]] = None
    transport_type: Optional[Annotated[str, Field(strict=True)]] = Field(default='http', description="Transport type: http, sse, stdio, or websocket")
    oauth_config: Optional[OAuthConfigSchema] = None
    headers: Optional[Dict[str, StrictStr]] = None
    timeout: Optional[Annotated[int, Field(le=300, strict=True, ge=5)]] = Field(default=30, description="Request timeout in seconds")
    auto_start: Optional[StrictBool] = Field(default=True, description="Auto-connect to server on system startup")
    auto_update: Optional[StrictBool] = Field(default=True, description="Auto-update server capabilities")
    max_failures: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = Field(default=3, description="Maximum consecutive failures before disabling")
    __properties: ClassVar[List[str]] = ["name", "display_name", "description", "base_url", "transport_type", "oauth_config", "headers", "timeout", "auto_start", "auto_update", "max_failures"]

    @field_validator('transport_type')
    def transport_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(http|sse|stdio|websocket)$", value):
            raise ValueError(r"must validate the regular expression /^(http|sse|stdio|websocket)$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolServerCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth_config
        if self.oauth_config:
            _dict['oauth_config'] = self.oauth_config.to_dict()
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if base_url (nullable) is None
        # and model_fields_set contains the field
        if self.base_url is None and "base_url" in self.model_fields_set:
            _dict['base_url'] = None

        # set to None if oauth_config (nullable) is None
        # and model_fields_set contains the field
        if self.oauth_config is None and "oauth_config" in self.model_fields_set:
            _dict['oauth_config'] = None

        # set to None if headers (nullable) is None
        # and model_fields_set contains the field
        if self.headers is None and "headers" in self.model_fields_set:
            _dict['headers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolServerCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "display_name": obj.get("display_name"),
            "description": obj.get("description"),
            "base_url": obj.get("base_url"),
            "transport_type": obj.get("transport_type") if obj.get("transport_type") is not None else 'http',
            "oauth_config": OAuthConfigSchema.from_dict(obj["oauth_config"]) if obj.get("oauth_config") is not None else None,
            "headers": obj.get("headers"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 30,
            "auto_start": obj.get("auto_start") if obj.get("auto_start") is not None else True,
            "auto_update": obj.get("auto_update") if obj.get("auto_update") is not None else True,
            "max_failures": obj.get("max_failures") if obj.get("max_failures") is not None else 3
        })
        return _obj


