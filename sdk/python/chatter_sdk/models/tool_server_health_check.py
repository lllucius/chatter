"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Self

from chatter_sdk.models.server_status import ServerStatus
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
)


class ToolServerHealthCheck(BaseModel):
    """
    Schema for tool server health check.
    """  # noqa: E501

    server_id: StrictStr = Field(description="Server ID")
    server_name: StrictStr = Field(description="Server name")
    status: ServerStatus
    is_running: StrictBool = Field(
        description="Whether server is running"
    )
    is_responsive: StrictBool = Field(
        description="Whether server is responsive"
    )
    tools_count: StrictInt = Field(
        description="Number of available tools"
    )
    last_check: datetime = Field(description="Last health check time")
    error_message: StrictStr | None = None
    __properties: ClassVar[list[str]] = [
        "server_id",
        "server_name",
        "status",
        "is_running",
        "is_responsive",
        "tools_count",
        "last_check",
        "error_message",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ToolServerHealthCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if (
            self.error_message is None
            and "error_message" in self.model_fields_set
        ):
            _dict['error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ToolServerHealthCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "server_id": obj.get("server_id"),
                "server_name": obj.get("server_name"),
                "status": obj.get("status"),
                "is_running": obj.get("is_running"),
                "is_responsive": obj.get("is_responsive"),
                "tools_count": obj.get("tools_count"),
                "last_check": obj.get("last_check"),
                "error_message": obj.get("error_message"),
            }
        )
        return _obj
