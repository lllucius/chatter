# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from chatter_sdk.models.server_status import ServerStatus
from typing import Optional, Set
from typing_extensions import Self

class ToolServerMetrics(BaseModel):
    """
    Schema for tool server metrics.
    """ # noqa: E501
    server_id: StrictStr = Field(description="Server ID")
    server_name: StrictStr = Field(description="Server name")
    status: ServerStatus
    total_tools: StrictInt = Field(description="Total number of tools")
    enabled_tools: StrictInt = Field(description="Number of enabled tools")
    total_calls: StrictInt = Field(description="Total tool calls")
    total_errors: StrictInt = Field(description="Total errors")
    success_rate: Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(description="Success rate")
    avg_response_time_ms: Optional[Union[StrictFloat, StrictInt]] = None
    last_activity: Optional[datetime] = None
    uptime_percentage: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = None
    __properties: ClassVar[List[str]] = ["server_id", "server_name", "status", "total_tools", "enabled_tools", "total_calls", "total_errors", "success_rate", "avg_response_time_ms", "last_activity", "uptime_percentage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolServerMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # set to None if avg_response_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.avg_response_time_ms is None and "avg_response_time_ms" in self.model_fields_set:
            _dict['avg_response_time_ms'] = None

        # set to None if last_activity (nullable) is None
        # and model_fields_set contains the field
        if self.last_activity is None and "last_activity" in self.model_fields_set:
            _dict['last_activity'] = None

        # set to None if uptime_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.uptime_percentage is None and "uptime_percentage" in self.model_fields_set:
            _dict['uptime_percentage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolServerMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "server_id": obj.get("server_id"),
            "server_name": obj.get("server_name"),
            "status": obj.get("status"),
            "total_tools": obj.get("total_tools"),
            "enabled_tools": obj.get("enabled_tools"),
            "total_calls": obj.get("total_calls"),
            "total_errors": obj.get("total_errors"),
            "success_rate": obj.get("success_rate"),
            "avg_response_time_ms": obj.get("avg_response_time_ms"),
            "last_activity": obj.get("last_activity"),
            "uptime_percentage": obj.get("uptime_percentage")
        })
        return _obj


