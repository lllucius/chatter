"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Annotated, Any, ClassVar, Self

from chatter_sdk.models.o_auth_config_schema import OAuthConfigSchema
from chatter_sdk.models.server_status import ServerStatus
from chatter_sdk.models.server_tool_response import ServerToolResponse
from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)


class ToolServerResponse(BaseModel):
    """
    Schema for tool server response.
    """  # noqa: E501

    name: Annotated[
        str, Field(min_length=1, strict=True, max_length=100)
    ] = Field(description="Server name")
    display_name: Annotated[
        str, Field(min_length=1, strict=True, max_length=200)
    ] = Field(description="Display name")
    description: StrictStr | None = None
    base_url: (
        Annotated[
            str, Field(min_length=1, strict=True, max_length=2083)
        ]
        | None
    ) = None
    transport_type: Annotated[str, Field(strict=True)] | None = Field(
        default='http',
        description="Transport type: http, sse, stdio, or websocket",
    )
    oauth_config: OAuthConfigSchema | None = None
    headers: dict[str, StrictStr] | None = None
    timeout: Annotated[int, Field(le=300, strict=True, ge=5)] | None = (
        Field(default=30, description="Request timeout in seconds")
    )
    auto_start: StrictBool | None = Field(
        default=True,
        description="Auto-connect to server on system startup",
    )
    auto_update: StrictBool | None = Field(
        default=True, description="Auto-update server capabilities"
    )
    max_failures: (
        Annotated[int, Field(le=10, strict=True, ge=1)] | None
    ) = Field(
        default=3,
        description="Maximum consecutive failures before disabling",
    )
    id: StrictStr = Field(description="Server ID")
    status: ServerStatus
    is_builtin: StrictBool = Field(
        description="Whether server is built-in"
    )
    last_health_check: datetime | None = None
    last_startup_success: datetime | None = None
    last_startup_error: StrictStr | None = None
    consecutive_failures: StrictInt = Field(
        description="Consecutive failure count"
    )
    created_at: datetime = Field(description="Creation timestamp")
    updated_at: datetime = Field(description="Last update timestamp")
    created_by: StrictStr | None = None
    tools: list[ServerToolResponse] | None = Field(
        default=None, description="Server tools"
    )
    __properties: ClassVar[list[str]] = [
        "name",
        "display_name",
        "description",
        "base_url",
        "transport_type",
        "oauth_config",
        "headers",
        "timeout",
        "auto_start",
        "auto_update",
        "max_failures",
        "id",
        "status",
        "is_builtin",
        "last_health_check",
        "last_startup_success",
        "last_startup_error",
        "consecutive_failures",
        "created_at",
        "updated_at",
        "created_by",
        "tools",
    ]

    @field_validator('transport_type')
    def transport_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(http|sse|stdio|websocket)$", value):
            raise ValueError(
                r"must validate the regular expression /^(http|sse|stdio|websocket)$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ToolServerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth_config
        if self.oauth_config:
            _dict['oauth_config'] = self.oauth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if (
            self.description is None
            and "description" in self.model_fields_set
        ):
            _dict['description'] = None

        # set to None if base_url (nullable) is None
        # and model_fields_set contains the field
        if (
            self.base_url is None
            and "base_url" in self.model_fields_set
        ):
            _dict['base_url'] = None

        # set to None if oauth_config (nullable) is None
        # and model_fields_set contains the field
        if (
            self.oauth_config is None
            and "oauth_config" in self.model_fields_set
        ):
            _dict['oauth_config'] = None

        # set to None if headers (nullable) is None
        # and model_fields_set contains the field
        if self.headers is None and "headers" in self.model_fields_set:
            _dict['headers'] = None

        # set to None if last_health_check (nullable) is None
        # and model_fields_set contains the field
        if (
            self.last_health_check is None
            and "last_health_check" in self.model_fields_set
        ):
            _dict['last_health_check'] = None

        # set to None if last_startup_success (nullable) is None
        # and model_fields_set contains the field
        if (
            self.last_startup_success is None
            and "last_startup_success" in self.model_fields_set
        ):
            _dict['last_startup_success'] = None

        # set to None if last_startup_error (nullable) is None
        # and model_fields_set contains the field
        if (
            self.last_startup_error is None
            and "last_startup_error" in self.model_fields_set
        ):
            _dict['last_startup_error'] = None

        # set to None if created_by (nullable) is None
        # and model_fields_set contains the field
        if (
            self.created_by is None
            and "created_by" in self.model_fields_set
        ):
            _dict['created_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ToolServerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "display_name": obj.get("display_name"),
                "description": obj.get("description"),
                "base_url": obj.get("base_url"),
                "transport_type": (
                    obj.get("transport_type")
                    if obj.get("transport_type") is not None
                    else 'http'
                ),
                "oauth_config": (
                    OAuthConfigSchema.from_dict(obj["oauth_config"])
                    if obj.get("oauth_config") is not None
                    else None
                ),
                "headers": obj.get("headers"),
                "timeout": (
                    obj.get("timeout")
                    if obj.get("timeout") is not None
                    else 30
                ),
                "auto_start": (
                    obj.get("auto_start")
                    if obj.get("auto_start") is not None
                    else True
                ),
                "auto_update": (
                    obj.get("auto_update")
                    if obj.get("auto_update") is not None
                    else True
                ),
                "max_failures": (
                    obj.get("max_failures")
                    if obj.get("max_failures") is not None
                    else 3
                ),
                "id": obj.get("id"),
                "status": obj.get("status"),
                "is_builtin": obj.get("is_builtin"),
                "last_health_check": obj.get("last_health_check"),
                "last_startup_success": obj.get("last_startup_success"),
                "last_startup_error": obj.get("last_startup_error"),
                "consecutive_failures": obj.get("consecutive_failures"),
                "created_at": obj.get("created_at"),
                "updated_at": obj.get("updated_at"),
                "created_by": obj.get("created_by"),
                "tools": (
                    [
                        ServerToolResponse.from_dict(_item)
                        for _item in obj["tools"]
                    ]
                    if obj.get("tools") is not None
                    else None
                ),
            }
        )
        return _obj
