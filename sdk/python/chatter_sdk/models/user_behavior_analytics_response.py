# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class UserBehaviorAnalyticsResponse(BaseModel):
    """
    Schema for user behavior analytics response.
    """ # noqa: E501
    user_id: StrictStr = Field(description="User ID")
    session_count: StrictInt = Field(description="Number of sessions")
    page_views: StrictInt = Field(description="Total page views")
    time_spent_minutes: Union[StrictFloat, StrictInt] = Field(description="Total time spent in minutes")
    most_visited_pages: List[StrictStr] = Field(description="Most visited pages")
    user_journey: List[Dict[str, Any]] = Field(description="User journey data")
    conversion_events: List[Dict[str, Any]] = Field(description="Conversion events")
    __properties: ClassVar[List[str]] = ["user_id", "session_count", "page_views", "time_spent_minutes", "most_visited_pages", "user_journey", "conversion_events"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserBehaviorAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserBehaviorAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "user_id": obj.get("user_id"),
            "session_count": obj.get("session_count"),
            "page_views": obj.get("page_views"),
            "time_spent_minutes": obj.get("time_spent_minutes"),
            "most_visited_pages": obj.get("most_visited_pages"),
            "user_journey": obj.get("user_journey"),
            "conversion_events": obj.get("conversion_events")
        })
        return _obj


