# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from chatter_sdk.models.bottleneck_info import BottleneckInfo
from chatter_sdk.models.complexity_metrics import ComplexityMetrics
from chatter_sdk.models.optimization_suggestion import OptimizationSuggestion
from typing import Optional, Set
from typing_extensions import Self

class WorkflowAnalyticsResponse(BaseModel):
    """
    Schema for workflow analytics response.
    """ # noqa: E501
    complexity: ComplexityMetrics
    bottlenecks: List[BottleneckInfo] = Field(description="Identified bottlenecks")
    optimization_suggestions: List[OptimizationSuggestion] = Field(description="Optimization suggestions")
    execution_paths: StrictInt = Field(description="Number of possible execution paths")
    estimated_execution_time_ms: Optional[StrictInt] = None
    risk_factors: List[StrictStr] = Field(description="Identified risk factors")
    total_execution_time_ms: StrictInt = Field(description="Total execution time")
    error: Optional[StrictStr] = None
    started_at: datetime = Field(description="Execution start time")
    completed_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["complexity", "bottlenecks", "optimization_suggestions", "execution_paths", "estimated_execution_time_ms", "risk_factors", "total_execution_time_ms", "error", "started_at", "completed_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowAnalyticsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # override the default output from pydantic by calling `to_dict()` of complexity
        if self.complexity:
            _dict['complexity'] = self.complexity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bottlenecks (list)
        _items = []
        if self.bottlenecks:
            for _item_bottlenecks in self.bottlenecks:
                if _item_bottlenecks:
                    _items.append(_item_bottlenecks.to_dict())
            _dict['bottlenecks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in optimization_suggestions (list)
        _items = []
        if self.optimization_suggestions:
            for _item_optimization_suggestions in self.optimization_suggestions:
                if _item_optimization_suggestions:
                    _items.append(_item_optimization_suggestions.to_dict())
            _dict['optimization_suggestions'] = _items
        # set to None if estimated_execution_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_execution_time_ms is None and "estimated_execution_time_ms" in self.model_fields_set:
            _dict['estimated_execution_time_ms'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowAnalyticsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complexity": ComplexityMetrics.from_dict(obj["complexity"]) if obj.get("complexity") is not None else None,
            "bottlenecks": [BottleneckInfo.from_dict(_item) for _item in obj["bottlenecks"]] if obj.get("bottlenecks") is not None else None,
            "optimization_suggestions": [OptimizationSuggestion.from_dict(_item) for _item in obj["optimization_suggestions"]] if obj.get("optimization_suggestions") is not None else None,
            "execution_paths": obj.get("execution_paths"),
            "estimated_execution_time_ms": obj.get("estimated_execution_time_ms"),
            "risk_factors": obj.get("risk_factors"),
            "total_execution_time_ms": obj.get("total_execution_time_ms"),
            "error": obj.get("error"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at")
        })
        return _obj


