# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkflowDebugInfo(BaseModel):
    """
    Schema for workflow debug information.
    """ # noqa: E501
    workflow_structure: Dict[str, Any] = Field(description="Workflow nodes and edges structure")
    execution_path: List[StrictStr] = Field(description="Actual path taken through the workflow")
    node_executions: List[Dict[str, Any]] = Field(description="Details of each node execution")
    variable_states: Dict[str, Any] = Field(description="Variable states throughout execution")
    performance_metrics: Dict[str, Any] = Field(description="Performance metrics for each step")
    llm_interactions: Optional[List[Dict[str, Any]]] = Field(default=None, description="LLM API interactions")
    tool_calls: Optional[List[Dict[str, Any]]] = Field(default=None, description="Tool execution details")
    __properties: ClassVar[List[str]] = ["workflow_structure", "execution_path", "node_executions", "variable_states", "performance_metrics", "llm_interactions", "tool_calls"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowDebugInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowDebugInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workflow_structure": obj.get("workflow_structure"),
            "execution_path": obj.get("execution_path"),
            "node_executions": obj.get("node_executions"),
            "variable_states": obj.get("variable_states"),
            "performance_metrics": obj.get("performance_metrics"),
            "llm_interactions": obj.get("llm_interactions"),
            "tool_calls": obj.get("tool_calls")
        })
        return _obj


