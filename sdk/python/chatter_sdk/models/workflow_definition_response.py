# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from chatter_sdk.models.workflow_edge import WorkflowEdge
from chatter_sdk.models.workflow_node import WorkflowNode
from typing import Optional, Set
from typing_extensions import Self

class WorkflowDefinitionResponse(BaseModel):
    """
    Schema for workflow definition response.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Workflow name")
    description: Optional[StrictStr] = None
    nodes: List[WorkflowNode] = Field(description="Workflow nodes")
    edges: List[WorkflowEdge] = Field(description="Workflow edges")
    metadata: Optional[Dict[str, Any]] = None
    is_public: Optional[StrictBool] = Field(default=False, description="Whether workflow is public")
    tags: Optional[List[StrictStr]] = None
    template_id: Optional[StrictStr] = None
    id: StrictStr = Field(description="Unique node identifier")
    owner_id: StrictStr = Field(description="Owner user ID")
    version: Optional[StrictInt] = Field(default=1, description="Workflow version")
    __properties: ClassVar[List[str]] = ["name", "description", "nodes", "edges", "metadata", "is_public", "tags", "template_id", "id", "owner_id", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowDefinitionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item_edges in self.edges:
                if _item_edges:
                    _items.append(_item_edges.to_dict())
            _dict['edges'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if template_id (nullable) is None
        # and model_fields_set contains the field
        if self.template_id is None and "template_id" in self.model_fields_set:
            _dict['template_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowDefinitionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "nodes": [WorkflowNode.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "edges": [WorkflowEdge.from_dict(_item) for _item in obj["edges"]] if obj.get("edges") is not None else None,
            "metadata": obj.get("metadata"),
            "is_public": obj.get("is_public") if obj.get("is_public") is not None else False,
            "tags": obj.get("tags"),
            "template_id": obj.get("template_id"),
            "id": obj.get("id"),
            "owner_id": obj.get("owner_id"),
            "version": obj.get("version") if obj.get("version") is not None else 1
        })
        return _obj


