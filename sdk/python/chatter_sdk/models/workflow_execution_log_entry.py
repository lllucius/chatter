# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkflowExecutionLogEntry(BaseModel):
    """
    Schema for individual execution log entries.
    """ # noqa: E501
    timestamp: datetime = Field(description="Log entry timestamp")
    level: StrictStr = Field(description="Log level (DEBUG, INFO, WARN, ERROR)")
    node_id: Optional[StrictStr] = None
    step_name: Optional[StrictStr] = None
    message: StrictStr = Field(description="Log message")
    data: Optional[Dict[str, Any]] = None
    execution_time_ms: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["timestamp", "level", "node_id", "step_name", "message", "data", "execution_time_ms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowExecutionLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
    mode='json',
        )
        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['node_id'] = None

        # set to None if step_name (nullable) is None
        # and model_fields_set contains the field
        if self.step_name is None and "step_name" in self.model_fields_set:
            _dict['step_name'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if execution_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.execution_time_ms is None and "execution_time_ms" in self.model_fields_set:
            _dict['execution_time_ms'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowExecutionLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "level": obj.get("level"),
            "node_id": obj.get("node_id"),
            "step_name": obj.get("step_name"),
            "message": obj.get("message"),
            "data": obj.get("data"),
            "execution_time_ms": obj.get("execution_time_ms")
        })
        return _obj


