# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WorkflowExecutionResponse(BaseModel):
    """
    Schema for workflow execution response.
    """ # noqa: E501
    input_data: Optional[Dict[str, Any]] = None
    id: StrictStr = Field(description="Execution ID")
    definition_id: StrictStr = Field(description="Workflow definition ID")
    owner_id: StrictStr = Field(description="Owner user ID")
    status: StrictStr = Field(description="Execution status")
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    execution_time_ms: Optional[StrictInt] = None
    output_data: Optional[Dict[str, Any]] = None
    error_message: Optional[StrictStr] = None
    tokens_used: Optional[StrictInt] = Field(default=0, description="Total tokens used")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="Total cost")
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["input_data", "id", "definition_id", "owner_id", "status", "started_at", "completed_at", "execution_time_ms", "output_data", "error_message", "tokens_used", "cost", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""

        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowExecutionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if input_data (nullable) is None
        # and model_fields_set contains the field
        if self.input_data is None and "input_data" in self.model_fields_set:
            _dict['input_data'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['started_at'] = None

        # set to None if completed_at (nullable) is None
        # and model_fields_set contains the field
        if self.completed_at is None and "completed_at" in self.model_fields_set:
            _dict['completed_at'] = None

        # set to None if execution_time_ms (nullable) is None
        # and model_fields_set contains the field
        if self.execution_time_ms is None and "execution_time_ms" in self.model_fields_set:
            _dict['execution_time_ms'] = None

        # set to None if output_data (nullable) is None
        # and model_fields_set contains the field
        if self.output_data is None and "output_data" in self.model_fields_set:
            _dict['output_data'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowExecutionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input_data": obj.get("input_data"),
            "id": obj.get("id"),
            "definition_id": obj.get("definition_id"),
            "owner_id": obj.get("owner_id"),
            "status": obj.get("status"),
            "started_at": obj.get("started_at"),
            "completed_at": obj.get("completed_at"),
            "execution_time_ms": obj.get("execution_time_ms"),
            "output_data": obj.get("output_data"),
            "error_message": obj.get("error_message"),
            "tokens_used": obj.get("tokens_used") if obj.get("tokens_used") is not None else 0,
            "cost": obj.get("cost") if obj.get("cost") is not None else 0.0,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


