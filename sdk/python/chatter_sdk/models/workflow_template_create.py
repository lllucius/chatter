# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WorkflowTemplateCreate(BaseModel):
    """
    Schema for creating a workflow template.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="Template name")
    description: StrictStr = Field(description="Template description")
    workflow_type: StrictStr = Field(description="Workflow type")
    category: Optional[StrictStr] = Field(default='custom', description="Template category")
    default_params: Optional[Dict[str, Any]] = Field(default=None, description="Default parameters")
    required_tools: Optional[List[StrictStr]] = None
    required_retrievers: Optional[List[StrictStr]] = None
    tags: Optional[List[StrictStr]] = None
    is_public: Optional[StrictBool] = Field(default=False, description="Whether template is public")
    workflow_definition_id: Optional[StrictStr] = None
    base_template_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "description", "workflow_type", "category", "default_params", "required_tools", "required_retrievers", "tags", "is_public", "workflow_definition_id", "base_template_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkflowTemplateCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if required_tools (nullable) is None
        # and model_fields_set contains the field
        if self.required_tools is None and "required_tools" in self.model_fields_set:
            _dict['required_tools'] = None

        # set to None if required_retrievers (nullable) is None
        # and model_fields_set contains the field
        if self.required_retrievers is None and "required_retrievers" in self.model_fields_set:
            _dict['required_retrievers'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if workflow_definition_id (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_definition_id is None and "workflow_definition_id" in self.model_fields_set:
            _dict['workflow_definition_id'] = None

        # set to None if base_template_id (nullable) is None
        # and model_fields_set contains the field
        if self.base_template_id is None and "base_template_id" in self.model_fields_set:
            _dict['base_template_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkflowTemplateCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "workflow_type": obj.get("workflow_type"),
            "category": obj.get("category") if obj.get("category") is not None else 'custom',
            "default_params": obj.get("default_params"),
            "required_tools": obj.get("required_tools"),
            "required_retrievers": obj.get("required_retrievers"),
            "tags": obj.get("tags"),
            "is_public": obj.get("is_public") if obj.get("is_public") is not None else False,
            "workflow_definition_id": obj.get("workflow_definition_id"),
            "base_template_id": obj.get("base_template_id")
        })
        return _obj


