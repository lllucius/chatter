"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)


class WorkflowTemplateResponse(BaseModel):
    """
    Schema for workflow template response.
    """  # noqa: E501

    name: Annotated[
        str, Field(min_length=1, strict=True, max_length=255)
    ] = Field(description="Template name")
    description: StrictStr = Field(description="Template description")
    workflow_type: StrictStr = Field(description="Workflow type")
    category: StrictStr | None = Field(
        default='custom', description="Template category"
    )
    default_params: dict[str, Any] | None = Field(
        default=None, description="Default parameters"
    )
    required_tools: list[StrictStr] | None = None
    required_retrievers: list[StrictStr] | None = None
    tags: list[StrictStr] | None = None
    is_public: StrictBool | None = Field(
        default=False, description="Whether template is public"
    )
    id: StrictStr = Field(description="Unique node identifier")
    owner_id: StrictStr = Field(description="Owner user ID")
    base_template_id: StrictStr | None = None
    is_builtin: StrictBool | None = Field(
        default=False, description="Whether template is built-in"
    )
    version: StrictInt | None = Field(
        default=1, description="Template version"
    )
    is_latest: StrictBool | None = Field(
        default=True, description="Whether this is the latest version"
    )
    rating: StrictFloat | StrictInt | None = None
    rating_count: StrictInt | None = Field(
        default=0, description="Number of ratings"
    )
    usage_count: StrictInt | None = Field(
        default=0, description="Usage count"
    )
    success_rate: StrictFloat | StrictInt | None = None
    config_hash: StrictStr = Field(description="Configuration hash")
    estimated_complexity: StrictInt | None = None
    __properties: ClassVar[list[str]] = [
        "name",
        "description",
        "workflow_type",
        "category",
        "default_params",
        "required_tools",
        "required_retrievers",
        "tags",
        "is_public",
        "id",
        "owner_id",
        "base_template_id",
        "is_builtin",
        "version",
        "is_latest",
        "rating",
        "rating_count",
        "usage_count",
        "success_rate",
        "config_hash",
        "estimated_complexity",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of WorkflowTemplateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if required_tools (nullable) is None
        # and model_fields_set contains the field
        if (
            self.required_tools is None
            and "required_tools" in self.model_fields_set
        ):
            _dict['required_tools'] = None

        # set to None if required_retrievers (nullable) is None
        # and model_fields_set contains the field
        if (
            self.required_retrievers is None
            and "required_retrievers" in self.model_fields_set
        ):
            _dict['required_retrievers'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if base_template_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.base_template_id is None
            and "base_template_id" in self.model_fields_set
        ):
            _dict['base_template_id'] = None

        # set to None if rating (nullable) is None
        # and model_fields_set contains the field
        if self.rating is None and "rating" in self.model_fields_set:
            _dict['rating'] = None

        # set to None if success_rate (nullable) is None
        # and model_fields_set contains the field
        if (
            self.success_rate is None
            and "success_rate" in self.model_fields_set
        ):
            _dict['success_rate'] = None

        # set to None if estimated_complexity (nullable) is None
        # and model_fields_set contains the field
        if (
            self.estimated_complexity is None
            and "estimated_complexity" in self.model_fields_set
        ):
            _dict['estimated_complexity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of WorkflowTemplateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "workflow_type": obj.get("workflow_type"),
                "category": (
                    obj.get("category")
                    if obj.get("category") is not None
                    else 'custom'
                ),
                "default_params": obj.get("default_params"),
                "required_tools": obj.get("required_tools"),
                "required_retrievers": obj.get("required_retrievers"),
                "tags": obj.get("tags"),
                "is_public": (
                    obj.get("is_public")
                    if obj.get("is_public") is not None
                    else False
                ),
                "id": obj.get("id"),
                "owner_id": obj.get("owner_id"),
                "base_template_id": obj.get("base_template_id"),
                "is_builtin": (
                    obj.get("is_builtin")
                    if obj.get("is_builtin") is not None
                    else False
                ),
                "version": (
                    obj.get("version")
                    if obj.get("version") is not None
                    else 1
                ),
                "is_latest": (
                    obj.get("is_latest")
                    if obj.get("is_latest") is not None
                    else True
                ),
                "rating": obj.get("rating"),
                "rating_count": (
                    obj.get("rating_count")
                    if obj.get("rating_count") is not None
                    else 0
                ),
                "usage_count": (
                    obj.get("usage_count")
                    if obj.get("usage_count") is not None
                    else 0
                ),
                "success_rate": obj.get("success_rate"),
                "config_hash": obj.get("config_hash"),
                "estimated_complexity": obj.get("estimated_complexity"),
            }
        )
        return _obj
