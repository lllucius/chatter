"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Annotated, Any, ClassVar, Self

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr


class WorkflowTemplateUpdate(BaseModel):
    """
    Schema for updating a workflow template.
    """  # noqa: E501

    name: (
        Annotated[str, Field(min_length=1, strict=True, max_length=255)]
        | None
    ) = None
    description: StrictStr | None = None
    category: StrictStr | None = None
    default_params: dict[str, Any] | None = None
    required_tools: list[StrictStr] | None = None
    required_retrievers: list[StrictStr] | None = None
    tags: list[StrictStr] | None = None
    is_public: StrictBool | None = None
    __properties: ClassVar[list[str]] = [
        "name",
        "description",
        "category",
        "default_params",
        "required_tools",
        "required_retrievers",
        "tags",
        "is_public",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of WorkflowTemplateUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if (
            self.description is None
            and "description" in self.model_fields_set
        ):
            _dict['description'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if (
            self.category is None
            and "category" in self.model_fields_set
        ):
            _dict['category'] = None

        # set to None if default_params (nullable) is None
        # and model_fields_set contains the field
        if (
            self.default_params is None
            and "default_params" in self.model_fields_set
        ):
            _dict['default_params'] = None

        # set to None if required_tools (nullable) is None
        # and model_fields_set contains the field
        if (
            self.required_tools is None
            and "required_tools" in self.model_fields_set
        ):
            _dict['required_tools'] = None

        # set to None if required_retrievers (nullable) is None
        # and model_fields_set contains the field
        if (
            self.required_retrievers is None
            and "required_retrievers" in self.model_fields_set
        ):
            _dict['required_retrievers'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if is_public (nullable) is None
        # and model_fields_set contains the field
        if (
            self.is_public is None
            and "is_public" in self.model_fields_set
        ):
            _dict['is_public'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of WorkflowTemplateUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "description": obj.get("description"),
                "category": obj.get("category"),
                "default_params": obj.get("default_params"),
                "required_tools": obj.get("required_tools"),
                "required_retrievers": obj.get("required_retrievers"),
                "tags": obj.get("tags"),
                "is_public": obj.get("is_public"),
            }
        )
        return _obj
