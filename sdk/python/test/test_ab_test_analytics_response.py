# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.ab_test_analytics_response import ABTestAnalyticsResponse

class TestABTestAnalyticsResponse(unittest.TestCase):
    """ABTestAnalyticsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ABTestAnalyticsResponse:
        """Test ABTestAnalyticsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ABTestAnalyticsResponse`
        """
        model = ABTestAnalyticsResponse()
        if include_optional:
            return ABTestAnalyticsResponse(
                test_id = '',
                test_name = '',
                status = 'draft',
                total_participants = 56,
                variants = [
                    chatter_sdk.models.variant_performance.VariantPerformance(
                        name = '', 
                        participants = 56, 
                        conversions = 56, 
                        conversion_rate = 1.337, 
                        revenue = 1.337, 
                        cost = 1.337, 
                        roi = 1.337, )
                    ],
                statistical_analysis = chatter_sdk.models.statistical_analysis.StatisticalAnalysis(
                    confidence_level = 1.337, 
                    statistical_significance = True, 
                    p_value = 1.337, 
                    effect_size = 1.337, 
                    power = 1.337, 
                    confidence_intervals = {
                        'key' : [
                            1.337
                            ]
                        }, ),
                winner = '',
                improvement = 1.337,
                recommendation = '',
                duration_days = 56,
                remaining_days = 56,
                progress_percentage = 1.337,
                generated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ABTestAnalyticsResponse(
                test_id = '',
                test_name = '',
                status = 'draft',
                total_participants = 56,
                variants = [
                    chatter_sdk.models.variant_performance.VariantPerformance(
                        name = '', 
                        participants = 56, 
                        conversions = 56, 
                        conversion_rate = 1.337, 
                        revenue = 1.337, 
                        cost = 1.337, 
                        roi = 1.337, )
                    ],
                statistical_analysis = chatter_sdk.models.statistical_analysis.StatisticalAnalysis(
                    confidence_level = 1.337, 
                    statistical_significance = True, 
                    p_value = 1.337, 
                    effect_size = 1.337, 
                    power = 1.337, 
                    confidence_intervals = {
                        'key' : [
                            1.337
                            ]
                        }, ),
                recommendation = '',
                duration_days = 56,
                progress_percentage = 1.337,
                generated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testABTestAnalyticsResponse(self):
        """Test ABTestAnalyticsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
