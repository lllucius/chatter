"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from chatter_sdk.models.agent_response import AgentResponse


class TestAgentResponse(unittest.TestCase):
    """AgentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AgentResponse:
        """Test AgentResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `AgentResponse`
        """
        model = AgentResponse()
        if include_optional:
            return AgentResponse(
                id = '',
                name = '',
                description = '',
                type = 'conversational',
                status = 'active',
                system_message = '',
                personality_traits = [
                    ''
                    ],
                knowledge_domains = [
                    ''
                    ],
                response_style = '',
                capabilities = [
                    'natural_language'
                    ],
                available_tools = [
                    ''
                    ],
                primary_llm = '',
                fallback_llm = '',
                temperature = 1.337,
                max_tokens = 56,
                max_conversation_length = 56,
                context_window_size = 56,
                response_timeout = 56,
                learning_enabled = True,
                feedback_weight = 1.337,
                adaptation_threshold = 1.337,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                tags = [
                    ''
                    ],
                metadata = { }
            )
        else:
            return AgentResponse(
                id = '',
                name = '',
                description = '',
                type = 'conversational',
                status = 'active',
                system_message = '',
                personality_traits = [
                    ''
                    ],
                knowledge_domains = [
                    ''
                    ],
                response_style = '',
                capabilities = [
                    'natural_language'
                    ],
                available_tools = [
                    ''
                    ],
                primary_llm = '',
                fallback_llm = '',
                temperature = 1.337,
                max_tokens = 56,
                max_conversation_length = 56,
                context_window_size = 56,
                response_timeout = 56,
                learning_enabled = True,
                feedback_weight = 1.337,
                adaptation_threshold = 1.337,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                tags = [
                    ''
                    ],
                metadata = { },
        )
        """

    def testAgentResponse(self):
        """Test AgentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
