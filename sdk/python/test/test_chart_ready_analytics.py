# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.chart_ready_analytics import ChartReadyAnalytics

class TestChartReadyAnalytics(unittest.TestCase):
    """ChartReadyAnalytics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChartReadyAnalytics:
        """Test ChartReadyAnalytics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChartReadyAnalytics`
        """
        model = ChartReadyAnalytics()
        if include_optional:
            return ChartReadyAnalytics(
                conversation_chart_data = [
                    chatter_sdk.models.time_series_data_point.TimeSeriesDataPoint(
                        date = '', 
                        conversations = 56, 
                        tokens = 56, 
                        cost = 1.337, 
                        workflows = 56, 
                        agents = 56, 
                        ab_tests = 56, )
                    ],
                token_usage_data = [
                    chatter_sdk.models.time_series_data_point.TimeSeriesDataPoint(
                        date = '', 
                        conversations = 56, 
                        tokens = 56, 
                        cost = 1.337, 
                        workflows = 56, 
                        agents = 56, 
                        ab_tests = 56, )
                    ],
                performance_chart_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                system_health_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                integration_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                hourly_performance_data = [
                    { }
                    ]
            )
        else:
            return ChartReadyAnalytics(
                conversation_chart_data = [
                    chatter_sdk.models.time_series_data_point.TimeSeriesDataPoint(
                        date = '', 
                        conversations = 56, 
                        tokens = 56, 
                        cost = 1.337, 
                        workflows = 56, 
                        agents = 56, 
                        ab_tests = 56, )
                    ],
                token_usage_data = [
                    chatter_sdk.models.time_series_data_point.TimeSeriesDataPoint(
                        date = '', 
                        conversations = 56, 
                        tokens = 56, 
                        cost = 1.337, 
                        workflows = 56, 
                        agents = 56, 
                        ab_tests = 56, )
                    ],
                performance_chart_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                system_health_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                integration_data = [
                    chatter_sdk.models.chart_data_point.ChartDataPoint(
                        name = '', 
                        value = 1.337, 
                        color = '', )
                    ],
                hourly_performance_data = [
                    { }
                    ],
        )
        """

    def testChartReadyAnalytics(self):
        """Test ChartReadyAnalytics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
