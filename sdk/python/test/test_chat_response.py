# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.chat_response import ChatResponse

class TestChatResponse(unittest.TestCase):
    """ChatResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatResponse:
        """Test ChatResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatResponse`
        """
        model = ChatResponse()
        if include_optional:
            return ChatResponse(
                conversation_id = '',
                message = chatter_sdk.models.message_response.MessageResponse(
                    role = 'user', 
                    content = '0', 
                    id = '', 
                    conversation_id = '', 
                    sequence_number = 56, 
                    prompt_tokens = 56, 
                    completion_tokens = 56, 
                    total_tokens = 56, 
                    model_used = '', 
                    provider_used = '', 
                    response_time_ms = 56, 
                    cost = 1.337, 
                    finish_reason = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                conversation = chatter_sdk.models.conversation_response.ConversationResponse(
                    title = '', 
                    description = '', 
                    id = '', 
                    user_id = '', 
                    profile_id = '', 
                    status = 'active', 
                    llm_provider = '', 
                    llm_model = '', 
                    temperature = 1.337, 
                    max_tokens = 56, 
                    enable_retrieval = True, 
                    message_count = 56, 
                    total_tokens = 56, 
                    total_cost = 1.337, 
                    system_prompt = '', 
                    context_window = 56, 
                    memory_enabled = True, 
                    memory_strategy = '', 
                    retrieval_limit = 56, 
                    retrieval_score_threshold = 1.337, 
                    tags = [
                        ''
                        ], 
                    extra_metadata = { }, 
                    workflow_config = { }, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_message_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return ChatResponse(
                conversation_id = '',
                message = chatter_sdk.models.message_response.MessageResponse(
                    role = 'user', 
                    content = '0', 
                    id = '', 
                    conversation_id = '', 
                    sequence_number = 56, 
                    prompt_tokens = 56, 
                    completion_tokens = 56, 
                    total_tokens = 56, 
                    model_used = '', 
                    provider_used = '', 
                    response_time_ms = 56, 
                    cost = 1.337, 
                    finish_reason = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                conversation = chatter_sdk.models.conversation_response.ConversationResponse(
                    title = '', 
                    description = '', 
                    id = '', 
                    user_id = '', 
                    profile_id = '', 
                    status = 'active', 
                    llm_provider = '', 
                    llm_model = '', 
                    temperature = 1.337, 
                    max_tokens = 56, 
                    enable_retrieval = True, 
                    message_count = 56, 
                    total_tokens = 56, 
                    total_cost = 1.337, 
                    system_prompt = '', 
                    context_window = 56, 
                    memory_enabled = True, 
                    memory_strategy = '', 
                    retrieval_limit = 56, 
                    retrieval_score_threshold = 1.337, 
                    tags = [
                        ''
                        ], 
                    extra_metadata = { }, 
                    workflow_config = { }, 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_message_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testChatResponse(self):
        """Test ChatResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
