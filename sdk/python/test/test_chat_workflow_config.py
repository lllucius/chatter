# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.chat_workflow_config import ChatWorkflowConfig

class TestChatWorkflowConfig(unittest.TestCase):
    """ChatWorkflowConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatWorkflowConfig:
        """Test ChatWorkflowConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatWorkflowConfig`
        """
        model = ChatWorkflowConfig()
        if include_optional:
            return ChatWorkflowConfig(
                enable_retrieval = True,
                enable_tools = True,
                enable_memory = True,
                enable_web_search = True,
                llm_config = chatter_sdk.models.model_config.ModelConfig(
                    provider = '', 
                    model = '', 
                    temperature = 0.0, 
                    max_tokens = 1.0, 
                    top_p = 0.0, 
                    presence_penalty = -2.0, 
                    frequency_penalty = -2.0, ),
                retrieval_config = chatter_sdk.models.retrieval_config.RetrievalConfig(
                    enabled = True, 
                    max_documents = 1.0, 
                    similarity_threshold = 0.0, 
                    document_ids = [
                        ''
                        ], 
                    collections = [
                        ''
                        ], 
                    rerank = True, ),
                tool_config = chatter_sdk.models.tool_config.ToolConfig(
                    enabled = True, 
                    allowed_tools = [
                        ''
                        ], 
                    max_tool_calls = 1.0, 
                    parallel_tool_calls = True, 
                    tool_timeout_ms = 1000.0, )
            )
        else:
            return ChatWorkflowConfig(
        )
        """

    def testChatWorkflowConfig(self):
        """Test ChatWorkflowConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
