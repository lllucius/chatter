# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.chat_workflow_templates_response import ChatWorkflowTemplatesResponse

class TestChatWorkflowTemplatesResponse(unittest.TestCase):
    """ChatWorkflowTemplatesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChatWorkflowTemplatesResponse:
        """Test ChatWorkflowTemplatesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChatWorkflowTemplatesResponse`
        """
        model = ChatWorkflowTemplatesResponse()
        if include_optional:
            return ChatWorkflowTemplatesResponse(
                templates = {
                    'key' : chatter_sdk.models.chat_workflow_template.ChatWorkflowTemplate(
                        name = '', 
                        description = '', 
                        config = chatter_sdk.models.chat_workflow_config.ChatWorkflowConfig(
                            enable_retrieval = True, 
                            enable_tools = True, 
                            enable_memory = True, 
                            enable_web_search = True, 
                            llm_config = chatter_sdk.models.model_config.ModelConfig(
                                provider = '', 
                                model = '', 
                                temperature = 0.0, 
                                max_tokens = 1.0, 
                                top_p = 0.0, 
                                presence_penalty = -2.0, 
                                frequency_penalty = -2.0, ), 
                            retrieval_config = chatter_sdk.models.retrieval_config.RetrievalConfig(
                                enabled = True, 
                                max_documents = 1.0, 
                                similarity_threshold = 0.0, 
                                document_ids = [
                                    ''
                                    ], 
                                collections = [
                                    ''
                                    ], 
                                rerank = True, ), 
                            tool_config = chatter_sdk.models.tool_config.ToolConfig(
                                enabled = True, 
                                allowed_tools = [
                                    ''
                                    ], 
                                max_tool_calls = 1.0, 
                                parallel_tool_calls = True, 
                                tool_timeout_ms = 1000.0, ), 
                            custom_nodes = [
                                chatter_sdk.models.workflow_node.WorkflowNode(
                                    id = '', 
                                    type = '', 
                                    position = {
                                        'key' : 1.337
                                        }, 
                                    data = chatter_sdk.models.workflow_node_data.WorkflowNodeData(
                                        label = '', 
                                        node_type = '', ), 
                                    selected = True, 
                                    dragging = True, )
                                ], 
                            custom_edges = [
                                chatter_sdk.models.workflow_edge.WorkflowEdge(
                                    id = '', 
                                    source = '', 
                                    target = '', 
                                    source_handle = '', 
                                    target_handle = '', 
                                    type = '', )
                                ], ), 
                        estimated_tokens = 56, 
                        estimated_cost = 1.337, 
                        complexity_score = 1.0, 
                        use_cases = [
                            ''
                            ], )
                    },
                total_count = 56
            )
        else:
            return ChatWorkflowTemplatesResponse(
                templates = {
                    'key' : chatter_sdk.models.chat_workflow_template.ChatWorkflowTemplate(
                        name = '', 
                        description = '', 
                        config = chatter_sdk.models.chat_workflow_config.ChatWorkflowConfig(
                            enable_retrieval = True, 
                            enable_tools = True, 
                            enable_memory = True, 
                            enable_web_search = True, 
                            llm_config = chatter_sdk.models.model_config.ModelConfig(
                                provider = '', 
                                model = '', 
                                temperature = 0.0, 
                                max_tokens = 1.0, 
                                top_p = 0.0, 
                                presence_penalty = -2.0, 
                                frequency_penalty = -2.0, ), 
                            retrieval_config = chatter_sdk.models.retrieval_config.RetrievalConfig(
                                enabled = True, 
                                max_documents = 1.0, 
                                similarity_threshold = 0.0, 
                                document_ids = [
                                    ''
                                    ], 
                                collections = [
                                    ''
                                    ], 
                                rerank = True, ), 
                            tool_config = chatter_sdk.models.tool_config.ToolConfig(
                                enabled = True, 
                                allowed_tools = [
                                    ''
                                    ], 
                                max_tool_calls = 1.0, 
                                parallel_tool_calls = True, 
                                tool_timeout_ms = 1000.0, ), 
                            custom_nodes = [
                                chatter_sdk.models.workflow_node.WorkflowNode(
                                    id = '', 
                                    type = '', 
                                    position = {
                                        'key' : 1.337
                                        }, 
                                    data = chatter_sdk.models.workflow_node_data.WorkflowNodeData(
                                        label = '', 
                                        node_type = '', ), 
                                    selected = True, 
                                    dragging = True, )
                                ], 
                            custom_edges = [
                                chatter_sdk.models.workflow_edge.WorkflowEdge(
                                    id = '', 
                                    source = '', 
                                    target = '', 
                                    source_handle = '', 
                                    target_handle = '', 
                                    type = '', )
                                ], ), 
                        estimated_tokens = 56, 
                        estimated_cost = 1.337, 
                        complexity_score = 1.0, 
                        use_cases = [
                            ''
                            ], )
                    },
                total_count = 56,
        )
        """

    def testChatWorkflowTemplatesResponse(self):
        """Test ChatWorkflowTemplatesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
