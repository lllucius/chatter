
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.conversation_response import (
    ConversationResponse,
)


class TestConversationResponse(unittest.TestCase):
    """ConversationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConversationResponse:
        """Test ConversationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConversationResponse`
        """
        model = ConversationResponse()
        if include_optional:
            return ConversationResponse(
                title = '',
                description = '',
                id = '',
                user_id = '',
                profile_id = '',
                status = 'active',
                llm_provider = '',
                llm_model = '',
                temperature = 1.337,
                max_tokens = 56,
                enable_retrieval = True,
                message_count = 56,
                total_tokens = 56,
                total_cost = 1.337,
                system_prompt = '',
                context_window = 56,
                memory_enabled = True,
                memory_strategy = '',
                retrieval_limit = 56,
                retrieval_score_threshold = 1.337,
                tags = [
                    ''
                    ],
                extra_metadata = { },
                workflow_config = { },
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_message_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return ConversationResponse(
                title = '',
                id = '',
                user_id = '',
                status = 'active',
                enable_retrieval = True,
                message_count = 56,
                total_tokens = 56,
                total_cost = 1.337,
                context_window = 56,
                memory_enabled = True,
                retrieval_limit = 56,
                retrieval_score_threshold = 1.337,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testConversationResponse(self):
        """Test ConversationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == "__main__":
    unittest.main()
