"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from chatter_sdk.models.document_chunks_response import (
    DocumentChunksResponse,
)


class TestDocumentChunksResponse(unittest.TestCase):
    """DocumentChunksResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentChunksResponse:
        """Test DocumentChunksResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DocumentChunksResponse`
        """
        model = DocumentChunksResponse()
        if include_optional:
            return DocumentChunksResponse(
                chunks = [
                    chatter_sdk.models.document_chunk_response.DocumentChunkResponse(
                        id = '',
                        document_id = '',
                        content = '',
                        chunk_index = 56,
                        start_char = 56,
                        end_char = 56,
                        extra_metadata = { },
                        token_count = 56,
                        language = '',
                        embedding_model = '',
                        embedding_provider = '',
                        embedding_created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        content_hash = '',
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                total_count = 56,
                limit = 56,
                offset = 56
            )
        else:
            return DocumentChunksResponse(
                chunks = [
                    chatter_sdk.models.document_chunk_response.DocumentChunkResponse(
                        id = '',
                        document_id = '',
                        content = '',
                        chunk_index = 56,
                        start_char = 56,
                        end_char = 56,
                        extra_metadata = { },
                        token_count = 56,
                        language = '',
                        embedding_model = '',
                        embedding_provider = '',
                        embedding_created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        content_hash = '',
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                total_count = 56,
                limit = 56,
                offset = 56,
        )
        """

    def testDocumentChunksResponse(self):
        """Test DocumentChunksResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
