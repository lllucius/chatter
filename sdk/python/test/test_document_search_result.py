"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from chatter_sdk.models.document_search_result import (
    DocumentSearchResult,
)


class TestDocumentSearchResult(unittest.TestCase):
    """DocumentSearchResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DocumentSearchResult:
        """Test DocumentSearchResult
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `DocumentSearchResult`
        """
        model = DocumentSearchResult()
        if include_optional:
            return DocumentSearchResult(
                document_id = '',
                chunk_id = '',
                score = 1.337,
                content = '',
                metadata = { },
                document = chatter_sdk.models.document_response.DocumentResponse(
                    title = '',
                    description = '',
                    tags = [
                        ''
                        ],
                    extra_metadata = { },
                    is_public = True,
                    id = '',
                    owner_id = '',
                    filename = '',
                    original_filename = '',
                    file_size = 56,
                    file_hash = '',
                    mime_type = '',
                    document_type = 'pdf',
                    status = 'pending',
                    processing_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    processing_completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    processing_error = '',
                    chunk_size = 56,
                    chunk_overlap = 56,
                    chunk_count = 56,
                    version = 56,
                    parent_document_id = '',
                    view_count = 56,
                    search_count = 56,
                    last_accessed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return DocumentSearchResult(
                document_id = '',
                chunk_id = '',
                score = 1.337,
                content = '',
                document = chatter_sdk.models.document_response.DocumentResponse(
                    title = '',
                    description = '',
                    tags = [
                        ''
                        ],
                    extra_metadata = { },
                    is_public = True,
                    id = '',
                    owner_id = '',
                    filename = '',
                    original_filename = '',
                    file_size = 56,
                    file_hash = '',
                    mime_type = '',
                    document_type = 'pdf',
                    status = 'pending',
                    processing_started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    processing_completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    processing_error = '',
                    chunk_size = 56,
                    chunk_overlap = 56,
                    chunk_count = 56,
                    version = 56,
                    parent_document_id = '',
                    view_count = 56,
                    search_count = 56,
                    last_accessed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testDocumentSearchResult(self):
        """Test DocumentSearchResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
