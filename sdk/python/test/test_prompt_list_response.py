
"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.prompt_list_response import PromptListResponse

class TestPromptListResponse(unittest.TestCase):
    """PromptListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PromptListResponse:
        """Test PromptListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PromptListResponse`
        """
        model = PromptListResponse()
        if include_optional:
            return PromptListResponse(
                prompts = [
                    chatter_sdk.models.prompt_response.PromptResponse(
                        id = '', 
                        owner_id = '', 
                        name = '', 
                        description = '', 
                        prompt_type = 'system', 
                        category = 'general', 
                        content = '', 
                        variables = [
                            ''
                            ], 
                        template_format = '', 
                        input_schema = { }, 
                        output_schema = { }, 
                        max_length = 56, 
                        min_length = 56, 
                        required_variables = [
                            ''
                            ], 
                        examples = [
                            { }
                            ], 
                        test_cases = [
                            { }
                            ], 
                        suggested_temperature = 1.337, 
                        suggested_max_tokens = 56, 
                        suggested_providers = [
                            ''
                            ], 
                        is_chain = True, 
                        chain_steps = [
                            { }
                            ], 
                        parent_prompt_id = '', 
                        version = 56, 
                        is_latest = True, 
                        changelog = '', 
                        is_public = True, 
                        rating = 1.337, 
                        rating_count = 56, 
                        usage_count = 56, 
                        success_rate = 1.337, 
                        avg_response_time_ms = 56, 
                        last_used_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        total_tokens_used = 56, 
                        total_cost = 1.337, 
                        avg_tokens_per_use = 1.337, 
                        tags = [
                            ''
                            ], 
                        extra_metadata = { }, 
                        content_hash = '', 
                        estimated_tokens = 56, 
                        language = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                total_count = 56,
                limit = 56,
                offset = 56
            )
        else:
            return PromptListResponse(
                prompts = [
                    chatter_sdk.models.prompt_response.PromptResponse(
                        id = '', 
                        owner_id = '', 
                        name = '', 
                        description = '', 
                        prompt_type = 'system', 
                        category = 'general', 
                        content = '', 
                        variables = [
                            ''
                            ], 
                        template_format = '', 
                        input_schema = { }, 
                        output_schema = { }, 
                        max_length = 56, 
                        min_length = 56, 
                        required_variables = [
                            ''
                            ], 
                        examples = [
                            { }
                            ], 
                        test_cases = [
                            { }
                            ], 
                        suggested_temperature = 1.337, 
                        suggested_max_tokens = 56, 
                        suggested_providers = [
                            ''
                            ], 
                        is_chain = True, 
                        chain_steps = [
                            { }
                            ], 
                        parent_prompt_id = '', 
                        version = 56, 
                        is_latest = True, 
                        changelog = '', 
                        is_public = True, 
                        rating = 1.337, 
                        rating_count = 56, 
                        usage_count = 56, 
                        success_rate = 1.337, 
                        avg_response_time_ms = 56, 
                        last_used_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        total_tokens_used = 56, 
                        total_cost = 1.337, 
                        avg_tokens_per_use = 1.337, 
                        tags = [
                            ''
                            ], 
                        extra_metadata = { }, 
                        content_hash = '', 
                        estimated_tokens = 56, 
                        language = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                total_count = 56,
                limit = 56,
                offset = 56,
        )
        """

    def testPromptListResponse(self):
        """Test PromptListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
