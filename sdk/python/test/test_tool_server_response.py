# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.tool_server_response import ToolServerResponse

class TestToolServerResponse(unittest.TestCase):
    """ToolServerResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolServerResponse:
        """Test ToolServerResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolServerResponse`
        """
        model = ToolServerResponse()
        if include_optional:
            return ToolServerResponse(
                name = '0',
                display_name = '0',
                description = '',
                base_url = '0',
                transport_type = 'http',
                oauth_config = chatter_sdk.models.o_auth_config_schema.OAuthConfigSchema(
                    client_id = '', 
                    client_secret = '', 
                    token_url = '0', 
                    scope = '', ),
                headers = {
                    'key' : ''
                    },
                timeout = 5.0,
                auto_start = True,
                auto_update = True,
                max_failures = 1.0,
                id = '',
                status = 'enabled',
                is_builtin = True,
                last_health_check = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_startup_success = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_startup_error = '',
                consecutive_failures = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                tools = [
                    chatter_sdk.models.server_tool_response.ServerToolResponse(
                        name = '0', 
                        display_name = '0', 
                        description = '', 
                        args_schema = { }, 
                        bypass_when_unavailable = True, 
                        id = '', 
                        server_id = '', 
                        status = 'enabled', 
                        is_available = True, 
                        total_calls = 56, 
                        total_errors = 56, 
                        last_called = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_error = '', 
                        avg_response_time_ms = 1.337, 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ]
            )
        else:
            return ToolServerResponse(
                name = '0',
                display_name = '0',
                id = '',
                status = 'enabled',
                is_builtin = True,
                consecutive_failures = 56,
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testToolServerResponse(self):
        """Test ToolServerResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
