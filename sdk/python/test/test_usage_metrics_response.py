# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.usage_metrics_response import UsageMetricsResponse

class TestUsageMetricsResponse(unittest.TestCase):
    """UsageMetricsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UsageMetricsResponse:
        """Test UsageMetricsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UsageMetricsResponse`
        """
        model = UsageMetricsResponse()
        if include_optional:
            return UsageMetricsResponse(
                total_prompt_tokens = 56,
                total_completion_tokens = 56,
                total_tokens = 56,
                tokens_by_model = {
                    'key' : 56
                    },
                tokens_by_provider = {
                    'key' : 56
                    },
                total_cost = 1.337,
                cost_by_model = {
                    'key' : 1.337
                    },
                cost_by_provider = {
                    'key' : 1.337
                    },
                daily_usage = {
                    'key' : 56
                    },
                daily_cost = {
                    'key' : 1.337
                    },
                avg_response_time = 1.337,
                response_times_by_model = {
                    'key' : 1.337
                    },
                active_days = 56,
                peak_usage_hour = 56,
                conversations_per_day = 1.337
            )
        else:
            return UsageMetricsResponse(
                total_prompt_tokens = 56,
                total_completion_tokens = 56,
                total_tokens = 56,
                tokens_by_model = {
                    'key' : 56
                    },
                tokens_by_provider = {
                    'key' : 56
                    },
                total_cost = 1.337,
                cost_by_model = {
                    'key' : 1.337
                    },
                cost_by_provider = {
                    'key' : 1.337
                    },
                daily_usage = {
                    'key' : 56
                    },
                daily_cost = {
                    'key' : 1.337
                    },
                avg_response_time = 1.337,
                response_times_by_model = {
                    'key' : 1.337
                    },
                active_days = 56,
                peak_usage_hour = 56,
                conversations_per_day = 1.337,
        )
        """

    def testUsageMetricsResponse(self):
        """Test UsageMetricsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
