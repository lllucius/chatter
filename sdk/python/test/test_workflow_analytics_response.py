"""
Chatter API

Advanced AI Chatbot Backend API Platform

The version of the OpenAPI document: 0.1.0
Contact: support@chatter.ai
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from chatter_sdk.models.workflow_analytics_response import (
    WorkflowAnalyticsResponse,
)


class TestWorkflowAnalyticsResponse(unittest.TestCase):
    """WorkflowAnalyticsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
        self, include_optional
    ) -> WorkflowAnalyticsResponse:
        """Test WorkflowAnalyticsResponse
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `WorkflowAnalyticsResponse`
        """
        model = WorkflowAnalyticsResponse()
        if include_optional:
            return WorkflowAnalyticsResponse(
                complexity = chatter_sdk.models.complexity_metrics.ComplexityMetrics(
                    score = 56,
                    node_count = 56,
                    edge_count = 56,
                    depth = 56,
                    branching_factor = 1.337,
                    loop_complexity = 56,
                    conditional_complexity = 56, ),
                bottlenecks = [
                    chatter_sdk.models.bottleneck_info.BottleneckInfo(
                        node_id = '',
                        node_type = '',
                        reason = '',
                        severity = '',
                        suggestions = [
                            ''
                            ], )
                    ],
                optimization_suggestions = [
                    chatter_sdk.models.optimization_suggestion.OptimizationSuggestion(
                        type = '',
                        description = '',
                        impact = '',
                        node_ids = [
                            ''
                            ], )
                    ],
                execution_paths = 56,
                estimated_execution_time_ms = 56,
                risk_factors = [
                    ''
                    ],
                total_execution_time_ms = 56,
                error = '',
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                completed_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return WorkflowAnalyticsResponse(
                complexity = chatter_sdk.models.complexity_metrics.ComplexityMetrics(
                    score = 56,
                    node_count = 56,
                    edge_count = 56,
                    depth = 56,
                    branching_factor = 1.337,
                    loop_complexity = 56,
                    conditional_complexity = 56, ),
                bottlenecks = [
                    chatter_sdk.models.bottleneck_info.BottleneckInfo(
                        node_id = '',
                        node_type = '',
                        reason = '',
                        severity = '',
                        suggestions = [
                            ''
                            ], )
                    ],
                optimization_suggestions = [
                    chatter_sdk.models.optimization_suggestion.OptimizationSuggestion(
                        type = '',
                        description = '',
                        impact = '',
                        node_ids = [
                            ''
                            ], )
                    ],
                execution_paths = 56,
                risk_factors = [
                    ''
                    ],
                total_execution_time_ms = 56,
                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testWorkflowAnalyticsResponse(self):
        """Test WorkflowAnalyticsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
