# coding: utf-8

"""
    Chatter API

    Advanced AI Chatbot Backend API Platform

    The version of the OpenAPI document: 0.1.0
    Contact: support@chatter.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from chatter_sdk.models.workflow_definition_response import WorkflowDefinitionResponse

class TestWorkflowDefinitionResponse(unittest.TestCase):
    """WorkflowDefinitionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkflowDefinitionResponse:
        """Test WorkflowDefinitionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkflowDefinitionResponse`
        """
        model = WorkflowDefinitionResponse()
        if include_optional:
            return WorkflowDefinitionResponse(
                name = '0',
                description = '',
                nodes = [
                    chatter_sdk.models.workflow_node.WorkflowNode(
                        id = '', 
                        type = '', 
                        position = {
                            'key' : 1.337
                            }, 
                        data = chatter_sdk.models.workflow_node_data.WorkflowNodeData(
                            label = '', 
                            node_type = '', 
                            config = { }, ), 
                        selected = True, 
                        dragging = True, )
                    ],
                edges = [
                    chatter_sdk.models.workflow_edge.WorkflowEdge(
                        id = '', 
                        source = '', 
                        target = '', 
                        source_handle = '', 
                        target_handle = '', 
                        type = '', 
                        data = chatter_sdk.models.workflow_edge_data.WorkflowEdgeData(
                            condition = '', 
                            label = '', ), )
                    ],
                metadata = { },
                is_public = True,
                tags = [
                    ''
                    ],
                template_id = '',
                id = '',
                owner_id = '',
                version = 56
            )
        else:
            return WorkflowDefinitionResponse(
                name = '0',
                nodes = [
                    chatter_sdk.models.workflow_node.WorkflowNode(
                        id = '', 
                        type = '', 
                        position = {
                            'key' : 1.337
                            }, 
                        data = chatter_sdk.models.workflow_node_data.WorkflowNodeData(
                            label = '', 
                            node_type = '', 
                            config = { }, ), 
                        selected = True, 
                        dragging = True, )
                    ],
                edges = [
                    chatter_sdk.models.workflow_edge.WorkflowEdge(
                        id = '', 
                        source = '', 
                        target = '', 
                        source_handle = '', 
                        target_handle = '', 
                        type = '', 
                        data = chatter_sdk.models.workflow_edge_data.WorkflowEdgeData(
                            condition = '', 
                            label = '', ), )
                    ],
                id = '',
                owner_id = '',
        )
        """

    def testWorkflowDefinitionResponse(self):
        """Test WorkflowDefinitionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
