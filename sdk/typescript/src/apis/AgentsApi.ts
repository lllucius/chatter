/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentBulkCreateRequest,
  AgentBulkCreateResponse,
  AgentBulkDeleteRequest,
  AgentCreateRequest,
  AgentDeleteResponse,
  AgentHealthResponse,
  AgentInteractRequest,
  AgentInteractResponse,
  AgentListResponse,
  AgentResponse,
  AgentStatsResponse,
  AgentStatus,
  AgentType,
  AgentUpdateRequest,
  BodyListAgentsApiV1AgentsGet,
  HTTPValidationError,
} from '../models/index';
import {
    AgentBulkCreateRequestFromJSON,
    AgentBulkCreateRequestToJSON,
    AgentBulkCreateResponseFromJSON,
    AgentBulkCreateResponseToJSON,
    AgentBulkDeleteRequestFromJSON,
    AgentBulkDeleteRequestToJSON,
    AgentCreateRequestFromJSON,
    AgentCreateRequestToJSON,
    AgentDeleteResponseFromJSON,
    AgentDeleteResponseToJSON,
    AgentHealthResponseFromJSON,
    AgentHealthResponseToJSON,
    AgentInteractRequestFromJSON,
    AgentInteractRequestToJSON,
    AgentInteractResponseFromJSON,
    AgentInteractResponseToJSON,
    AgentListResponseFromJSON,
    AgentListResponseToJSON,
    AgentResponseFromJSON,
    AgentResponseToJSON,
    AgentStatsResponseFromJSON,
    AgentStatsResponseToJSON,
    AgentStatusFromJSON,
    AgentStatusToJSON,
    AgentTypeFromJSON,
    AgentTypeToJSON,
    AgentUpdateRequestFromJSON,
    AgentUpdateRequestToJSON,
    BodyListAgentsApiV1AgentsGetFromJSON,
    BodyListAgentsApiV1AgentsGetToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface BulkCreateAgentsApiV1AgentsBulkPostRequest {
    agentBulkCreateRequest: AgentBulkCreateRequest;
}

export interface BulkCreateAgentsApiV1AgentsBulkPost0Request {
    agentBulkCreateRequest: AgentBulkCreateRequest;
}

export interface BulkDeleteAgentsApiV1AgentsBulkDeleteRequest {
    agentBulkDeleteRequest: AgentBulkDeleteRequest;
}

export interface BulkDeleteAgentsApiV1AgentsBulkDelete0Request {
    agentBulkDeleteRequest: AgentBulkDeleteRequest;
}

export interface CreateAgentApiV1AgentsPostRequest {
    agentCreateRequest: AgentCreateRequest;
}

export interface CreateAgentApiV1AgentsPost0Request {
    agentCreateRequest: AgentCreateRequest;
}

export interface DeleteAgentApiV1AgentsAgentIdDeleteRequest {
    agentId: string;
}

export interface DeleteAgentApiV1AgentsAgentIdDelete0Request {
    agentId: string;
}

export interface GetAgentApiV1AgentsAgentIdGetRequest {
    agentId: string;
}

export interface GetAgentApiV1AgentsAgentIdGet0Request {
    agentId: string;
}

export interface GetAgentHealthApiV1AgentsAgentIdHealthGetRequest {
    agentId: string;
}

export interface GetAgentHealthApiV1AgentsAgentIdHealthGet0Request {
    agentId: string;
}

export interface InteractWithAgentApiV1AgentsAgentIdInteractPostRequest {
    agentId: string;
    agentInteractRequest: AgentInteractRequest;
}

export interface InteractWithAgentApiV1AgentsAgentIdInteractPost0Request {
    agentId: string;
    agentInteractRequest: AgentInteractRequest;
}

export interface ListAgentsApiV1AgentsGetRequest {
    agentType?: AgentType | null;
    status?: AgentStatus | null;
    bodyListAgentsApiV1AgentsGet?: BodyListAgentsApiV1AgentsGet;
}

export interface ListAgentsApiV1AgentsGet0Request {
    agentType?: AgentType | null;
    status?: AgentStatus | null;
    bodyListAgentsApiV1AgentsGet?: BodyListAgentsApiV1AgentsGet;
}

export interface UpdateAgentApiV1AgentsAgentIdPutRequest {
    agentId: string;
    agentUpdateRequest: AgentUpdateRequest;
}

export interface UpdateAgentApiV1AgentsAgentIdPut0Request {
    agentId: string;
    agentUpdateRequest: AgentUpdateRequest;
}

/**
 * AgentsApi - interface
 * 
 * @export
 * @interface AgentsApiInterface
 */
export interface AgentsApiInterface {
    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * @summary Bulk Create Agents
     * @param {AgentBulkCreateRequest} agentBulkCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    bulkCreateAgentsApiV1AgentsBulkPostRaw(requestParameters: BulkCreateAgentsApiV1AgentsBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentBulkCreateResponse>>;

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    bulkCreateAgentsApiV1AgentsBulkPost(requestParameters: BulkCreateAgentsApiV1AgentsBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentBulkCreateResponse>;

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * @summary Bulk Create Agents
     * @param {AgentBulkCreateRequest} agentBulkCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    bulkCreateAgentsApiV1AgentsBulkPost_1Raw(requestParameters: BulkCreateAgentsApiV1AgentsBulkPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentBulkCreateResponse>>;

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    bulkCreateAgentsApiV1AgentsBulkPost_1(requestParameters: BulkCreateAgentsApiV1AgentsBulkPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentBulkCreateResponse>;

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * @summary Bulk Delete Agents
     * @param {AgentBulkDeleteRequest} agentBulkDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    bulkDeleteAgentsApiV1AgentsBulkDeleteRaw(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    bulkDeleteAgentsApiV1AgentsBulkDelete(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * @summary Bulk Delete Agents
     * @param {AgentBulkDeleteRequest} agentBulkDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    bulkDeleteAgentsApiV1AgentsBulkDelete_2Raw(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    bulkDeleteAgentsApiV1AgentsBulkDelete_2(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * @summary Create a new agent
     * @param {AgentCreateRequest} agentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    createAgentApiV1AgentsPostRaw(requestParameters: CreateAgentApiV1AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    createAgentApiV1AgentsPost(requestParameters: CreateAgentApiV1AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * @summary Create a new agent
     * @param {AgentCreateRequest} agentCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    createAgentApiV1AgentsPost_3Raw(requestParameters: CreateAgentApiV1AgentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    createAgentApiV1AgentsPost_3(requestParameters: CreateAgentApiV1AgentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * @summary Delete Agent
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    deleteAgentApiV1AgentsAgentIdDeleteRaw(requestParameters: DeleteAgentApiV1AgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDeleteResponse>>;

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    deleteAgentApiV1AgentsAgentIdDelete(requestParameters: DeleteAgentApiV1AgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDeleteResponse>;

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * @summary Delete Agent
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    deleteAgentApiV1AgentsAgentIdDelete_4Raw(requestParameters: DeleteAgentApiV1AgentsAgentIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDeleteResponse>>;

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    deleteAgentApiV1AgentsAgentIdDelete_4(requestParameters: DeleteAgentApiV1AgentsAgentIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDeleteResponse>;

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * @summary Get Agent
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentApiV1AgentsAgentIdGetRaw(requestParameters: GetAgentApiV1AgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    getAgentApiV1AgentsAgentIdGet(requestParameters: GetAgentApiV1AgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * @summary Get Agent
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentApiV1AgentsAgentIdGet_5Raw(requestParameters: GetAgentApiV1AgentsAgentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    getAgentApiV1AgentsAgentIdGet_5(requestParameters: GetAgentApiV1AgentsAgentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * @summary Get Agent Health
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentHealthApiV1AgentsAgentIdHealthGetRaw(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentHealthResponse>>;

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    getAgentHealthApiV1AgentsAgentIdHealthGet(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentHealthResponse>;

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * @summary Get Agent Health
     * @param {string} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentHealthApiV1AgentsAgentIdHealthGet_6Raw(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentHealthResponse>>;

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    getAgentHealthApiV1AgentsAgentIdHealthGet_6(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentHealthResponse>;

    /**
     * Get comprehensive statistics about all agents for the current user.
     * @summary Get agent statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentStatsApiV1AgentsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentStatsResponse>>;

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    getAgentStatsApiV1AgentsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentStatsResponse>;

    /**
     * Get comprehensive statistics about all agents for the current user.
     * @summary Get agent statistics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentStatsApiV1AgentsStatsOverviewGet_7Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentStatsResponse>>;

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    getAgentStatsApiV1AgentsStatsOverviewGet_7(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentStatsResponse>;

    /**
     * Get predefined agent templates for common use cases.
     * @summary Get agent templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentTemplatesApiV1AgentsTemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>>;

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    getAgentTemplatesApiV1AgentsTemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>>;

    /**
     * Get predefined agent templates for common use cases.
     * @summary Get agent templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    getAgentTemplatesApiV1AgentsTemplatesGet_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>>;

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    getAgentTemplatesApiV1AgentsTemplatesGet_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>>;

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * @summary Interact with agent
     * @param {string} agentId 
     * @param {AgentInteractRequest} agentInteractRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    interactWithAgentApiV1AgentsAgentIdInteractPostRaw(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentInteractResponse>>;

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentInteractResponse>;

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * @summary Interact with agent
     * @param {string} agentId 
     * @param {AgentInteractRequest} agentInteractRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    interactWithAgentApiV1AgentsAgentIdInteractPost_9Raw(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentInteractResponse>>;

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    interactWithAgentApiV1AgentsAgentIdInteractPost_9(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentInteractResponse>;

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * @summary List agents
     * @param {AgentType} [agentType] 
     * @param {AgentStatus} [status] 
     * @param {BodyListAgentsApiV1AgentsGet} [bodyListAgentsApiV1AgentsGet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    listAgentsApiV1AgentsGetRaw(requestParameters: ListAgentsApiV1AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>>;

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    listAgentsApiV1AgentsGet(requestParameters: ListAgentsApiV1AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse>;

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * @summary List agents
     * @param {AgentType} [agentType] 
     * @param {AgentStatus} [status] 
     * @param {BodyListAgentsApiV1AgentsGet} [bodyListAgentsApiV1AgentsGet] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    listAgentsApiV1AgentsGet_10Raw(requestParameters: ListAgentsApiV1AgentsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>>;

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    listAgentsApiV1AgentsGet_10(requestParameters: ListAgentsApiV1AgentsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse>;

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * @summary Update Agent
     * @param {string} agentId 
     * @param {AgentUpdateRequest} agentUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    updateAgentApiV1AgentsAgentIdPutRaw(requestParameters: UpdateAgentApiV1AgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    updateAgentApiV1AgentsAgentIdPut(requestParameters: UpdateAgentApiV1AgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * @summary Update Agent
     * @param {string} agentId 
     * @param {AgentUpdateRequest} agentUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApiInterface
     */
    updateAgentApiV1AgentsAgentIdPut_11Raw(requestParameters: UpdateAgentApiV1AgentsAgentIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>>;

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    updateAgentApiV1AgentsAgentIdPut_11(requestParameters: UpdateAgentApiV1AgentsAgentIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse>;

}

/**
 * 
 */
export class AgentsApi extends runtime.BaseAPI implements AgentsApiInterface {

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    async bulkCreateAgentsApiV1AgentsBulkPostRaw(requestParameters: BulkCreateAgentsApiV1AgentsBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentBulkCreateResponse>> {
        if (requestParameters['agentBulkCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentBulkCreateRequest',
                'Required parameter "agentBulkCreateRequest" was null or undefined when calling bulkCreateAgentsApiV1AgentsBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentBulkCreateRequestToJSON(requestParameters['agentBulkCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentBulkCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    async bulkCreateAgentsApiV1AgentsBulkPost(requestParameters: BulkCreateAgentsApiV1AgentsBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentBulkCreateResponse> {
        const response = await this.bulkCreateAgentsApiV1AgentsBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    async bulkCreateAgentsApiV1AgentsBulkPost_1Raw(requestParameters: BulkCreateAgentsApiV1AgentsBulkPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentBulkCreateResponse>> {
        if (requestParameters['agentBulkCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentBulkCreateRequest',
                'Required parameter "agentBulkCreateRequest" was null or undefined when calling bulkCreateAgentsApiV1AgentsBulkPost_1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentBulkCreateRequestToJSON(requestParameters['agentBulkCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentBulkCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple agents in bulk.  Args:     request: Bulk creation request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk creation results
     * Bulk Create Agents
     */
    async bulkCreateAgentsApiV1AgentsBulkPost_1(requestParameters: BulkCreateAgentsApiV1AgentsBulkPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentBulkCreateResponse> {
        const response = await this.bulkCreateAgentsApiV1AgentsBulkPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    async bulkDeleteAgentsApiV1AgentsBulkDeleteRaw(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['agentBulkDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'agentBulkDeleteRequest',
                'Required parameter "agentBulkDeleteRequest" was null or undefined when calling bulkDeleteAgentsApiV1AgentsBulkDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AgentBulkDeleteRequestToJSON(requestParameters['agentBulkDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    async bulkDeleteAgentsApiV1AgentsBulkDelete(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.bulkDeleteAgentsApiV1AgentsBulkDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    async bulkDeleteAgentsApiV1AgentsBulkDelete_2Raw(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['agentBulkDeleteRequest'] == null) {
            throw new runtime.RequiredError(
                'agentBulkDeleteRequest',
                'Required parameter "agentBulkDeleteRequest" was null or undefined when calling bulkDeleteAgentsApiV1AgentsBulkDelete_2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AgentBulkDeleteRequestToJSON(requestParameters['agentBulkDeleteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete multiple agents in bulk.  Args:     request: Bulk deletion request     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Bulk deletion results
     * Bulk Delete Agents
     */
    async bulkDeleteAgentsApiV1AgentsBulkDelete_2(requestParameters: BulkDeleteAgentsApiV1AgentsBulkDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.bulkDeleteAgentsApiV1AgentsBulkDelete_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    async createAgentApiV1AgentsPostRaw(requestParameters: CreateAgentApiV1AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentCreateRequest',
                'Required parameter "agentCreateRequest" was null or undefined when calling createAgentApiV1AgentsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentCreateRequestToJSON(requestParameters['agentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    async createAgentApiV1AgentsPost(requestParameters: CreateAgentApiV1AgentsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.createAgentApiV1AgentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    async createAgentApiV1AgentsPost_3Raw(requestParameters: CreateAgentApiV1AgentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentCreateRequest',
                'Required parameter "agentCreateRequest" was null or undefined when calling createAgentApiV1AgentsPost_3().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentCreateRequestToJSON(requestParameters['agentCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Create a new AI agent with specified configuration and capabilities.
     * Create a new agent
     */
    async createAgentApiV1AgentsPost_3(requestParameters: CreateAgentApiV1AgentsPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.createAgentApiV1AgentsPost_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    async deleteAgentApiV1AgentsAgentIdDeleteRaw(requestParameters: DeleteAgentApiV1AgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDeleteResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling deleteAgentApiV1AgentsAgentIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    async deleteAgentApiV1AgentsAgentIdDelete(requestParameters: DeleteAgentApiV1AgentsAgentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDeleteResponse> {
        const response = await this.deleteAgentApiV1AgentsAgentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    async deleteAgentApiV1AgentsAgentIdDelete_4Raw(requestParameters: DeleteAgentApiV1AgentsAgentIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDeleteResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling deleteAgentApiV1AgentsAgentIdDelete_4().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an agent.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Deletion result
     * Delete Agent
     */
    async deleteAgentApiV1AgentsAgentIdDelete_4(requestParameters: DeleteAgentApiV1AgentsAgentIdDelete0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDeleteResponse> {
        const response = await this.deleteAgentApiV1AgentsAgentIdDelete_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    async getAgentApiV1AgentsAgentIdGetRaw(requestParameters: GetAgentApiV1AgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentApiV1AgentsAgentIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    async getAgentApiV1AgentsAgentIdGet(requestParameters: GetAgentApiV1AgentsAgentIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.getAgentApiV1AgentsAgentIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    async getAgentApiV1AgentsAgentIdGet_5Raw(requestParameters: GetAgentApiV1AgentsAgentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentApiV1AgentsAgentIdGet_5().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Get agent by ID.  Args:     agent_id: Agent ID     request: Get request parameters     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent data
     * Get Agent
     */
    async getAgentApiV1AgentsAgentIdGet_5(requestParameters: GetAgentApiV1AgentsAgentIdGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.getAgentApiV1AgentsAgentIdGet_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    async getAgentHealthApiV1AgentsAgentIdHealthGetRaw(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentHealthResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentHealthApiV1AgentsAgentIdHealthGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}/health`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentHealthResponseFromJSON(jsonValue));
    }

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    async getAgentHealthApiV1AgentsAgentIdHealthGet(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentHealthResponse> {
        const response = await this.getAgentHealthApiV1AgentsAgentIdHealthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    async getAgentHealthApiV1AgentsAgentIdHealthGet_6Raw(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentHealthResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getAgentHealthApiV1AgentsAgentIdHealthGet_6().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}/health`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentHealthResponseFromJSON(jsonValue));
    }

    /**
     * Get agent health status.  Args:     agent_id: Agent ID     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Agent health information
     * Get Agent Health
     */
    async getAgentHealthApiV1AgentsAgentIdHealthGet_6(requestParameters: GetAgentHealthApiV1AgentsAgentIdHealthGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentHealthResponse> {
        const response = await this.getAgentHealthApiV1AgentsAgentIdHealthGet_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    async getAgentStatsApiV1AgentsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/stats/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    async getAgentStatsApiV1AgentsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentStatsResponse> {
        const response = await this.getAgentStatsApiV1AgentsStatsOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    async getAgentStatsApiV1AgentsStatsOverviewGet_7Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/stats/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get comprehensive statistics about all agents for the current user.
     * Get agent statistics
     */
    async getAgentStatsApiV1AgentsStatsOverviewGet_7(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentStatsResponse> {
        const response = await this.getAgentStatsApiV1AgentsStatsOverviewGet_7Raw(initOverrides);
        return await response.value();
    }

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    async getAgentTemplatesApiV1AgentsTemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    async getAgentTemplatesApiV1AgentsTemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.getAgentTemplatesApiV1AgentsTemplatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    async getAgentTemplatesApiV1AgentsTemplatesGet_8Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get predefined agent templates for common use cases.
     * Get agent templates
     */
    async getAgentTemplatesApiV1AgentsTemplatesGet_8(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.getAgentTemplatesApiV1AgentsTemplatesGet_8Raw(initOverrides);
        return await response.value();
    }

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    async interactWithAgentApiV1AgentsAgentIdInteractPostRaw(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentInteractResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling interactWithAgentApiV1AgentsAgentIdInteractPost().'
            );
        }

        if (requestParameters['agentInteractRequest'] == null) {
            throw new runtime.RequiredError(
                'agentInteractRequest',
                'Required parameter "agentInteractRequest" was null or undefined when calling interactWithAgentApiV1AgentsAgentIdInteractPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}/interact`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentInteractRequestToJSON(requestParameters['agentInteractRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentInteractResponseFromJSON(jsonValue));
    }

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    async interactWithAgentApiV1AgentsAgentIdInteractPost(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentInteractResponse> {
        const response = await this.interactWithAgentApiV1AgentsAgentIdInteractPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    async interactWithAgentApiV1AgentsAgentIdInteractPost_9Raw(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentInteractResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling interactWithAgentApiV1AgentsAgentIdInteractPost_9().'
            );
        }

        if (requestParameters['agentInteractRequest'] == null) {
            throw new runtime.RequiredError(
                'agentInteractRequest',
                'Required parameter "agentInteractRequest" was null or undefined when calling interactWithAgentApiV1AgentsAgentIdInteractPost_9().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}/interact`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentInteractRequestToJSON(requestParameters['agentInteractRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentInteractResponseFromJSON(jsonValue));
    }

    /**
     * Send a message to an agent and receive a response. Rate limited per user per agent.
     * Interact with agent
     */
    async interactWithAgentApiV1AgentsAgentIdInteractPost_9(requestParameters: InteractWithAgentApiV1AgentsAgentIdInteractPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentInteractResponse> {
        const response = await this.interactWithAgentApiV1AgentsAgentIdInteractPost_9Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    async listAgentsApiV1AgentsGetRaw(requestParameters: ListAgentsApiV1AgentsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['agentType'] != null) {
            queryParameters['agent_type'] = requestParameters['agentType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: BodyListAgentsApiV1AgentsGetToJSON(requestParameters['bodyListAgentsApiV1AgentsGet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    async listAgentsApiV1AgentsGet(requestParameters: ListAgentsApiV1AgentsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.listAgentsApiV1AgentsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    async listAgentsApiV1AgentsGet_10Raw(requestParameters: ListAgentsApiV1AgentsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['agentType'] != null) {
            queryParameters['agent_type'] = requestParameters['agentType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: BodyListAgentsApiV1AgentsGetToJSON(requestParameters['bodyListAgentsApiV1AgentsGet']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentListResponseFromJSON(jsonValue));
    }

    /**
     * List all agents with optional filtering and pagination. Users can only see their own agents.
     * List agents
     */
    async listAgentsApiV1AgentsGet_10(requestParameters: ListAgentsApiV1AgentsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentListResponse> {
        const response = await this.listAgentsApiV1AgentsGet_10Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    async updateAgentApiV1AgentsAgentIdPutRaw(requestParameters: UpdateAgentApiV1AgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling updateAgentApiV1AgentsAgentIdPut().'
            );
        }

        if (requestParameters['agentUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentUpdateRequest',
                'Required parameter "agentUpdateRequest" was null or undefined when calling updateAgentApiV1AgentsAgentIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentUpdateRequestToJSON(requestParameters['agentUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    async updateAgentApiV1AgentsAgentIdPut(requestParameters: UpdateAgentApiV1AgentsAgentIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.updateAgentApiV1AgentsAgentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    async updateAgentApiV1AgentsAgentIdPut_11Raw(requestParameters: UpdateAgentApiV1AgentsAgentIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling updateAgentApiV1AgentsAgentIdPut_11().'
            );
        }

        if (requestParameters['agentUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'agentUpdateRequest',
                'Required parameter "agentUpdateRequest" was null or undefined when calling updateAgentApiV1AgentsAgentIdPut_11().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/agents/{agent_id}`;
        urlPath = urlPath.replace(`{${"agent_id"}}`, encodeURIComponent(String(requestParameters['agentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentUpdateRequestToJSON(requestParameters['agentUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentResponseFromJSON(jsonValue));
    }

    /**
     * Update an agent.  Args:     agent_id: Agent ID     agent_data: Agent update data     current_user: Current authenticated user     agent_manager: Agent manager instance  Returns:     Updated agent data
     * Update Agent
     */
    async updateAgentApiV1AgentsAgentIdPut_11(requestParameters: UpdateAgentApiV1AgentsAgentIdPut0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentResponse> {
        const response = await this.updateAgentApiV1AgentsAgentIdPut_11Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
