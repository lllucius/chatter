/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  APIKeyCreate,
  APIKeyResponse,
  APIKeyRevokeResponse,
  AccountDeactivateResponse,
  HTTPValidationError,
  LogoutResponse,
  PasswordChange,
  PasswordChangeResponse,
  PasswordResetConfirmResponse,
  PasswordResetRequestResponse,
  TokenRefreshResponse,
  TokenResponse,
  UserCreate,
  UserLogin,
  UserResponse,
  UserUpdate,
} from '../models/index';
import {
    APIKeyCreateFromJSON,
    APIKeyCreateToJSON,
    APIKeyResponseFromJSON,
    APIKeyResponseToJSON,
    APIKeyRevokeResponseFromJSON,
    APIKeyRevokeResponseToJSON,
    AccountDeactivateResponseFromJSON,
    AccountDeactivateResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LogoutResponseFromJSON,
    LogoutResponseToJSON,
    PasswordChangeFromJSON,
    PasswordChangeToJSON,
    PasswordChangeResponseFromJSON,
    PasswordChangeResponseToJSON,
    PasswordResetConfirmResponseFromJSON,
    PasswordResetConfirmResponseToJSON,
    PasswordResetRequestResponseFromJSON,
    PasswordResetRequestResponseToJSON,
    TokenRefreshResponseFromJSON,
    TokenRefreshResponseToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserLoginFromJSON,
    UserLoginToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
    UserUpdateFromJSON,
    UserUpdateToJSON,
} from '../models/index';

export interface ChangePasswordApiV1AuthChangePasswordPostRequest {
    passwordChange: PasswordChange;
}

export interface ConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest {
    token: string;
    newPassword: string;
}

export interface CreateApiKeyApiV1AuthApiKeyPostRequest {
    aPIKeyCreate: APIKeyCreate;
}

export interface LoginApiV1AuthLoginPostRequest {
    userLogin: UserLogin;
}

export interface RegisterApiV1AuthRegisterPostRequest {
    userCreate: UserCreate;
}

export interface RequestPasswordResetApiV1AuthPasswordResetRequestPostRequest {
    email: string;
}

export interface UpdateProfileApiV1AuthMePutRequest {
    userUpdate: UserUpdate;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Change user password with enhanced security logging.  Args:     password_data: Password change data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Change Password
     * @param {PasswordChange} passwordChange 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    changePasswordApiV1AuthChangePasswordPostRaw(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordChangeResponse>>;

    /**
     * Change user password with enhanced security logging.  Args:     password_data: Password change data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Change Password
     */
    changePasswordApiV1AuthChangePasswordPost(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordChangeResponse>;

    /**
     * Confirm password reset with enhanced security logging.  Args:     token: Reset token     new_password: New password     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * @summary Confirm Password Reset
     * @param {string} token 
     * @param {string} newPassword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    confirmPasswordResetApiV1AuthPasswordResetConfirmPostRaw(requestParameters: ConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetConfirmResponse>>;

    /**
     * Confirm password reset with enhanced security logging.  Args:     token: Reset token     new_password: New password     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Confirm Password Reset
     */
    confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters: ConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetConfirmResponse>;

    /**
     * Create API key for current user with enhanced security.  Args:     key_data: API key creation data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * @summary Create Api Key
     * @param {APIKeyCreate} aPIKeyCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    createApiKeyApiV1AuthApiKeyPostRaw(requestParameters: CreateApiKeyApiV1AuthApiKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyResponse>>;

    /**
     * Create API key for current user with enhanced security.  Args:     key_data: API key creation data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * Create Api Key
     */
    createApiKeyApiV1AuthApiKeyPost(requestParameters: CreateApiKeyApiV1AuthApiKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyResponse>;

    /**
     * Deactivate current user account with enhanced security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Deactivate Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    deactivateAccountApiV1AuthAccountDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDeactivateResponse>>;

    /**
     * Deactivate current user account with enhanced security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Deactivate Account
     */
    deactivateAccountApiV1AuthAccountDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDeactivateResponse>;

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * @summary Get Current User Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    getCurrentUserInfoApiV1AuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * Get Current User Info
     */
    getCurrentUserInfoApiV1AuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    listApiKeysApiV1AuthApiKeysGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<APIKeyResponse>>>;

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * List Api Keys
     */
    listApiKeysApiV1AuthApiKeysGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<APIKeyResponse>>;

    /**
     * Authenticate user and return tokens with enhanced security.  Args:     user_data: User login data     request: HTTP request for security logging     response: HTTP response for cookie setting     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Login
     * @param {UserLogin} userLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    loginApiV1AuthLoginPostRaw(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * Authenticate user and return tokens with enhanced security.  Args:     user_data: User login data     request: HTTP request for security logging     response: HTTP response for cookie setting     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Login
     */
    loginApiV1AuthLoginPost(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse>;

    /**
     * Logout and revoke current token with enhanced security.  Args:     request: HTTP request for security logging     response: HTTP response for cookie clearing     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    logoutApiV1AuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutResponse>>;

    /**
     * Logout and revoke current token with enhanced security.  Args:     request: HTTP request for security logging     response: HTTP response for cookie clearing     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Logout
     */
    logoutApiV1AuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutResponse>;

    /**
     * Refresh access token with enhanced security validation.  Args:     request: HTTP request for security logging and cookie reading     response: HTTP response for setting new refresh token cookie     auth_service: Authentication service  Returns:     New access token (refresh token set in HttpOnly cookie)
     * @summary Refresh Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    refreshTokenApiV1AuthRefreshPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRefreshResponse>>;

    /**
     * Refresh access token with enhanced security validation.  Args:     request: HTTP request for security logging and cookie reading     response: HTTP response for setting new refresh token cookie     auth_service: Authentication service  Returns:     New access token (refresh token set in HttpOnly cookie)
     * Refresh Token
     */
    refreshTokenApiV1AuthRefreshPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRefreshResponse>;

    /**
     * Register a new user with enhanced security validation.  Args:     user_data: User registration data     request: HTTP request for security logging     auth_service: Authentication service  Returns:     User data and authentication tokens
     * @summary Register
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    registerApiV1AuthRegisterPostRaw(requestParameters: RegisterApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>>;

    /**
     * Register a new user with enhanced security validation.  Args:     user_data: User registration data     request: HTTP request for security logging     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Register
     */
    registerApiV1AuthRegisterPost(requestParameters: RegisterApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse>;

    /**
     * Request password reset with enhanced security logging.  Args:     email: User email     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * @summary Request Password Reset
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    requestPasswordResetApiV1AuthPasswordResetRequestPostRaw(requestParameters: RequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetRequestResponse>>;

    /**
     * Request password reset with enhanced security logging.  Args:     email: User email     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Request Password Reset
     */
    requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters: RequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetRequestResponse>;

    /**
     * Revoke current user\'s API key with security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * @summary Revoke Api Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    revokeApiKeyApiV1AuthApiKeyDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyRevokeResponse>>;

    /**
     * Revoke current user\'s API key with security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Revoke Api Key
     */
    revokeApiKeyApiV1AuthApiKeyDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyRevokeResponse>;

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * @summary Update Profile
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    updateProfileApiV1AuthMePutRaw(requestParameters: UpdateProfileApiV1AuthMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>>;

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * Update Profile
     */
    updateProfileApiV1AuthMePut(requestParameters: UpdateProfileApiV1AuthMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Change user password with enhanced security logging.  Args:     password_data: Password change data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Change Password
     */
    async changePasswordApiV1AuthChangePasswordPostRaw(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordChangeResponse>> {
        if (requestParameters['passwordChange'] == null) {
            throw new runtime.RequiredError(
                'passwordChange',
                'Required parameter "passwordChange" was null or undefined when calling changePasswordApiV1AuthChangePasswordPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/change-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeToJSON(requestParameters['passwordChange']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordChangeResponseFromJSON(jsonValue));
    }

    /**
     * Change user password with enhanced security logging.  Args:     password_data: Password change data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Change Password
     */
    async changePasswordApiV1AuthChangePasswordPost(requestParameters: ChangePasswordApiV1AuthChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordChangeResponse> {
        const response = await this.changePasswordApiV1AuthChangePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Confirm password reset with enhanced security logging.  Args:     token: Reset token     new_password: New password     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Confirm Password Reset
     */
    async confirmPasswordResetApiV1AuthPasswordResetConfirmPostRaw(requestParameters: ConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetConfirmResponse>> {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling confirmPasswordResetApiV1AuthPasswordResetConfirmPost().'
            );
        }

        if (requestParameters['newPassword'] == null) {
            throw new runtime.RequiredError(
                'newPassword',
                'Required parameter "newPassword" was null or undefined when calling confirmPasswordResetApiV1AuthPasswordResetConfirmPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['token'] != null) {
            queryParameters['token'] = requestParameters['token'];
        }

        if (requestParameters['newPassword'] != null) {
            queryParameters['new_password'] = requestParameters['newPassword'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/password-reset/confirm`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetConfirmResponseFromJSON(jsonValue));
    }

    /**
     * Confirm password reset with enhanced security logging.  Args:     token: Reset token     new_password: New password     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Confirm Password Reset
     */
    async confirmPasswordResetApiV1AuthPasswordResetConfirmPost(requestParameters: ConfirmPasswordResetApiV1AuthPasswordResetConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetConfirmResponse> {
        const response = await this.confirmPasswordResetApiV1AuthPasswordResetConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create API key for current user with enhanced security.  Args:     key_data: API key creation data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * Create Api Key
     */
    async createApiKeyApiV1AuthApiKeyPostRaw(requestParameters: CreateApiKeyApiV1AuthApiKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyResponse>> {
        if (requestParameters['aPIKeyCreate'] == null) {
            throw new runtime.RequiredError(
                'aPIKeyCreate',
                'Required parameter "aPIKeyCreate" was null or undefined when calling createApiKeyApiV1AuthApiKeyPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/api-key`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: APIKeyCreateToJSON(requestParameters['aPIKeyCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create API key for current user with enhanced security.  Args:     key_data: API key creation data     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Created API key
     * Create Api Key
     */
    async createApiKeyApiV1AuthApiKeyPost(requestParameters: CreateApiKeyApiV1AuthApiKeyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyResponse> {
        const response = await this.createApiKeyApiV1AuthApiKeyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deactivate current user account with enhanced security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Deactivate Account
     */
    async deactivateAccountApiV1AuthAccountDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountDeactivateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/account`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountDeactivateResponseFromJSON(jsonValue));
    }

    /**
     * Deactivate current user account with enhanced security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Deactivate Account
     */
    async deactivateAccountApiV1AuthAccountDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountDeactivateResponse> {
        const response = await this.deactivateAccountApiV1AuthAccountDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * Get Current User Info
     */
    async getCurrentUserInfoApiV1AuthMeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Get current user information.  Args:     current_user: Current authenticated user  Returns:     Current user data
     * Get Current User Info
     */
    async getCurrentUserInfoApiV1AuthMeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.getCurrentUserInfoApiV1AuthMeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * List Api Keys
     */
    async listApiKeysApiV1AuthApiKeysGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<APIKeyResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/api-keys`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(APIKeyResponseFromJSON));
    }

    /**
     * List user\'s API keys.  Args:     current_user: Current authenticated user     auth_service: Authentication service  Returns:     List of API keys
     * List Api Keys
     */
    async listApiKeysApiV1AuthApiKeysGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<APIKeyResponse>> {
        const response = await this.listApiKeysApiV1AuthApiKeysGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user and return tokens with enhanced security.  Args:     user_data: User login data     request: HTTP request for security logging     response: HTTP response for cookie setting     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Login
     */
    async loginApiV1AuthLoginPostRaw(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['userLogin'] == null) {
            throw new runtime.RequiredError(
                'userLogin',
                'Required parameter "userLogin" was null or undefined when calling loginApiV1AuthLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginToJSON(requestParameters['userLogin']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Authenticate user and return tokens with enhanced security.  Args:     user_data: User login data     request: HTTP request for security logging     response: HTTP response for cookie setting     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Login
     */
    async loginApiV1AuthLoginPost(requestParameters: LoginApiV1AuthLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.loginApiV1AuthLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout and revoke current token with enhanced security.  Args:     request: HTTP request for security logging     response: HTTP response for cookie clearing     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Logout
     */
    async logoutApiV1AuthLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutResponseFromJSON(jsonValue));
    }

    /**
     * Logout and revoke current token with enhanced security.  Args:     request: HTTP request for security logging     response: HTTP response for cookie clearing     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Logout
     */
    async logoutApiV1AuthLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutResponse> {
        const response = await this.logoutApiV1AuthLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Refresh access token with enhanced security validation.  Args:     request: HTTP request for security logging and cookie reading     response: HTTP response for setting new refresh token cookie     auth_service: Authentication service  Returns:     New access token (refresh token set in HttpOnly cookie)
     * Refresh Token
     */
    async refreshTokenApiV1AuthRefreshPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenRefreshResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/refresh`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshResponseFromJSON(jsonValue));
    }

    /**
     * Refresh access token with enhanced security validation.  Args:     request: HTTP request for security logging and cookie reading     response: HTTP response for setting new refresh token cookie     auth_service: Authentication service  Returns:     New access token (refresh token set in HttpOnly cookie)
     * Refresh Token
     */
    async refreshTokenApiV1AuthRefreshPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenRefreshResponse> {
        const response = await this.refreshTokenApiV1AuthRefreshPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new user with enhanced security validation.  Args:     user_data: User registration data     request: HTTP request for security logging     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Register
     */
    async registerApiV1AuthRegisterPostRaw(requestParameters: RegisterApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling registerApiV1AuthRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/auth/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * Register a new user with enhanced security validation.  Args:     user_data: User registration data     request: HTTP request for security logging     auth_service: Authentication service  Returns:     User data and authentication tokens
     * Register
     */
    async registerApiV1AuthRegisterPost(requestParameters: RegisterApiV1AuthRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.registerApiV1AuthRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request password reset with enhanced security logging.  Args:     email: User email     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Request Password Reset
     */
    async requestPasswordResetApiV1AuthPasswordResetRequestPostRaw(requestParameters: RequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordResetRequestResponse>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling requestPasswordResetApiV1AuthPasswordResetRequestPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/auth/password-reset/request`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetRequestResponseFromJSON(jsonValue));
    }

    /**
     * Request password reset with enhanced security logging.  Args:     email: User email     request: HTTP request for security logging     auth_service: Authentication service  Returns:     Success message
     * Request Password Reset
     */
    async requestPasswordResetApiV1AuthPasswordResetRequestPost(requestParameters: RequestPasswordResetApiV1AuthPasswordResetRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordResetRequestResponse> {
        const response = await this.requestPasswordResetApiV1AuthPasswordResetRequestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke current user\'s API key with security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Revoke Api Key
     */
    async revokeApiKeyApiV1AuthApiKeyDeleteRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<APIKeyRevokeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/api-key`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => APIKeyRevokeResponseFromJSON(jsonValue));
    }

    /**
     * Revoke current user\'s API key with security logging.  Args:     request: HTTP request for security logging     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Success message
     * Revoke Api Key
     */
    async revokeApiKeyApiV1AuthApiKeyDelete(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<APIKeyRevokeResponse> {
        const response = await this.revokeApiKeyApiV1AuthApiKeyDeleteRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * Update Profile
     */
    async updateProfileApiV1AuthMePutRaw(requestParameters: UpdateProfileApiV1AuthMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters['userUpdate'] == null) {
            throw new runtime.RequiredError(
                'userUpdate',
                'Required parameter "userUpdate" was null or undefined when calling updateProfileApiV1AuthMePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/auth/me`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters['userUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Update current user profile.  Args:     user_data: Profile update data     current_user: Current authenticated user     auth_service: Authentication service  Returns:     Updated user data
     * Update Profile
     */
    async updateProfileApiV1AuthMePut(requestParameters: UpdateProfileApiV1AuthMePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.updateProfileApiV1AuthMePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
