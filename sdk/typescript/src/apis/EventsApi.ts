/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SSEStatsResponse,
  TestEventResponse,
} from '../models/index';
import {
    SSEStatsResponseFromJSON,
    SSEStatsResponseToJSON,
    TestEventResponseFromJSON,
    TestEventResponseToJSON,
} from '../models/index';

/**
 * EventsApi - interface
 * 
 * @export
 * @interface EventsApiInterface
 */
export interface EventsApiInterface {
    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated admin user  Returns:     StreamingResponse with SSE format for all events
     * @summary Admin Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    adminEventsStreamApiV1EventsAdminStreamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated admin user  Returns:     StreamingResponse with SSE format for all events
     * Admin Events Stream
     */
    adminEventsStreamApiV1EventsAdminStreamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * @summary Events Stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    eventsStreamApiV1EventsStreamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * Events Stream
     */
    eventsStreamApiV1EventsStreamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated admin user  Returns:     SSE service statistics
     * @summary Get Sse Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getSseStatsApiV1EventsStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSEStatsResponse>>;

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated admin user  Returns:     SSE service statistics
     * Get Sse Stats
     */
    getSseStatsApiV1EventsStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSEStatsResponse>;

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated admin user  Returns:     Success message with event ID
     * @summary Trigger Broadcast Test
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    triggerBroadcastTestApiV1EventsBroadcastTestPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestEventResponse>>;

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated admin user  Returns:     Success message with event ID
     * Trigger Broadcast Test
     */
    triggerBroadcastTestApiV1EventsBroadcastTestPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestEventResponse>;

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * @summary Trigger Test Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    triggerTestEventApiV1EventsTestEventPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestEventResponse>>;

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * Trigger Test Event
     */
    triggerTestEventApiV1EventsTestEventPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestEventResponse>;

}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI implements EventsApiInterface {

    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated admin user  Returns:     StreamingResponse with SSE format for all events
     * Admin Events Stream
     */
    async adminEventsStreamApiV1EventsAdminStreamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/events/admin/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream all system events for admin users.  Args:     request: FastAPI request object     current_user: Current authenticated admin user  Returns:     StreamingResponse with SSE format for all events
     * Admin Events Stream
     */
    async adminEventsStreamApiV1EventsAdminStreamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.adminEventsStreamApiV1EventsAdminStreamGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * Events Stream
     */
    async eventsStreamApiV1EventsStreamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/events/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Stream real-time events via Server-Sent Events.  Args:     request: FastAPI request object     current_user: Current authenticated user  Returns:     StreamingResponse with SSE format
     * Events Stream
     */
    async eventsStreamApiV1EventsStreamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.eventsStreamApiV1EventsStreamGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated admin user  Returns:     SSE service statistics
     * Get Sse Stats
     */
    async getSseStatsApiV1EventsStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSEStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/events/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSEStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get SSE service statistics.  Args:     current_user: Current authenticated admin user  Returns:     SSE service statistics
     * Get Sse Stats
     */
    async getSseStatsApiV1EventsStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSEStatsResponse> {
        const response = await this.getSseStatsApiV1EventsStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated admin user  Returns:     Success message with event ID
     * Trigger Broadcast Test
     */
    async triggerBroadcastTestApiV1EventsBroadcastTestPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestEventResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/events/broadcast-test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestEventResponseFromJSON(jsonValue));
    }

    /**
     * Trigger a broadcast test event for all users.  Args:     current_user: Current authenticated admin user  Returns:     Success message with event ID
     * Trigger Broadcast Test
     */
    async triggerBroadcastTestApiV1EventsBroadcastTestPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestEventResponse> {
        const response = await this.triggerBroadcastTestApiV1EventsBroadcastTestPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * Trigger Test Event
     */
    async triggerTestEventApiV1EventsTestEventPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TestEventResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/events/test-event`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TestEventResponseFromJSON(jsonValue));
    }

    /**
     * Trigger a test event for the current user.  Args:     current_user: Current authenticated user  Returns:     Success message with event ID
     * Trigger Test Event
     */
    async triggerTestEventApiV1EventsTestEventPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TestEventResponse> {
        const response = await this.triggerTestEventApiV1EventsTestEventPostRaw(initOverrides);
        return await response.value();
    }

}
