/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CorrelationTraceResponse,
  HTTPValidationError,
  HealthCheckResponse,
  MetricsResponse,
  ReadinessCheckResponse,
} from '../models/index';
import {
    CorrelationTraceResponseFromJSON,
    CorrelationTraceResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HealthCheckResponseFromJSON,
    HealthCheckResponseToJSON,
    MetricsResponseFromJSON,
    MetricsResponseToJSON,
    ReadinessCheckResponseFromJSON,
    ReadinessCheckResponseToJSON,
} from '../models/index';

export interface GetCorrelationTraceTraceCorrelationIdGetRequest {
    correlationId: string;
}

/**
 * HealthApi - interface
 * 
 * @export
 * @interface HealthApiInterface
 */
export interface HealthApiInterface {
    /**
     * Get trace of all requests for a correlation ID.  Args:     correlation_id: The correlation ID to trace  Returns:     List of requests associated with the correlation ID
     * @summary Get Correlation Trace
     * @param {string} correlationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    getCorrelationTraceTraceCorrelationIdGetRaw(requestParameters: GetCorrelationTraceTraceCorrelationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorrelationTraceResponse>>;

    /**
     * Get trace of all requests for a correlation ID.  Args:     correlation_id: The correlation ID to trace  Returns:     List of requests associated with the correlation ID
     * Get Correlation Trace
     */
    getCorrelationTraceTraceCorrelationIdGet(requestParameters: GetCorrelationTraceTraceCorrelationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorrelationTraceResponse>;

    /**
     * Get application metrics and monitoring data.  Returns:     Application metrics including performance and health data
     * @summary Get Metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    getMetricsMetricsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>>;

    /**
     * Get application metrics and monitoring data.  Returns:     Application metrics including performance and health data
     * Get Metrics
     */
    getMetricsMetricsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse>;

    /**
     * Basic health check endpoint.  Returns:     Health status
     * @summary Health Check Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    healthCheckEndpointHealthzGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>>;

    /**
     * Basic health check endpoint.  Returns:     Health status
     * Health Check Endpoint
     */
    healthCheckEndpointHealthzGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse>;

    /**
     * Liveness check endpoint for Kubernetes.  This is a simple liveness probe that checks if the application process is running and responding. It should NOT check external dependencies.  Returns:     Health status indicating the application is alive
     * @summary Liveness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    livenessCheckLiveGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>>;

    /**
     * Liveness check endpoint for Kubernetes.  This is a simple liveness probe that checks if the application process is running and responding. It should NOT check external dependencies.  Returns:     Health status indicating the application is alive
     * Liveness Check
     */
    livenessCheckLiveGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse>;

    /**
     * Readiness check endpoint with database connectivity.  This checks that the application is ready to serve traffic by validating that all external dependencies (database, etc.) are available.  Args:     session: Database session  Returns:     Readiness status with detailed checks.     Returns 200 if ready, 503 if not ready.
     * @summary Readiness Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApiInterface
     */
    readinessCheckReadyzGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadinessCheckResponse>>;

    /**
     * Readiness check endpoint with database connectivity.  This checks that the application is ready to serve traffic by validating that all external dependencies (database, etc.) are available.  Args:     session: Database session  Returns:     Readiness status with detailed checks.     Returns 200 if ready, 503 if not ready.
     * Readiness Check
     */
    readinessCheckReadyzGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadinessCheckResponse>;

}

/**
 * 
 */
export class HealthApi extends runtime.BaseAPI implements HealthApiInterface {

    /**
     * Get trace of all requests for a correlation ID.  Args:     correlation_id: The correlation ID to trace  Returns:     List of requests associated with the correlation ID
     * Get Correlation Trace
     */
    async getCorrelationTraceTraceCorrelationIdGetRaw(requestParameters: GetCorrelationTraceTraceCorrelationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CorrelationTraceResponse>> {
        if (requestParameters['correlationId'] == null) {
            throw new runtime.RequiredError(
                'correlationId',
                'Required parameter "correlationId" was null or undefined when calling getCorrelationTraceTraceCorrelationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/trace/{correlation_id}`;
        urlPath = urlPath.replace(`{${"correlation_id"}}`, encodeURIComponent(String(requestParameters['correlationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CorrelationTraceResponseFromJSON(jsonValue));
    }

    /**
     * Get trace of all requests for a correlation ID.  Args:     correlation_id: The correlation ID to trace  Returns:     List of requests associated with the correlation ID
     * Get Correlation Trace
     */
    async getCorrelationTraceTraceCorrelationIdGet(requestParameters: GetCorrelationTraceTraceCorrelationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CorrelationTraceResponse> {
        const response = await this.getCorrelationTraceTraceCorrelationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get application metrics and monitoring data.  Returns:     Application metrics including performance and health data
     * Get Metrics
     */
    async getMetricsMetricsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/metrics`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsResponseFromJSON(jsonValue));
    }

    /**
     * Get application metrics and monitoring data.  Returns:     Application metrics including performance and health data
     * Get Metrics
     */
    async getMetricsMetricsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsResponse> {
        const response = await this.getMetricsMetricsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Basic health check endpoint.  Returns:     Health status
     * Health Check Endpoint
     */
    async healthCheckEndpointHealthzGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/healthz`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * Basic health check endpoint.  Returns:     Health status
     * Health Check Endpoint
     */
    async healthCheckEndpointHealthzGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse> {
        const response = await this.healthCheckEndpointHealthzGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Liveness check endpoint for Kubernetes.  This is a simple liveness probe that checks if the application process is running and responding. It should NOT check external dependencies.  Returns:     Health status indicating the application is alive
     * Liveness Check
     */
    async livenessCheckLiveGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/live`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * Liveness check endpoint for Kubernetes.  This is a simple liveness probe that checks if the application process is running and responding. It should NOT check external dependencies.  Returns:     Health status indicating the application is alive
     * Liveness Check
     */
    async livenessCheckLiveGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheckResponse> {
        const response = await this.livenessCheckLiveGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Readiness check endpoint with database connectivity.  This checks that the application is ready to serve traffic by validating that all external dependencies (database, etc.) are available.  Args:     session: Database session  Returns:     Readiness status with detailed checks.     Returns 200 if ready, 503 if not ready.
     * Readiness Check
     */
    async readinessCheckReadyzGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReadinessCheckResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/readyz`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadinessCheckResponseFromJSON(jsonValue));
    }

    /**
     * Readiness check endpoint with database connectivity.  This checks that the application is ready to serve traffic by validating that all external dependencies (database, etc.) are available.  Args:     session: Database session  Returns:     Readiness status with detailed checks.     Returns 200 if ready, 503 if not ready.
     * Readiness Check
     */
    async readinessCheckReadyzGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReadinessCheckResponse> {
        const response = await this.readinessCheckReadyzGetRaw(initOverrides);
        return await response.value();
    }

}
