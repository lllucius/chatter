/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultProvider,
  EmbeddingSpaceCreate,
  EmbeddingSpaceDefaultResponse,
  EmbeddingSpaceDeleteResponse,
  EmbeddingSpaceList,
  EmbeddingSpaceUpdate,
  EmbeddingSpaceWithModel,
  HTTPValidationError,
  ModelDefCreate,
  ModelDefList,
  ModelDefUpdate,
  ModelDefWithProvider,
  ModelDefaultResponse,
  ModelDeleteResponse,
  ModelType,
  Provider,
  ProviderCreate,
  ProviderDefaultResponse,
  ProviderDeleteResponse,
  ProviderList,
  ProviderUpdate,
} from '../models/index';
import {
    DefaultProviderFromJSON,
    DefaultProviderToJSON,
    EmbeddingSpaceCreateFromJSON,
    EmbeddingSpaceCreateToJSON,
    EmbeddingSpaceDefaultResponseFromJSON,
    EmbeddingSpaceDefaultResponseToJSON,
    EmbeddingSpaceDeleteResponseFromJSON,
    EmbeddingSpaceDeleteResponseToJSON,
    EmbeddingSpaceListFromJSON,
    EmbeddingSpaceListToJSON,
    EmbeddingSpaceUpdateFromJSON,
    EmbeddingSpaceUpdateToJSON,
    EmbeddingSpaceWithModelFromJSON,
    EmbeddingSpaceWithModelToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ModelDefCreateFromJSON,
    ModelDefCreateToJSON,
    ModelDefListFromJSON,
    ModelDefListToJSON,
    ModelDefUpdateFromJSON,
    ModelDefUpdateToJSON,
    ModelDefWithProviderFromJSON,
    ModelDefWithProviderToJSON,
    ModelDefaultResponseFromJSON,
    ModelDefaultResponseToJSON,
    ModelDeleteResponseFromJSON,
    ModelDeleteResponseToJSON,
    ModelTypeFromJSON,
    ModelTypeToJSON,
    ProviderFromJSON,
    ProviderToJSON,
    ProviderCreateFromJSON,
    ProviderCreateToJSON,
    ProviderDefaultResponseFromJSON,
    ProviderDefaultResponseToJSON,
    ProviderDeleteResponseFromJSON,
    ProviderDeleteResponseToJSON,
    ProviderListFromJSON,
    ProviderListToJSON,
    ProviderUpdateFromJSON,
    ProviderUpdateToJSON,
} from '../models/index';

export interface CreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest {
    embeddingSpaceCreate: EmbeddingSpaceCreate;
}

export interface CreateModelApiV1ModelsModelsPostRequest {
    modelDefCreate: ModelDefCreate;
}

export interface CreateProviderApiV1ModelsProvidersPostRequest {
    providerCreate: ProviderCreate;
}

export interface DeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest {
    spaceId: string;
}

export interface DeleteModelApiV1ModelsModelsModelIdDeleteRequest {
    modelId: string;
}

export interface DeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest {
    providerId: string;
}

export interface GetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest {
    modelType: ModelType;
}

export interface GetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest {
    modelType: ModelType;
}

export interface GetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest {
    spaceId: string;
}

export interface GetModelApiV1ModelsModelsModelIdGetRequest {
    modelId: string;
}

export interface GetProviderApiV1ModelsProvidersProviderIdGetRequest {
    providerId: string;
}

export interface ListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest {
    modelId?: string;
    page?: number;
    perPage?: number;
    activeOnly?: boolean;
}

export interface ListModelsApiV1ModelsModelsGetRequest {
    providerId?: string;
    modelType?: ModelType;
    page?: number;
    perPage?: number;
    activeOnly?: boolean;
}

export interface ListProvidersApiV1ModelsProvidersGetRequest {
    page?: number;
    perPage?: number;
    activeOnly?: boolean;
}

export interface SetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest {
    spaceId: string;
}

export interface SetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest {
    modelId: string;
}

export interface SetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest {
    providerId: string;
    defaultProvider: DefaultProvider;
}

export interface UpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest {
    spaceId: string;
    embeddingSpaceUpdate: EmbeddingSpaceUpdate;
}

export interface UpdateModelApiV1ModelsModelsModelIdPutRequest {
    modelId: string;
    modelDefUpdate: ModelDefUpdate;
}

export interface UpdateProviderApiV1ModelsProvidersProviderIdPutRequest {
    providerId: string;
    providerUpdate: ProviderUpdate;
}

/**
 * ModelRegistryApi - interface
 * 
 * @export
 * @interface ModelRegistryApiInterface
 */
export interface ModelRegistryApiInterface {
    /**
     * Create a new embedding space with backing table and index.
     * @summary Create Embedding Space
     * @param {EmbeddingSpaceCreate} embeddingSpaceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRaw(requestParameters: CreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>>;

    /**
     * Create a new embedding space with backing table and index.
     * Create Embedding Space
     */
    createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters: CreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel>;

    /**
     * Create a new model definition.
     * @summary Create Model
     * @param {ModelDefCreate} modelDefCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createModelApiV1ModelsModelsPostRaw(requestParameters: CreateModelApiV1ModelsModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>>;

    /**
     * Create a new model definition.
     * Create Model
     */
    createModelApiV1ModelsModelsPost(requestParameters: CreateModelApiV1ModelsModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider>;

    /**
     * Create a new provider.
     * @summary Create Provider
     * @param {ProviderCreate} providerCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    createProviderApiV1ModelsProvidersPostRaw(requestParameters: CreateProviderApiV1ModelsProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>>;

    /**
     * Create a new provider.
     * Create Provider
     */
    createProviderApiV1ModelsProvidersPost(requestParameters: CreateProviderApiV1ModelsProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider>;

    /**
     * Delete an embedding space (does not drop the table).
     * @summary Delete Embedding Space
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRaw(requestParameters: DeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceDeleteResponse>>;

    /**
     * Delete an embedding space (does not drop the table).
     * Delete Embedding Space
     */
    deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters: DeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceDeleteResponse>;

    /**
     * Delete a model definition and its dependent embedding spaces.
     * @summary Delete Model
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteModelApiV1ModelsModelsModelIdDeleteRaw(requestParameters: DeleteModelApiV1ModelsModelsModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDeleteResponse>>;

    /**
     * Delete a model definition and its dependent embedding spaces.
     * Delete Model
     */
    deleteModelApiV1ModelsModelsModelIdDelete(requestParameters: DeleteModelApiV1ModelsModelsModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDeleteResponse>;

    /**
     * Delete a provider and all its dependent models and embedding spaces.
     * @summary Delete Provider
     * @param {string} providerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    deleteProviderApiV1ModelsProvidersProviderIdDeleteRaw(requestParameters: DeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDeleteResponse>>;

    /**
     * Delete a provider and all its dependent models and embedding spaces.
     * Delete Provider
     */
    deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters: DeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDeleteResponse>;

    /**
     * Get the default embedding space.
     * @summary Get Default Embedding Space
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>>;

    /**
     * Get the default embedding space.
     * Get Default Embedding Space
     */
    getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel>;

    /**
     * Get the default model for a type.
     * @summary Get Default Model
     * @param {ModelType} modelType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultModelApiV1ModelsDefaultsModelModelTypeGetRaw(requestParameters: GetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>>;

    /**
     * Get the default model for a type.
     * Get Default Model
     */
    getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters: GetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider>;

    /**
     * Get the default provider for a model type.
     * @summary Get Default Provider
     * @param {ModelType} modelType 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRaw(requestParameters: GetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>>;

    /**
     * Get the default provider for a model type.
     * Get Default Provider
     */
    getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters: GetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider>;

    /**
     * Get a specific embedding space.
     * @summary Get Embedding Space
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRaw(requestParameters: GetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>>;

    /**
     * Get a specific embedding space.
     * Get Embedding Space
     */
    getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters: GetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel>;

    /**
     * Get a specific model definition.
     * @summary Get Model
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getModelApiV1ModelsModelsModelIdGetRaw(requestParameters: GetModelApiV1ModelsModelsModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>>;

    /**
     * Get a specific model definition.
     * Get Model
     */
    getModelApiV1ModelsModelsModelIdGet(requestParameters: GetModelApiV1ModelsModelsModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider>;

    /**
     * Get a specific provider.
     * @summary Get Provider
     * @param {string} providerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    getProviderApiV1ModelsProvidersProviderIdGetRaw(requestParameters: GetProviderApiV1ModelsProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>>;

    /**
     * Get a specific provider.
     * Get Provider
     */
    getProviderApiV1ModelsProvidersProviderIdGet(requestParameters: GetProviderApiV1ModelsProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider>;

    /**
     * List all embedding spaces.
     * @summary List Embedding Spaces
     * @param {string} [modelId] Filter by model ID
     * @param {number} [page] Page number
     * @param {number} [perPage] Items per page
     * @param {boolean} [activeOnly] Show only active spaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRaw(requestParameters: ListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceList>>;

    /**
     * List all embedding spaces.
     * List Embedding Spaces
     */
    listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters: ListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceList>;

    /**
     * List all model definitions.
     * @summary List Models
     * @param {string} [providerId] Filter by provider ID
     * @param {ModelType} [modelType] Filter by model type
     * @param {number} [page] Page number
     * @param {number} [perPage] Items per page
     * @param {boolean} [activeOnly] Show only active models
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listModelsApiV1ModelsModelsGetRaw(requestParameters: ListModelsApiV1ModelsModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefList>>;

    /**
     * List all model definitions.
     * List Models
     */
    listModelsApiV1ModelsModelsGet(requestParameters: ListModelsApiV1ModelsModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefList>;

    /**
     * List all providers.
     * @summary List Providers
     * @param {number} [page] Page number
     * @param {number} [perPage] Items per page
     * @param {boolean} [activeOnly] Show only active providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    listProvidersApiV1ModelsProvidersGetRaw(requestParameters: ListProvidersApiV1ModelsProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderList>>;

    /**
     * List all providers.
     * List Providers
     */
    listProvidersApiV1ModelsProvidersGet(requestParameters: ListProvidersApiV1ModelsProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderList>;

    /**
     * Set an embedding space as default.
     * @summary Set Default Embedding Space
     * @param {string} spaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRaw(requestParameters: SetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceDefaultResponse>>;

    /**
     * Set an embedding space as default.
     * Set Default Embedding Space
     */
    setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters: SetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceDefaultResponse>;

    /**
     * Set a model as default for its type.
     * @summary Set Default Model
     * @param {string} modelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRaw(requestParameters: SetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefaultResponse>>;

    /**
     * Set a model as default for its type.
     * Set Default Model
     */
    setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters: SetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefaultResponse>;

    /**
     * Set a provider as default for a model type.
     * @summary Set Default Provider
     * @param {string} providerId 
     * @param {DefaultProvider} defaultProvider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRaw(requestParameters: SetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDefaultResponse>>;

    /**
     * Set a provider as default for a model type.
     * Set Default Provider
     */
    setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters: SetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDefaultResponse>;

    /**
     * Update an embedding space.
     * @summary Update Embedding Space
     * @param {string} spaceId 
     * @param {EmbeddingSpaceUpdate} embeddingSpaceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRaw(requestParameters: UpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>>;

    /**
     * Update an embedding space.
     * Update Embedding Space
     */
    updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters: UpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel>;

    /**
     * Update a model definition.
     * @summary Update Model
     * @param {string} modelId 
     * @param {ModelDefUpdate} modelDefUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateModelApiV1ModelsModelsModelIdPutRaw(requestParameters: UpdateModelApiV1ModelsModelsModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>>;

    /**
     * Update a model definition.
     * Update Model
     */
    updateModelApiV1ModelsModelsModelIdPut(requestParameters: UpdateModelApiV1ModelsModelsModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider>;

    /**
     * Update a provider.
     * @summary Update Provider
     * @param {string} providerId 
     * @param {ProviderUpdate} providerUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelRegistryApiInterface
     */
    updateProviderApiV1ModelsProvidersProviderIdPutRaw(requestParameters: UpdateProviderApiV1ModelsProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>>;

    /**
     * Update a provider.
     * Update Provider
     */
    updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters: UpdateProviderApiV1ModelsProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider>;

}

/**
 * 
 */
export class ModelRegistryApi extends runtime.BaseAPI implements ModelRegistryApiInterface {

    /**
     * Create a new embedding space with backing table and index.
     * Create Embedding Space
     */
    async createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRaw(requestParameters: CreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>> {
        if (requestParameters['embeddingSpaceCreate'] == null) {
            throw new runtime.RequiredError(
                'embeddingSpaceCreate',
                'Required parameter "embeddingSpaceCreate" was null or undefined when calling createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmbeddingSpaceCreateToJSON(requestParameters['embeddingSpaceCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceWithModelFromJSON(jsonValue));
    }

    /**
     * Create a new embedding space with backing table and index.
     * Create Embedding Space
     */
    async createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPost(requestParameters: CreateEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel> {
        const response = await this.createEmbeddingSpaceApiV1ModelsEmbeddingSpacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new model definition.
     * Create Model
     */
    async createModelApiV1ModelsModelsPostRaw(requestParameters: CreateModelApiV1ModelsModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>> {
        if (requestParameters['modelDefCreate'] == null) {
            throw new runtime.RequiredError(
                'modelDefCreate',
                'Required parameter "modelDefCreate" was null or undefined when calling createModelApiV1ModelsModelsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ModelDefCreateToJSON(requestParameters['modelDefCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefWithProviderFromJSON(jsonValue));
    }

    /**
     * Create a new model definition.
     * Create Model
     */
    async createModelApiV1ModelsModelsPost(requestParameters: CreateModelApiV1ModelsModelsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider> {
        const response = await this.createModelApiV1ModelsModelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new provider.
     * Create Provider
     */
    async createProviderApiV1ModelsProvidersPostRaw(requestParameters: CreateProviderApiV1ModelsProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['providerCreate'] == null) {
            throw new runtime.RequiredError(
                'providerCreate',
                'Required parameter "providerCreate" was null or undefined when calling createProviderApiV1ModelsProvidersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderCreateToJSON(requestParameters['providerCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Create a new provider.
     * Create Provider
     */
    async createProviderApiV1ModelsProvidersPost(requestParameters: CreateProviderApiV1ModelsProvidersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.createProviderApiV1ModelsProvidersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an embedding space (does not drop the table).
     * Delete Embedding Space
     */
    async deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRaw(requestParameters: DeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceDeleteResponse>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces/{space_id}`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete an embedding space (does not drop the table).
     * Delete Embedding Space
     */
    async deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDelete(requestParameters: DeleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceDeleteResponse> {
        const response = await this.deleteEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a model definition and its dependent embedding spaces.
     * Delete Model
     */
    async deleteModelApiV1ModelsModelsModelIdDeleteRaw(requestParameters: DeleteModelApiV1ModelsModelsModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDeleteResponse>> {
        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling deleteModelApiV1ModelsModelsModelIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models/{model_id}`;
        urlPath = urlPath.replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete a model definition and its dependent embedding spaces.
     * Delete Model
     */
    async deleteModelApiV1ModelsModelsModelIdDelete(requestParameters: DeleteModelApiV1ModelsModelsModelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDeleteResponse> {
        const response = await this.deleteModelApiV1ModelsModelsModelIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a provider and all its dependent models and embedding spaces.
     * Delete Provider
     */
    async deleteProviderApiV1ModelsProvidersProviderIdDeleteRaw(requestParameters: DeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDeleteResponse>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling deleteProviderApiV1ModelsProvidersProviderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers/{provider_id}`;
        urlPath = urlPath.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete a provider and all its dependent models and embedding spaces.
     * Delete Provider
     */
    async deleteProviderApiV1ModelsProvidersProviderIdDelete(requestParameters: DeleteProviderApiV1ModelsProvidersProviderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDeleteResponse> {
        const response = await this.deleteProviderApiV1ModelsProvidersProviderIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the default embedding space.
     * Get Default Embedding Space
     */
    async getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/defaults/embedding-space`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceWithModelFromJSON(jsonValue));
    }

    /**
     * Get the default embedding space.
     * Get Default Embedding Space
     */
    async getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel> {
        const response = await this.getDefaultEmbeddingSpaceApiV1ModelsDefaultsEmbeddingSpaceGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the default model for a type.
     * Get Default Model
     */
    async getDefaultModelApiV1ModelsDefaultsModelModelTypeGetRaw(requestParameters: GetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>> {
        if (requestParameters['modelType'] == null) {
            throw new runtime.RequiredError(
                'modelType',
                'Required parameter "modelType" was null or undefined when calling getDefaultModelApiV1ModelsDefaultsModelModelTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/defaults/model/{model_type}`;
        urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters['modelType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefWithProviderFromJSON(jsonValue));
    }

    /**
     * Get the default model for a type.
     * Get Default Model
     */
    async getDefaultModelApiV1ModelsDefaultsModelModelTypeGet(requestParameters: GetDefaultModelApiV1ModelsDefaultsModelModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider> {
        const response = await this.getDefaultModelApiV1ModelsDefaultsModelModelTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the default provider for a model type.
     * Get Default Provider
     */
    async getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRaw(requestParameters: GetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['modelType'] == null) {
            throw new runtime.RequiredError(
                'modelType',
                'Required parameter "modelType" was null or undefined when calling getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/defaults/provider/{model_type}`;
        urlPath = urlPath.replace(`{${"model_type"}}`, encodeURIComponent(String(requestParameters['modelType'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Get the default provider for a model type.
     * Get Default Provider
     */
    async getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGet(requestParameters: GetDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.getDefaultProviderApiV1ModelsDefaultsProviderModelTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific embedding space.
     * Get Embedding Space
     */
    async getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRaw(requestParameters: GetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces/{space_id}`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceWithModelFromJSON(jsonValue));
    }

    /**
     * Get a specific embedding space.
     * Get Embedding Space
     */
    async getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGet(requestParameters: GetEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel> {
        const response = await this.getEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific model definition.
     * Get Model
     */
    async getModelApiV1ModelsModelsModelIdGetRaw(requestParameters: GetModelApiV1ModelsModelsModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>> {
        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling getModelApiV1ModelsModelsModelIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models/{model_id}`;
        urlPath = urlPath.replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefWithProviderFromJSON(jsonValue));
    }

    /**
     * Get a specific model definition.
     * Get Model
     */
    async getModelApiV1ModelsModelsModelIdGet(requestParameters: GetModelApiV1ModelsModelsModelIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider> {
        const response = await this.getModelApiV1ModelsModelsModelIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific provider.
     * Get Provider
     */
    async getProviderApiV1ModelsProvidersProviderIdGetRaw(requestParameters: GetProviderApiV1ModelsProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling getProviderApiV1ModelsProvidersProviderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers/{provider_id}`;
        urlPath = urlPath.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Get a specific provider.
     * Get Provider
     */
    async getProviderApiV1ModelsProvidersProviderIdGet(requestParameters: GetProviderApiV1ModelsProvidersProviderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.getProviderApiV1ModelsProvidersProviderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all embedding spaces.
     * List Embedding Spaces
     */
    async listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRaw(requestParameters: ListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceList>> {
        const queryParameters: any = {};

        if (requestParameters['modelId'] != null) {
            queryParameters['model_id'] = requestParameters['modelId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['active_only'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceListFromJSON(jsonValue));
    }

    /**
     * List all embedding spaces.
     * List Embedding Spaces
     */
    async listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGet(requestParameters: ListEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceList> {
        const response = await this.listEmbeddingSpacesApiV1ModelsEmbeddingSpacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all model definitions.
     * List Models
     */
    async listModelsApiV1ModelsModelsGetRaw(requestParameters: ListModelsApiV1ModelsModelsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefList>> {
        const queryParameters: any = {};

        if (requestParameters['providerId'] != null) {
            queryParameters['provider_id'] = requestParameters['providerId'];
        }

        if (requestParameters['modelType'] != null) {
            queryParameters['model_type'] = requestParameters['modelType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['active_only'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefListFromJSON(jsonValue));
    }

    /**
     * List all model definitions.
     * List Models
     */
    async listModelsApiV1ModelsModelsGet(requestParameters: ListModelsApiV1ModelsModelsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefList> {
        const response = await this.listModelsApiV1ModelsModelsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all providers.
     * List Providers
     */
    async listProvidersApiV1ModelsProvidersGetRaw(requestParameters: ListProvidersApiV1ModelsProvidersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['per_page'] = requestParameters['perPage'];
        }

        if (requestParameters['activeOnly'] != null) {
            queryParameters['active_only'] = requestParameters['activeOnly'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderListFromJSON(jsonValue));
    }

    /**
     * List all providers.
     * List Providers
     */
    async listProvidersApiV1ModelsProvidersGet(requestParameters: ListProvidersApiV1ModelsProvidersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderList> {
        const response = await this.listProvidersApiV1ModelsProvidersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set an embedding space as default.
     * Set Default Embedding Space
     */
    async setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRaw(requestParameters: SetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceDefaultResponse>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces/{space_id}/set-default`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Set an embedding space as default.
     * Set Default Embedding Space
     */
    async setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPost(requestParameters: SetDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceDefaultResponse> {
        const response = await this.setDefaultEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdSetDefaultPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a model as default for its type.
     * Set Default Model
     */
    async setDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRaw(requestParameters: SetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefaultResponse>> {
        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models/{model_id}/set-default`;
        urlPath = urlPath.replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Set a model as default for its type.
     * Set Default Model
     */
    async setDefaultModelApiV1ModelsModelsModelIdSetDefaultPost(requestParameters: SetDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefaultResponse> {
        const response = await this.setDefaultModelApiV1ModelsModelsModelIdSetDefaultPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a provider as default for a model type.
     * Set Default Provider
     */
    async setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRaw(requestParameters: SetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProviderDefaultResponse>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost().'
            );
        }

        if (requestParameters['defaultProvider'] == null) {
            throw new runtime.RequiredError(
                'defaultProvider',
                'Required parameter "defaultProvider" was null or undefined when calling setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers/{provider_id}/set-default`;
        urlPath = urlPath.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DefaultProviderToJSON(requestParameters['defaultProvider']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderDefaultResponseFromJSON(jsonValue));
    }

    /**
     * Set a provider as default for a model type.
     * Set Default Provider
     */
    async setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPost(requestParameters: SetDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProviderDefaultResponse> {
        const response = await this.setDefaultProviderApiV1ModelsProvidersProviderIdSetDefaultPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an embedding space.
     * Update Embedding Space
     */
    async updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRaw(requestParameters: UpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmbeddingSpaceWithModel>> {
        if (requestParameters['spaceId'] == null) {
            throw new runtime.RequiredError(
                'spaceId',
                'Required parameter "spaceId" was null or undefined when calling updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut().'
            );
        }

        if (requestParameters['embeddingSpaceUpdate'] == null) {
            throw new runtime.RequiredError(
                'embeddingSpaceUpdate',
                'Required parameter "embeddingSpaceUpdate" was null or undefined when calling updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/embedding-spaces/{space_id}`;
        urlPath = urlPath.replace(`{${"space_id"}}`, encodeURIComponent(String(requestParameters['spaceId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmbeddingSpaceUpdateToJSON(requestParameters['embeddingSpaceUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbeddingSpaceWithModelFromJSON(jsonValue));
    }

    /**
     * Update an embedding space.
     * Update Embedding Space
     */
    async updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPut(requestParameters: UpdateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmbeddingSpaceWithModel> {
        const response = await this.updateEmbeddingSpaceApiV1ModelsEmbeddingSpacesSpaceIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a model definition.
     * Update Model
     */
    async updateModelApiV1ModelsModelsModelIdPutRaw(requestParameters: UpdateModelApiV1ModelsModelsModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelDefWithProvider>> {
        if (requestParameters['modelId'] == null) {
            throw new runtime.RequiredError(
                'modelId',
                'Required parameter "modelId" was null or undefined when calling updateModelApiV1ModelsModelsModelIdPut().'
            );
        }

        if (requestParameters['modelDefUpdate'] == null) {
            throw new runtime.RequiredError(
                'modelDefUpdate',
                'Required parameter "modelDefUpdate" was null or undefined when calling updateModelApiV1ModelsModelsModelIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/models/{model_id}`;
        urlPath = urlPath.replace(`{${"model_id"}}`, encodeURIComponent(String(requestParameters['modelId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ModelDefUpdateToJSON(requestParameters['modelDefUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelDefWithProviderFromJSON(jsonValue));
    }

    /**
     * Update a model definition.
     * Update Model
     */
    async updateModelApiV1ModelsModelsModelIdPut(requestParameters: UpdateModelApiV1ModelsModelsModelIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelDefWithProvider> {
        const response = await this.updateModelApiV1ModelsModelsModelIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a provider.
     * Update Provider
     */
    async updateProviderApiV1ModelsProvidersProviderIdPutRaw(requestParameters: UpdateProviderApiV1ModelsProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters['providerId'] == null) {
            throw new runtime.RequiredError(
                'providerId',
                'Required parameter "providerId" was null or undefined when calling updateProviderApiV1ModelsProvidersProviderIdPut().'
            );
        }

        if (requestParameters['providerUpdate'] == null) {
            throw new runtime.RequiredError(
                'providerUpdate',
                'Required parameter "providerUpdate" was null or undefined when calling updateProviderApiV1ModelsProvidersProviderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/models/providers/{provider_id}`;
        urlPath = urlPath.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters['providerId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProviderUpdateToJSON(requestParameters['providerUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Update a provider.
     * Update Provider
     */
    async updateProviderApiV1ModelsProvidersProviderIdPut(requestParameters: UpdateProviderApiV1ModelsProvidersProviderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.updateProviderApiV1ModelsProvidersProviderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
