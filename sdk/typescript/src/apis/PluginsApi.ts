/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PluginActionResponse,
  PluginDeleteResponse,
  PluginHealthCheckResponse,
  PluginInstallRequest,
  PluginListResponse,
  PluginResponse,
  PluginStatsResponse,
  PluginStatus,
  PluginType,
  PluginUpdateRequest,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PluginActionResponseFromJSON,
    PluginActionResponseToJSON,
    PluginDeleteResponseFromJSON,
    PluginDeleteResponseToJSON,
    PluginHealthCheckResponseFromJSON,
    PluginHealthCheckResponseToJSON,
    PluginInstallRequestFromJSON,
    PluginInstallRequestToJSON,
    PluginListResponseFromJSON,
    PluginListResponseToJSON,
    PluginResponseFromJSON,
    PluginResponseToJSON,
    PluginStatsResponseFromJSON,
    PluginStatsResponseToJSON,
    PluginStatusFromJSON,
    PluginStatusToJSON,
    PluginTypeFromJSON,
    PluginTypeToJSON,
    PluginUpdateRequestFromJSON,
    PluginUpdateRequestToJSON,
} from '../models/index';

export interface BulkDisablePluginsApiV1PluginsBulkDisablePostRequest {
    requestBody: Array<string>;
}

export interface BulkEnablePluginsApiV1PluginsBulkEnablePostRequest {
    requestBody: Array<string>;
}

export interface CheckPluginDependenciesApiV1PluginsPluginIdDependenciesGetRequest {
    pluginId: string;
}

export interface DisablePluginApiV1PluginsPluginIdDisablePostRequest {
    pluginId: string;
}

export interface EnablePluginApiV1PluginsPluginIdEnablePostRequest {
    pluginId: string;
}

export interface GetPluginApiV1PluginsPluginIdGetRequest {
    pluginId: string;
}

export interface HealthCheckPluginsApiV1PluginsHealthGetRequest {
    autoDisableUnhealthy?: boolean;
}

export interface InstallPluginApiV1PluginsInstallPostRequest {
    pluginInstallRequest: PluginInstallRequest;
}

export interface ListPluginsApiV1PluginsGetRequest {
    pluginType?: PluginType | null;
    status?: PluginStatus | null;
    enabled?: boolean | null;
}

export interface UninstallPluginApiV1PluginsPluginIdDeleteRequest {
    pluginId: string;
}

export interface UpdatePluginApiV1PluginsPluginIdPutRequest {
    pluginId: string;
    pluginUpdateRequest: PluginUpdateRequest;
}

/**
 * PluginsApi - interface
 * 
 * @export
 * @interface PluginsApiInterface
 */
export interface PluginsApiInterface {
    /**
     * Disable multiple plugins.  Args:     plugin_ids: List of plugin IDs to disable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * @summary Bulk Disable Plugins
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    bulkDisablePluginsApiV1PluginsBulkDisablePostRaw(requestParameters: BulkDisablePluginsApiV1PluginsBulkDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Disable multiple plugins.  Args:     plugin_ids: List of plugin IDs to disable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Disable Plugins
     */
    bulkDisablePluginsApiV1PluginsBulkDisablePost(requestParameters: BulkDisablePluginsApiV1PluginsBulkDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Enable multiple plugins.  Args:     plugin_ids: List of plugin IDs to enable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * @summary Bulk Enable Plugins
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    bulkEnablePluginsApiV1PluginsBulkEnablePostRaw(requestParameters: BulkEnablePluginsApiV1PluginsBulkEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Enable multiple plugins.  Args:     plugin_ids: List of plugin IDs to enable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Enable Plugins
     */
    bulkEnablePluginsApiV1PluginsBulkEnablePost(requestParameters: BulkEnablePluginsApiV1PluginsBulkEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Check plugin dependencies.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Dependency check results
     * @summary Check Plugin Dependencies
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    checkPluginDependenciesApiV1PluginsPluginIdDependenciesGetRaw(requestParameters: CheckPluginDependenciesApiV1PluginsPluginIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Check plugin dependencies.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Dependency check results
     * Check Plugin Dependencies
     */
    checkPluginDependenciesApiV1PluginsPluginIdDependenciesGet(requestParameters: CheckPluginDependenciesApiV1PluginsPluginIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Disable Plugin
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    disablePluginApiV1PluginsPluginIdDisablePostRaw(requestParameters: DisablePluginApiV1PluginsPluginIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginActionResponse>>;

    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Disable Plugin
     */
    disablePluginApiV1PluginsPluginIdDisablePost(requestParameters: DisablePluginApiV1PluginsPluginIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginActionResponse>;

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * @summary Enable Plugin
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    enablePluginApiV1PluginsPluginIdEnablePostRaw(requestParameters: EnablePluginApiV1PluginsPluginIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginActionResponse>>;

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Enable Plugin
     */
    enablePluginApiV1PluginsPluginIdEnablePost(requestParameters: EnablePluginApiV1PluginsPluginIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginActionResponse>;

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * @summary Get Plugin
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    getPluginApiV1PluginsPluginIdGetRaw(requestParameters: GetPluginApiV1PluginsPluginIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>>;

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * Get Plugin
     */
    getPluginApiV1PluginsPluginIdGet(requestParameters: GetPluginApiV1PluginsPluginIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse>;

    /**
     * Get plugin system statistics.  Args:     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin system statistics
     * @summary Get Plugin Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    getPluginStatsApiV1PluginsStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginStatsResponse>>;

    /**
     * Get plugin system statistics.  Args:     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin system statistics
     * Get Plugin Stats
     */
    getPluginStatsApiV1PluginsStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginStatsResponse>;

    /**
     * Perform health check on all plugins.  Args:     auto_disable_unhealthy: Whether to automatically disable unhealthy plugins     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Health check results
     * @summary Health Check Plugins
     * @param {boolean} [autoDisableUnhealthy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    healthCheckPluginsApiV1PluginsHealthGetRaw(requestParameters: HealthCheckPluginsApiV1PluginsHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginHealthCheckResponse>>;

    /**
     * Perform health check on all plugins.  Args:     auto_disable_unhealthy: Whether to automatically disable unhealthy plugins     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Health check results
     * Health Check Plugins
     */
    healthCheckPluginsApiV1PluginsHealthGet(requestParameters: HealthCheckPluginsApiV1PluginsHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginHealthCheckResponse>;

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * @summary Install Plugin
     * @param {PluginInstallRequest} pluginInstallRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    installPluginApiV1PluginsInstallPostRaw(requestParameters: InstallPluginApiV1PluginsInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>>;

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * Install Plugin
     */
    installPluginApiV1PluginsInstallPost(requestParameters: InstallPluginApiV1PluginsInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse>;

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * @summary List Plugins
     * @param {PluginType} [pluginType] 
     * @param {PluginStatus} [status] 
     * @param {boolean} [enabled] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    listPluginsApiV1PluginsGetRaw(requestParameters: ListPluginsApiV1PluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginListResponse>>;

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * List Plugins
     */
    listPluginsApiV1PluginsGet(requestParameters: ListPluginsApiV1PluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginListResponse>;

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * @summary Uninstall Plugin
     * @param {string} pluginId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    uninstallPluginApiV1PluginsPluginIdDeleteRaw(requestParameters: UninstallPluginApiV1PluginsPluginIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginDeleteResponse>>;

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * Uninstall Plugin
     */
    uninstallPluginApiV1PluginsPluginIdDelete(requestParameters: UninstallPluginApiV1PluginsPluginIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginDeleteResponse>;

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * @summary Update Plugin
     * @param {string} pluginId 
     * @param {PluginUpdateRequest} pluginUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginsApiInterface
     */
    updatePluginApiV1PluginsPluginIdPutRaw(requestParameters: UpdatePluginApiV1PluginsPluginIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>>;

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * Update Plugin
     */
    updatePluginApiV1PluginsPluginIdPut(requestParameters: UpdatePluginApiV1PluginsPluginIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse>;

}

/**
 * 
 */
export class PluginsApi extends runtime.BaseAPI implements PluginsApiInterface {

    /**
     * Disable multiple plugins.  Args:     plugin_ids: List of plugin IDs to disable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Disable Plugins
     */
    async bulkDisablePluginsApiV1PluginsBulkDisablePostRaw(requestParameters: BulkDisablePluginsApiV1PluginsBulkDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDisablePluginsApiV1PluginsBulkDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/bulk/disable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Disable multiple plugins.  Args:     plugin_ids: List of plugin IDs to disable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Disable Plugins
     */
    async bulkDisablePluginsApiV1PluginsBulkDisablePost(requestParameters: BulkDisablePluginsApiV1PluginsBulkDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.bulkDisablePluginsApiV1PluginsBulkDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable multiple plugins.  Args:     plugin_ids: List of plugin IDs to enable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Enable Plugins
     */
    async bulkEnablePluginsApiV1PluginsBulkEnablePostRaw(requestParameters: BulkEnablePluginsApiV1PluginsBulkEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkEnablePluginsApiV1PluginsBulkEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/bulk/enable`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Enable multiple plugins.  Args:     plugin_ids: List of plugin IDs to enable     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Bulk operation results
     * Bulk Enable Plugins
     */
    async bulkEnablePluginsApiV1PluginsBulkEnablePost(requestParameters: BulkEnablePluginsApiV1PluginsBulkEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.bulkEnablePluginsApiV1PluginsBulkEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check plugin dependencies.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Dependency check results
     * Check Plugin Dependencies
     */
    async checkPluginDependenciesApiV1PluginsPluginIdDependenciesGetRaw(requestParameters: CheckPluginDependenciesApiV1PluginsPluginIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling checkPluginDependenciesApiV1PluginsPluginIdDependenciesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}/dependencies`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check plugin dependencies.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Dependency check results
     * Check Plugin Dependencies
     */
    async checkPluginDependenciesApiV1PluginsPluginIdDependenciesGet(requestParameters: CheckPluginDependenciesApiV1PluginsPluginIdDependenciesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.checkPluginDependenciesApiV1PluginsPluginIdDependenciesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Disable Plugin
     */
    async disablePluginApiV1PluginsPluginIdDisablePostRaw(requestParameters: DisablePluginApiV1PluginsPluginIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginActionResponse>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling disablePluginApiV1PluginsPluginIdDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}/disable`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginActionResponseFromJSON(jsonValue));
    }

    /**
     * Disable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Disable Plugin
     */
    async disablePluginApiV1PluginsPluginIdDisablePost(requestParameters: DisablePluginApiV1PluginsPluginIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginActionResponse> {
        const response = await this.disablePluginApiV1PluginsPluginIdDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Enable Plugin
     */
    async enablePluginApiV1PluginsPluginIdEnablePostRaw(requestParameters: EnablePluginApiV1PluginsPluginIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginActionResponse>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling enablePluginApiV1PluginsPluginIdEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}/enable`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginActionResponseFromJSON(jsonValue));
    }

    /**
     * Enable a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Action result
     * Enable Plugin
     */
    async enablePluginApiV1PluginsPluginIdEnablePost(requestParameters: EnablePluginApiV1PluginsPluginIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginActionResponse> {
        const response = await this.enablePluginApiV1PluginsPluginIdEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * Get Plugin
     */
    async getPluginApiV1PluginsPluginIdGetRaw(requestParameters: GetPluginApiV1PluginsPluginIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling getPluginApiV1PluginsPluginIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginResponseFromJSON(jsonValue));
    }

    /**
     * Get plugin by ID.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin data
     * Get Plugin
     */
    async getPluginApiV1PluginsPluginIdGet(requestParameters: GetPluginApiV1PluginsPluginIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse> {
        const response = await this.getPluginApiV1PluginsPluginIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get plugin system statistics.  Args:     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin system statistics
     * Get Plugin Stats
     */
    async getPluginStatsApiV1PluginsStatsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/stats`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get plugin system statistics.  Args:     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Plugin system statistics
     * Get Plugin Stats
     */
    async getPluginStatsApiV1PluginsStatsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginStatsResponse> {
        const response = await this.getPluginStatsApiV1PluginsStatsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Perform health check on all plugins.  Args:     auto_disable_unhealthy: Whether to automatically disable unhealthy plugins     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Health check results
     * Health Check Plugins
     */
    async healthCheckPluginsApiV1PluginsHealthGetRaw(requestParameters: HealthCheckPluginsApiV1PluginsHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginHealthCheckResponse>> {
        const queryParameters: any = {};

        if (requestParameters['autoDisableUnhealthy'] != null) {
            queryParameters['auto_disable_unhealthy'] = requestParameters['autoDisableUnhealthy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/health`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginHealthCheckResponseFromJSON(jsonValue));
    }

    /**
     * Perform health check on all plugins.  Args:     auto_disable_unhealthy: Whether to automatically disable unhealthy plugins     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Health check results
     * Health Check Plugins
     */
    async healthCheckPluginsApiV1PluginsHealthGet(requestParameters: HealthCheckPluginsApiV1PluginsHealthGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginHealthCheckResponse> {
        const response = await this.healthCheckPluginsApiV1PluginsHealthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * Install Plugin
     */
    async installPluginApiV1PluginsInstallPostRaw(requestParameters: InstallPluginApiV1PluginsInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>> {
        if (requestParameters['pluginInstallRequest'] == null) {
            throw new runtime.RequiredError(
                'pluginInstallRequest',
                'Required parameter "pluginInstallRequest" was null or undefined when calling installPluginApiV1PluginsInstallPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/install`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginInstallRequestToJSON(requestParameters['pluginInstallRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginResponseFromJSON(jsonValue));
    }

    /**
     * Install a new plugin.  Args:     install_data: Plugin installation data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Installed plugin data
     * Install Plugin
     */
    async installPluginApiV1PluginsInstallPost(requestParameters: InstallPluginApiV1PluginsInstallPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse> {
        const response = await this.installPluginApiV1PluginsInstallPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * List Plugins
     */
    async listPluginsApiV1PluginsGetRaw(requestParameters: ListPluginsApiV1PluginsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['pluginType'] != null) {
            queryParameters['plugin_type'] = requestParameters['pluginType'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['enabled'] != null) {
            queryParameters['enabled'] = requestParameters['enabled'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginListResponseFromJSON(jsonValue));
    }

    /**
     * List installed plugins with optional filtering.  Args:     request: List request parameters     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     List of installed plugins
     * List Plugins
     */
    async listPluginsApiV1PluginsGet(requestParameters: ListPluginsApiV1PluginsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginListResponse> {
        const response = await this.listPluginsApiV1PluginsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * Uninstall Plugin
     */
    async uninstallPluginApiV1PluginsPluginIdDeleteRaw(requestParameters: UninstallPluginApiV1PluginsPluginIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginDeleteResponse>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling uninstallPluginApiV1PluginsPluginIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Uninstall a plugin.  Args:     plugin_id: Plugin ID     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Uninstall result
     * Uninstall Plugin
     */
    async uninstallPluginApiV1PluginsPluginIdDelete(requestParameters: UninstallPluginApiV1PluginsPluginIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginDeleteResponse> {
        const response = await this.uninstallPluginApiV1PluginsPluginIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * Update Plugin
     */
    async updatePluginApiV1PluginsPluginIdPutRaw(requestParameters: UpdatePluginApiV1PluginsPluginIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginResponse>> {
        if (requestParameters['pluginId'] == null) {
            throw new runtime.RequiredError(
                'pluginId',
                'Required parameter "pluginId" was null or undefined when calling updatePluginApiV1PluginsPluginIdPut().'
            );
        }

        if (requestParameters['pluginUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'pluginUpdateRequest',
                'Required parameter "pluginUpdateRequest" was null or undefined when calling updatePluginApiV1PluginsPluginIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/plugins/{plugin_id}`;
        urlPath = urlPath.replace(`{${"plugin_id"}}`, encodeURIComponent(String(requestParameters['pluginId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PluginUpdateRequestToJSON(requestParameters['pluginUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginResponseFromJSON(jsonValue));
    }

    /**
     * Update a plugin.  Args:     plugin_id: Plugin ID     update_data: Plugin update data     current_user: Current authenticated user     plugin_manager: Plugin manager instance  Returns:     Updated plugin data
     * Update Plugin
     */
    async updatePluginApiV1PluginsPluginIdPut(requestParameters: UpdatePluginApiV1PluginsPluginIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginResponse> {
        const response = await this.updatePluginApiV1PluginsPluginIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
