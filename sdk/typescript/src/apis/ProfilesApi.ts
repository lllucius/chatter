/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailableProvidersResponse,
  HTTPValidationError,
  ProfileCloneRequest,
  ProfileCreate,
  ProfileDeleteResponse,
  ProfileListResponse,
  ProfileResponse,
  ProfileStatsResponse,
  ProfileTestRequest,
  ProfileTestResponse,
  ProfileType,
  ProfileUpdate,
} from '../models/index';
import {
    AvailableProvidersResponseFromJSON,
    AvailableProvidersResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProfileCloneRequestFromJSON,
    ProfileCloneRequestToJSON,
    ProfileCreateFromJSON,
    ProfileCreateToJSON,
    ProfileDeleteResponseFromJSON,
    ProfileDeleteResponseToJSON,
    ProfileListResponseFromJSON,
    ProfileListResponseToJSON,
    ProfileResponseFromJSON,
    ProfileResponseToJSON,
    ProfileStatsResponseFromJSON,
    ProfileStatsResponseToJSON,
    ProfileTestRequestFromJSON,
    ProfileTestRequestToJSON,
    ProfileTestResponseFromJSON,
    ProfileTestResponseToJSON,
    ProfileTypeFromJSON,
    ProfileTypeToJSON,
    ProfileUpdateFromJSON,
    ProfileUpdateToJSON,
} from '../models/index';

export interface CloneProfileApiV1ProfilesProfileIdClonePostRequest {
    profileId: string;
    profileCloneRequest: ProfileCloneRequest;
}

export interface CreateProfileApiV1ProfilesPostRequest {
    profileCreate: ProfileCreate;
}

export interface DeleteProfileApiV1ProfilesProfileIdDeleteRequest {
    profileId: string;
}

export interface GetProfileApiV1ProfilesProfileIdGetRequest {
    profileId: string;
}

export interface ListProfilesApiV1ProfilesGetRequest {
    profileType?: ProfileType | null;
    llmProvider?: string | null;
    tags?: Array<string> | null;
    isPublic?: boolean | null;
    limit?: number;
    offset?: number;
    sortBy?: string;
    sortOrder?: string;
}

export interface TestProfileApiV1ProfilesProfileIdTestPostRequest {
    profileId: string;
    profileTestRequest: ProfileTestRequest;
}

export interface UpdateProfileApiV1ProfilesProfileIdPutRequest {
    profileId: string;
    profileUpdate: ProfileUpdate;
}

/**
 * ProfilesApi - interface
 * 
 * @export
 * @interface ProfilesApiInterface
 */
export interface ProfilesApiInterface {
    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * @summary Clone Profile
     * @param {string} profileId 
     * @param {ProfileCloneRequest} profileCloneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    cloneProfileApiV1ProfilesProfileIdClonePostRaw(requestParameters: CloneProfileApiV1ProfilesProfileIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>>;

    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * Clone Profile
     */
    cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters: CloneProfileApiV1ProfilesProfileIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse>;

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * @summary Create Profile
     * @param {ProfileCreate} profileCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    createProfileApiV1ProfilesPostRaw(requestParameters: CreateProfileApiV1ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>>;

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * Create Profile
     */
    createProfileApiV1ProfilesPost(requestParameters: CreateProfileApiV1ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse>;

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * @summary Delete Profile
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    deleteProfileApiV1ProfilesProfileIdDeleteRaw(requestParameters: DeleteProfileApiV1ProfilesProfileIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDeleteResponse>>;

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * Delete Profile
     */
    deleteProfileApiV1ProfilesProfileIdDelete(requestParameters: DeleteProfileApiV1ProfilesProfileIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDeleteResponse>;

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * @summary Get Available Providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getAvailableProvidersApiV1ProfilesProvidersAvailableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableProvidersResponse>>;

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * Get Available Providers
     */
    getAvailableProvidersApiV1ProfilesProvidersAvailableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableProvidersResponse>;

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * @summary Get Profile
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getProfileApiV1ProfilesProfileIdGetRaw(requestParameters: GetProfileApiV1ProfilesProfileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>>;

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * Get Profile
     */
    getProfileApiV1ProfilesProfileIdGet(requestParameters: GetProfileApiV1ProfilesProfileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse>;

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * @summary Get Profile Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    getProfileStatsApiV1ProfilesStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileStatsResponse>>;

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * Get Profile Stats
     */
    getProfileStatsApiV1ProfilesStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileStatsResponse>;

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * @summary List Profiles
     * @param {ProfileType} [profileType] Filter by profile type
     * @param {string} [llmProvider] Filter by LLM provider
     * @param {Array<string>} [tags] Filter by tags
     * @param {boolean} [isPublic] Filter by public status
     * @param {number} [limit] Maximum number of results
     * @param {number} [offset] Number of results to skip
     * @param {string} [sortBy] Sort field
     * @param {string} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    listProfilesApiV1ProfilesGetRaw(requestParameters: ListProfilesApiV1ProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileListResponse>>;

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * List Profiles
     */
    listProfilesApiV1ProfilesGet(requestParameters: ListProfilesApiV1ProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileListResponse>;

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * @summary Test Profile
     * @param {string} profileId 
     * @param {ProfileTestRequest} profileTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    testProfileApiV1ProfilesProfileIdTestPostRaw(requestParameters: TestProfileApiV1ProfilesProfileIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileTestResponse>>;

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * Test Profile
     */
    testProfileApiV1ProfilesProfileIdTestPost(requestParameters: TestProfileApiV1ProfilesProfileIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileTestResponse>;

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * @summary Update Profile
     * @param {string} profileId 
     * @param {ProfileUpdate} profileUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApiInterface
     */
    updateProfileApiV1ProfilesProfileIdPutRaw(requestParameters: UpdateProfileApiV1ProfilesProfileIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>>;

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * Update Profile
     */
    updateProfileApiV1ProfilesProfileIdPut(requestParameters: UpdateProfileApiV1ProfilesProfileIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse>;

}

/**
 * 
 */
export class ProfilesApi extends runtime.BaseAPI implements ProfilesApiInterface {

    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * Clone Profile
     */
    async cloneProfileApiV1ProfilesProfileIdClonePostRaw(requestParameters: CloneProfileApiV1ProfilesProfileIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling cloneProfileApiV1ProfilesProfileIdClonePost().'
            );
        }

        if (requestParameters['profileCloneRequest'] == null) {
            throw new runtime.RequiredError(
                'profileCloneRequest',
                'Required parameter "profileCloneRequest" was null or undefined when calling cloneProfileApiV1ProfilesProfileIdClonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/{profile_id}/clone`;
        urlPath = urlPath.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCloneRequestToJSON(requestParameters['profileCloneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Clone an existing profile.  Args:     profile_id: Source profile ID     clone_request: Clone request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Cloned profile information
     * Clone Profile
     */
    async cloneProfileApiV1ProfilesProfileIdClonePost(requestParameters: CloneProfileApiV1ProfilesProfileIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse> {
        const response = await this.cloneProfileApiV1ProfilesProfileIdClonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * Create Profile
     */
    async createProfileApiV1ProfilesPostRaw(requestParameters: CreateProfileApiV1ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters['profileCreate'] == null) {
            throw new runtime.RequiredError(
                'profileCreate',
                'Required parameter "profileCreate" was null or undefined when calling createProfileApiV1ProfilesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCreateToJSON(requestParameters['profileCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Create a new LLM profile.  Args:     profile_data: Profile creation data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Created profile information
     * Create Profile
     */
    async createProfileApiV1ProfilesPost(requestParameters: CreateProfileApiV1ProfilesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse> {
        const response = await this.createProfileApiV1ProfilesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * Delete Profile
     */
    async deleteProfileApiV1ProfilesProfileIdDeleteRaw(requestParameters: DeleteProfileApiV1ProfilesProfileIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDeleteResponse>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling deleteProfileApiV1ProfilesProfileIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/{profile_id}`;
        urlPath = urlPath.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete profile.  Args:     profile_id: Profile ID     request: Delete request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Success message
     * Delete Profile
     */
    async deleteProfileApiV1ProfilesProfileIdDelete(requestParameters: DeleteProfileApiV1ProfilesProfileIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDeleteResponse> {
        const response = await this.deleteProfileApiV1ProfilesProfileIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * Get Available Providers
     */
    async getAvailableProvidersApiV1ProfilesProvidersAvailableGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableProvidersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/providers/available`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableProvidersResponseFromJSON(jsonValue));
    }

    /**
     * Get available LLM providers.  Args:     request: Providers request parameters     current_user: Current authenticated user     profile_service: Profile service  Returns:     Available providers information
     * Get Available Providers
     */
    async getAvailableProvidersApiV1ProfilesProvidersAvailableGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableProvidersResponse> {
        const response = await this.getAvailableProvidersApiV1ProfilesProvidersAvailableGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * Get Profile
     */
    async getProfileApiV1ProfilesProfileIdGetRaw(requestParameters: GetProfileApiV1ProfilesProfileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling getProfileApiV1ProfilesProfileIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/{profile_id}`;
        urlPath = urlPath.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Get profile details.  Args:     profile_id: Profile ID     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile information
     * Get Profile
     */
    async getProfileApiV1ProfilesProfileIdGet(requestParameters: GetProfileApiV1ProfilesProfileIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse> {
        const response = await this.getProfileApiV1ProfilesProfileIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * Get Profile Stats
     */
    async getProfileStatsApiV1ProfilesStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/stats/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get profile statistics.  Args:     current_user: Current authenticated user     profile_service: Profile service  Returns:     Profile statistics
     * Get Profile Stats
     */
    async getProfileStatsApiV1ProfilesStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileStatsResponse> {
        const response = await this.getProfileStatsApiV1ProfilesStatsOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * List Profiles
     */
    async listProfilesApiV1ProfilesGetRaw(requestParameters: ListProfilesApiV1ProfilesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['profileType'] != null) {
            queryParameters['profile_type'] = requestParameters['profileType'];
        }

        if (requestParameters['llmProvider'] != null) {
            queryParameters['llm_provider'] = requestParameters['llmProvider'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['isPublic'] != null) {
            queryParameters['is_public'] = requestParameters['isPublic'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sort_order'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileListResponseFromJSON(jsonValue));
    }

    /**
     * List user\'s profiles.  Args:     profile_type: Filter by profile type     llm_provider: Filter by LLM provider     tags: Filter by tags     is_public: Filter by public status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     profile_service: Profile service  Returns:     List of profiles with pagination info
     * List Profiles
     */
    async listProfilesApiV1ProfilesGet(requestParameters: ListProfilesApiV1ProfilesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileListResponse> {
        const response = await this.listProfilesApiV1ProfilesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * Test Profile
     */
    async testProfileApiV1ProfilesProfileIdTestPostRaw(requestParameters: TestProfileApiV1ProfilesProfileIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileTestResponse>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling testProfileApiV1ProfilesProfileIdTestPost().'
            );
        }

        if (requestParameters['profileTestRequest'] == null) {
            throw new runtime.RequiredError(
                'profileTestRequest',
                'Required parameter "profileTestRequest" was null or undefined when calling testProfileApiV1ProfilesProfileIdTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/{profile_id}/test`;
        urlPath = urlPath.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileTestRequestToJSON(requestParameters['profileTestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileTestResponseFromJSON(jsonValue));
    }

    /**
     * Test profile with a sample message.  Args:     profile_id: Profile ID     test_request: Test request     current_user: Current authenticated user     profile_service: Profile service  Returns:     Test results
     * Test Profile
     */
    async testProfileApiV1ProfilesProfileIdTestPost(requestParameters: TestProfileApiV1ProfilesProfileIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileTestResponse> {
        const response = await this.testProfileApiV1ProfilesProfileIdTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * Update Profile
     */
    async updateProfileApiV1ProfilesProfileIdPutRaw(requestParameters: UpdateProfileApiV1ProfilesProfileIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileResponse>> {
        if (requestParameters['profileId'] == null) {
            throw new runtime.RequiredError(
                'profileId',
                'Required parameter "profileId" was null or undefined when calling updateProfileApiV1ProfilesProfileIdPut().'
            );
        }

        if (requestParameters['profileUpdate'] == null) {
            throw new runtime.RequiredError(
                'profileUpdate',
                'Required parameter "profileUpdate" was null or undefined when calling updateProfileApiV1ProfilesProfileIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/profiles/{profile_id}`;
        urlPath = urlPath.replace(`{${"profile_id"}}`, encodeURIComponent(String(requestParameters['profileId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileUpdateToJSON(requestParameters['profileUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileResponseFromJSON(jsonValue));
    }

    /**
     * Update profile.  Args:     profile_id: Profile ID     update_data: Update data     current_user: Current authenticated user     profile_service: Profile service  Returns:     Updated profile information
     * Update Profile
     */
    async updateProfileApiV1ProfilesProfileIdPut(requestParameters: UpdateProfileApiV1ProfilesProfileIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileResponse> {
        const response = await this.updateProfileApiV1ProfilesProfileIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
