/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PromptCategory,
  PromptCloneRequest,
  PromptCreate,
  PromptDeleteResponse,
  PromptListResponse,
  PromptResponse,
  PromptStatsResponse,
  PromptTestRequest,
  PromptTestResponse,
  PromptType,
  PromptUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PromptCategoryFromJSON,
    PromptCategoryToJSON,
    PromptCloneRequestFromJSON,
    PromptCloneRequestToJSON,
    PromptCreateFromJSON,
    PromptCreateToJSON,
    PromptDeleteResponseFromJSON,
    PromptDeleteResponseToJSON,
    PromptListResponseFromJSON,
    PromptListResponseToJSON,
    PromptResponseFromJSON,
    PromptResponseToJSON,
    PromptStatsResponseFromJSON,
    PromptStatsResponseToJSON,
    PromptTestRequestFromJSON,
    PromptTestRequestToJSON,
    PromptTestResponseFromJSON,
    PromptTestResponseToJSON,
    PromptTypeFromJSON,
    PromptTypeToJSON,
    PromptUpdateFromJSON,
    PromptUpdateToJSON,
} from '../models/index';

export interface ClonePromptApiV1PromptsPromptIdClonePostRequest {
    promptId: string;
    promptCloneRequest: PromptCloneRequest;
}

export interface CreatePromptApiV1PromptsPostRequest {
    promptCreate: PromptCreate;
}

export interface DeletePromptApiV1PromptsPromptIdDeleteRequest {
    promptId: string;
}

export interface GetPromptApiV1PromptsPromptIdGetRequest {
    promptId: string;
}

export interface ListPromptsApiV1PromptsGetRequest {
    promptType?: PromptType | null;
    category?: PromptCategory | null;
    tags?: Array<string> | null;
    isPublic?: boolean | null;
    isChain?: boolean | null;
    limit?: number;
    offset?: number;
    sortBy?: string;
    sortOrder?: string;
}

export interface TestPromptApiV1PromptsPromptIdTestPostRequest {
    promptId: string;
    promptTestRequest: PromptTestRequest;
}

export interface UpdatePromptApiV1PromptsPromptIdPutRequest {
    promptId: string;
    promptUpdate: PromptUpdate;
}

/**
 * PromptsApi - interface
 * 
 * @export
 * @interface PromptsApiInterface
 */
export interface PromptsApiInterface {
    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * @summary Clone Prompt
     * @param {string} promptId 
     * @param {PromptCloneRequest} promptCloneRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    clonePromptApiV1PromptsPromptIdClonePostRaw(requestParameters: ClonePromptApiV1PromptsPromptIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>>;

    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * Clone Prompt
     */
    clonePromptApiV1PromptsPromptIdClonePost(requestParameters: ClonePromptApiV1PromptsPromptIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse>;

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * @summary Create Prompt
     * @param {PromptCreate} promptCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    createPromptApiV1PromptsPostRaw(requestParameters: CreatePromptApiV1PromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>>;

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * Create Prompt
     */
    createPromptApiV1PromptsPost(requestParameters: CreatePromptApiV1PromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse>;

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * @summary Delete Prompt
     * @param {string} promptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    deletePromptApiV1PromptsPromptIdDeleteRaw(requestParameters: DeletePromptApiV1PromptsPromptIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptDeleteResponse>>;

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * Delete Prompt
     */
    deletePromptApiV1PromptsPromptIdDelete(requestParameters: DeletePromptApiV1PromptsPromptIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptDeleteResponse>;

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * @summary Get Prompt
     * @param {string} promptId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    getPromptApiV1PromptsPromptIdGetRaw(requestParameters: GetPromptApiV1PromptsPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>>;

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * Get Prompt
     */
    getPromptApiV1PromptsPromptIdGet(requestParameters: GetPromptApiV1PromptsPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse>;

    /**
     * Get prompt statistics.  Args:     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * @summary Get Prompt Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    getPromptStatsApiV1PromptsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStatsResponse>>;

    /**
     * Get prompt statistics.  Args:     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * Get Prompt Stats
     */
    getPromptStatsApiV1PromptsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStatsResponse>;

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     is_chain: Filter by chain status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * @summary List Prompts
     * @param {PromptType} [promptType] Filter by prompt type
     * @param {PromptCategory} [category] Filter by category
     * @param {Array<string>} [tags] Filter by tags
     * @param {boolean} [isPublic] Filter by public status
     * @param {boolean} [isChain] Filter by chain status
     * @param {number} [limit] Maximum number of results
     * @param {number} [offset] Number of results to skip
     * @param {string} [sortBy] Sort field
     * @param {string} [sortOrder] Sort order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    listPromptsApiV1PromptsGetRaw(requestParameters: ListPromptsApiV1PromptsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptListResponse>>;

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     is_chain: Filter by chain status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * List Prompts
     */
    listPromptsApiV1PromptsGet(requestParameters: ListPromptsApiV1PromptsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptListResponse>;

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * @summary Test Prompt
     * @param {string} promptId 
     * @param {PromptTestRequest} promptTestRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    testPromptApiV1PromptsPromptIdTestPostRaw(requestParameters: TestPromptApiV1PromptsPromptIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptTestResponse>>;

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * Test Prompt
     */
    testPromptApiV1PromptsPromptIdTestPost(requestParameters: TestPromptApiV1PromptsPromptIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptTestResponse>;

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * @summary Update Prompt
     * @param {string} promptId 
     * @param {PromptUpdate} promptUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromptsApiInterface
     */
    updatePromptApiV1PromptsPromptIdPutRaw(requestParameters: UpdatePromptApiV1PromptsPromptIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>>;

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * Update Prompt
     */
    updatePromptApiV1PromptsPromptIdPut(requestParameters: UpdatePromptApiV1PromptsPromptIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse>;

}

/**
 * 
 */
export class PromptsApi extends runtime.BaseAPI implements PromptsApiInterface {

    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * Clone Prompt
     */
    async clonePromptApiV1PromptsPromptIdClonePostRaw(requestParameters: ClonePromptApiV1PromptsPromptIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling clonePromptApiV1PromptsPromptIdClonePost().'
            );
        }

        if (requestParameters['promptCloneRequest'] == null) {
            throw new runtime.RequiredError(
                'promptCloneRequest',
                'Required parameter "promptCloneRequest" was null or undefined when calling clonePromptApiV1PromptsPromptIdClonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/{prompt_id}/clone`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptCloneRequestToJSON(requestParameters['promptCloneRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseFromJSON(jsonValue));
    }

    /**
     * Clone an existing prompt.  Args:     prompt_id: Source prompt ID     clone_request: Clone request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Cloned prompt information
     * Clone Prompt
     */
    async clonePromptApiV1PromptsPromptIdClonePost(requestParameters: ClonePromptApiV1PromptsPromptIdClonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse> {
        const response = await this.clonePromptApiV1PromptsPromptIdClonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * Create Prompt
     */
    async createPromptApiV1PromptsPostRaw(requestParameters: CreatePromptApiV1PromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>> {
        if (requestParameters['promptCreate'] == null) {
            throw new runtime.RequiredError(
                'promptCreate',
                'Required parameter "promptCreate" was null or undefined when calling createPromptApiV1PromptsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptCreateToJSON(requestParameters['promptCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseFromJSON(jsonValue));
    }

    /**
     * Create a new prompt.  Args:     prompt_data: Prompt creation data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Created prompt information
     * Create Prompt
     */
    async createPromptApiV1PromptsPost(requestParameters: CreatePromptApiV1PromptsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse> {
        const response = await this.createPromptApiV1PromptsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * Delete Prompt
     */
    async deletePromptApiV1PromptsPromptIdDeleteRaw(requestParameters: DeletePromptApiV1PromptsPromptIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptDeleteResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling deletePromptApiV1PromptsPromptIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete prompt.  Args:     prompt_id: Prompt ID     request: Delete request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Success message
     * Delete Prompt
     */
    async deletePromptApiV1PromptsPromptIdDelete(requestParameters: DeletePromptApiV1PromptsPromptIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptDeleteResponse> {
        const response = await this.deletePromptApiV1PromptsPromptIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * Get Prompt
     */
    async getPromptApiV1PromptsPromptIdGetRaw(requestParameters: GetPromptApiV1PromptsPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling getPromptApiV1PromptsPromptIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseFromJSON(jsonValue));
    }

    /**
     * Get prompt details.  Args:     prompt_id: Prompt ID     request: Get request parameters     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt information
     * Get Prompt
     */
    async getPromptApiV1PromptsPromptIdGet(requestParameters: GetPromptApiV1PromptsPromptIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse> {
        const response = await this.getPromptApiV1PromptsPromptIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get prompt statistics.  Args:     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * Get Prompt Stats
     */
    async getPromptStatsApiV1PromptsStatsOverviewGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStatsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/stats/overview`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptStatsResponseFromJSON(jsonValue));
    }

    /**
     * Get prompt statistics.  Args:     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Prompt statistics
     * Get Prompt Stats
     */
    async getPromptStatsApiV1PromptsStatsOverviewGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStatsResponse> {
        const response = await this.getPromptStatsApiV1PromptsStatsOverviewGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     is_chain: Filter by chain status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * List Prompts
     */
    async listPromptsApiV1PromptsGetRaw(requestParameters: ListPromptsApiV1PromptsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['promptType'] != null) {
            queryParameters['prompt_type'] = requestParameters['promptType'];
        }

        if (requestParameters['category'] != null) {
            queryParameters['category'] = requestParameters['category'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['isPublic'] != null) {
            queryParameters['is_public'] = requestParameters['isPublic'];
        }

        if (requestParameters['isChain'] != null) {
            queryParameters['is_chain'] = requestParameters['isChain'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sort_order'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptListResponseFromJSON(jsonValue));
    }

    /**
     * List user\'s prompts.  Args:     prompt_type: Filter by prompt type     category: Filter by category     tags: Filter by tags     is_public: Filter by public status     is_chain: Filter by chain status     limit: Maximum number of results     offset: Number of results to skip     sort_by: Sort field     sort_order: Sort order (asc/desc)     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     List of prompts with pagination info
     * List Prompts
     */
    async listPromptsApiV1PromptsGet(requestParameters: ListPromptsApiV1PromptsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptListResponse> {
        const response = await this.listPromptsApiV1PromptsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * Test Prompt
     */
    async testPromptApiV1PromptsPromptIdTestPostRaw(requestParameters: TestPromptApiV1PromptsPromptIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptTestResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling testPromptApiV1PromptsPromptIdTestPost().'
            );
        }

        if (requestParameters['promptTestRequest'] == null) {
            throw new runtime.RequiredError(
                'promptTestRequest',
                'Required parameter "promptTestRequest" was null or undefined when calling testPromptApiV1PromptsPromptIdTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/{prompt_id}/test`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptTestRequestToJSON(requestParameters['promptTestRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptTestResponseFromJSON(jsonValue));
    }

    /**
     * Test prompt with given variables.  Args:     prompt_id: Prompt ID     test_request: Test request     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Test results
     * Test Prompt
     */
    async testPromptApiV1PromptsPromptIdTestPost(requestParameters: TestPromptApiV1PromptsPromptIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptTestResponse> {
        const response = await this.testPromptApiV1PromptsPromptIdTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * Update Prompt
     */
    async updatePromptApiV1PromptsPromptIdPutRaw(requestParameters: UpdatePromptApiV1PromptsPromptIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponse>> {
        if (requestParameters['promptId'] == null) {
            throw new runtime.RequiredError(
                'promptId',
                'Required parameter "promptId" was null or undefined when calling updatePromptApiV1PromptsPromptIdPut().'
            );
        }

        if (requestParameters['promptUpdate'] == null) {
            throw new runtime.RequiredError(
                'promptUpdate',
                'Required parameter "promptUpdate" was null or undefined when calling updatePromptApiV1PromptsPromptIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/prompts/{prompt_id}`;
        urlPath = urlPath.replace(`{${"prompt_id"}}`, encodeURIComponent(String(requestParameters['promptId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PromptUpdateToJSON(requestParameters['promptUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseFromJSON(jsonValue));
    }

    /**
     * Update prompt.  Args:     prompt_id: Prompt ID     update_data: Update data     current_user: Current authenticated user     prompt_service: Prompt service  Returns:     Updated prompt information
     * Update Prompt
     */
    async updatePromptApiV1PromptsPromptIdPut(requestParameters: UpdatePromptApiV1PromptsPromptIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponse> {
        const response = await this.updatePromptApiV1PromptsPromptIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
