/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkOperationResult,
  BulkToolServerOperation,
  HTTPValidationError,
  RoleToolAccessCreate,
  RoleToolAccessResponse,
  ServerStatus,
  ServerToolsResponse,
  ToolAccessResult,
  ToolOperationResponse,
  ToolPermissionCreate,
  ToolPermissionResponse,
  ToolPermissionUpdate,
  ToolServerCreate,
  ToolServerDeleteResponse,
  ToolServerHealthCheck,
  ToolServerMetrics,
  ToolServerOperationResponse,
  ToolServerResponse,
  ToolServerUpdate,
  UserToolAccessCheck,
} from '../models/index';
import {
    BulkOperationResultFromJSON,
    BulkOperationResultToJSON,
    BulkToolServerOperationFromJSON,
    BulkToolServerOperationToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    RoleToolAccessCreateFromJSON,
    RoleToolAccessCreateToJSON,
    RoleToolAccessResponseFromJSON,
    RoleToolAccessResponseToJSON,
    ServerStatusFromJSON,
    ServerStatusToJSON,
    ServerToolsResponseFromJSON,
    ServerToolsResponseToJSON,
    ToolAccessResultFromJSON,
    ToolAccessResultToJSON,
    ToolOperationResponseFromJSON,
    ToolOperationResponseToJSON,
    ToolPermissionCreateFromJSON,
    ToolPermissionCreateToJSON,
    ToolPermissionResponseFromJSON,
    ToolPermissionResponseToJSON,
    ToolPermissionUpdateFromJSON,
    ToolPermissionUpdateToJSON,
    ToolServerCreateFromJSON,
    ToolServerCreateToJSON,
    ToolServerDeleteResponseFromJSON,
    ToolServerDeleteResponseToJSON,
    ToolServerHealthCheckFromJSON,
    ToolServerHealthCheckToJSON,
    ToolServerMetricsFromJSON,
    ToolServerMetricsToJSON,
    ToolServerOperationResponseFromJSON,
    ToolServerOperationResponseToJSON,
    ToolServerResponseFromJSON,
    ToolServerResponseToJSON,
    ToolServerUpdateFromJSON,
    ToolServerUpdateToJSON,
    UserToolAccessCheckFromJSON,
    UserToolAccessCheckToJSON,
} from '../models/index';

export interface BulkServerOperationApiV1ToolserversServersBulkPostRequest {
    bulkToolServerOperation: BulkToolServerOperation;
}

export interface CheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest {
    serverId: string;
}

export interface CheckToolAccessApiV1ToolserversAccessCheckPostRequest {
    userToolAccessCheck: UserToolAccessCheck;
}

export interface CreateRoleAccessRuleApiV1ToolserversRoleAccessPostRequest {
    roleToolAccessCreate: RoleToolAccessCreate;
}

export interface CreateToolServerApiV1ToolserversServersPostRequest {
    toolServerCreate: ToolServerCreate;
}

export interface DeleteToolServerApiV1ToolserversServersServerIdDeleteRequest {
    serverId: string;
}

export interface DisableToolApiV1ToolserversToolsToolIdDisablePostRequest {
    toolId: string;
}

export interface DisableToolServerApiV1ToolserversServersServerIdDisablePostRequest {
    serverId: string;
}

export interface EnableToolApiV1ToolserversToolsToolIdEnablePostRequest {
    toolId: string;
}

export interface EnableToolServerApiV1ToolserversServersServerIdEnablePostRequest {
    serverId: string;
}

export interface GetRoleAccessRulesApiV1ToolserversRoleAccessGetRequest {
    role?: string | null;
}

export interface GetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest {
    serverId: string;
}

export interface GetServerToolsApiV1ToolserversServersServerIdToolsGetRequest {
    serverId: string;
    limit?: number;
    offset?: number;
}

export interface GetToolServerApiV1ToolserversServersServerIdGetRequest {
    serverId: string;
}

export interface GetUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRequest {
    userId: string;
}

export interface GrantToolPermissionApiV1ToolserversPermissionsPostRequest {
    toolPermissionCreate: ToolPermissionCreate;
}

export interface ListToolServersApiV1ToolserversServersGetRequest {
    status?: ServerStatus | null;
    includeBuiltin?: boolean;
}

export interface RefreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRequest {
    serverId: string;
}

export interface RestartToolServerApiV1ToolserversServersServerIdRestartPostRequest {
    serverId: string;
}

export interface RevokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRequest {
    permissionId: string;
}

export interface StartToolServerApiV1ToolserversServersServerIdStartPostRequest {
    serverId: string;
}

export interface StopToolServerApiV1ToolserversServersServerIdStopPostRequest {
    serverId: string;
}

export interface TestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest {
    serverId: string;
}

export interface UpdateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRequest {
    permissionId: string;
    toolPermissionUpdate: ToolPermissionUpdate;
}

export interface UpdateToolServerApiV1ToolserversServersServerIdPutRequest {
    serverId: string;
    toolServerUpdate: ToolServerUpdate;
}

/**
 * ToolServersApi - interface
 * 
 * @export
 * @interface ToolServersApiInterface
 */
export interface ToolServersApiInterface {
    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * @summary Bulk Server Operation
     * @param {BulkToolServerOperation} bulkToolServerOperation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    bulkServerOperationApiV1ToolserversServersBulkPostRaw(requestParameters: BulkServerOperationApiV1ToolserversServersBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkOperationResult>>;

    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * Bulk Server Operation
     */
    bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters: BulkServerOperationApiV1ToolserversServersBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkOperationResult>;

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * @summary Check Server Health
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    checkServerHealthApiV1ToolserversServersServerIdHealthGetRaw(requestParameters: CheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerHealthCheck>>;

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * Check Server Health
     */
    checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters: CheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerHealthCheck>;

    /**
     * Check if user has access to a tool.  Args:     check_data: Access check data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Access check result
     * @summary Check Tool Access
     * @param {UserToolAccessCheck} userToolAccessCheck 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    checkToolAccessApiV1ToolserversAccessCheckPostRaw(requestParameters: CheckToolAccessApiV1ToolserversAccessCheckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolAccessResult>>;

    /**
     * Check if user has access to a tool.  Args:     check_data: Access check data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Access check result
     * Check Tool Access
     */
    checkToolAccessApiV1ToolserversAccessCheckPost(requestParameters: CheckToolAccessApiV1ToolserversAccessCheckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolAccessResult>;

    /**
     * Create role-based access rule.  Args:     rule_data: Rule data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created rule
     * @summary Create Role Access Rule
     * @param {RoleToolAccessCreate} roleToolAccessCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    createRoleAccessRuleApiV1ToolserversRoleAccessPostRaw(requestParameters: CreateRoleAccessRuleApiV1ToolserversRoleAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleToolAccessResponse>>;

    /**
     * Create role-based access rule.  Args:     rule_data: Rule data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created rule
     * Create Role Access Rule
     */
    createRoleAccessRuleApiV1ToolserversRoleAccessPost(requestParameters: CreateRoleAccessRuleApiV1ToolserversRoleAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleToolAccessResponse>;

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * @summary Create Tool Server
     * @param {ToolServerCreate} toolServerCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    createToolServerApiV1ToolserversServersPostRaw(requestParameters: CreateToolServerApiV1ToolserversServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>>;

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * Create Tool Server
     */
    createToolServerApiV1ToolserversServersPost(requestParameters: CreateToolServerApiV1ToolserversServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse>;

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * @summary Delete Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    deleteToolServerApiV1ToolserversServersServerIdDeleteRaw(requestParameters: DeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerDeleteResponse>>;

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * Delete Tool Server
     */
    deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters: DeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerDeleteResponse>;

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    disableToolApiV1ToolserversToolsToolIdDisablePostRaw(requestParameters: DisableToolApiV1ToolserversToolsToolIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolOperationResponse>>;

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool
     */
    disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters: DisableToolApiV1ToolserversToolsToolIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolOperationResponse>;

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Disable Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    disableToolServerApiV1ToolserversServersServerIdDisablePostRaw(requestParameters: DisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>>;

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool Server
     */
    disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters: DisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse>;

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool
     * @param {string} toolId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    enableToolApiV1ToolserversToolsToolIdEnablePostRaw(requestParameters: EnableToolApiV1ToolserversToolsToolIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolOperationResponse>>;

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool
     */
    enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters: EnableToolApiV1ToolserversToolsToolIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolOperationResponse>;

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Enable Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    enableToolServerApiV1ToolserversServersServerIdEnablePostRaw(requestParameters: EnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>>;

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool Server
     */
    enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters: EnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse>;

    /**
     * Get role-based access rules.  Args:     role: Optional role filter     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of access rules
     * @summary Get Role Access Rules
     * @param {string} [role] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getRoleAccessRulesApiV1ToolserversRoleAccessGetRaw(requestParameters: GetRoleAccessRulesApiV1ToolserversRoleAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleToolAccessResponse>>>;

    /**
     * Get role-based access rules.  Args:     role: Optional role filter     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of access rules
     * Get Role Access Rules
     */
    getRoleAccessRulesApiV1ToolserversRoleAccessGet(requestParameters: GetRoleAccessRulesApiV1ToolserversRoleAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleToolAccessResponse>>;

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * @summary Get Server Metrics
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getServerMetricsApiV1ToolserversServersServerIdMetricsGetRaw(requestParameters: GetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerMetrics>>;

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * Get Server Metrics
     */
    getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters: GetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerMetrics>;

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * @summary Get Server Tools
     * @param {string} serverId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getServerToolsApiV1ToolserversServersServerIdToolsGetRaw(requestParameters: GetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerToolsResponse>>;

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * Get Server Tools
     */
    getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters: GetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerToolsResponse>;

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * @summary Get Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getToolServerApiV1ToolserversServersServerIdGetRaw(requestParameters: GetToolServerApiV1ToolserversServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>>;

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * Get Tool Server
     */
    getToolServerApiV1ToolserversServersServerIdGet(requestParameters: GetToolServerApiV1ToolserversServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse>;

    /**
     * Get all permissions for a user.  Args:     user_id: User ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of user permissions
     * @summary Get User Permissions
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRaw(requestParameters: GetUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ToolPermissionResponse>>>;

    /**
     * Get all permissions for a user.  Args:     user_id: User ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of user permissions
     * Get User Permissions
     */
    getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGet(requestParameters: GetUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ToolPermissionResponse>>;

    /**
     * Grant tool permission to a user.  Args:     permission_data: Permission data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created permission
     * @summary Grant Tool Permission
     * @param {ToolPermissionCreate} toolPermissionCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    grantToolPermissionApiV1ToolserversPermissionsPostRaw(requestParameters: GrantToolPermissionApiV1ToolserversPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolPermissionResponse>>;

    /**
     * Grant tool permission to a user.  Args:     permission_data: Permission data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created permission
     * Grant Tool Permission
     */
    grantToolPermissionApiV1ToolserversPermissionsPost(requestParameters: GrantToolPermissionApiV1ToolserversPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolPermissionResponse>;

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * @summary List All Tools
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    listAllToolsApiV1ToolserversToolsAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>>;

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * List All Tools
     */
    listAllToolsApiV1ToolserversToolsAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>>;

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * @summary List Tool Servers
     * @param {ServerStatus} [status] 
     * @param {boolean} [includeBuiltin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    listToolServersApiV1ToolserversServersGetRaw(requestParameters: ListToolServersApiV1ToolserversServersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ToolServerResponse>>>;

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * List Tool Servers
     */
    listToolServersApiV1ToolserversServersGet(requestParameters: ListToolServersApiV1ToolserversServersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ToolServerResponse>>;

    /**
     * Refresh tools for a remote server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Refresh result
     * @summary Refresh Server Tools
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRaw(requestParameters: RefreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Refresh tools for a remote server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Refresh result
     * Refresh Server Tools
     */
    refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPost(requestParameters: RefreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Restart Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    restartToolServerApiV1ToolserversServersServerIdRestartPostRaw(requestParameters: RestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>>;

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Restart Tool Server
     */
    restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters: RestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse>;

    /**
     * Revoke tool permission.  Args:     permission_id: Permission ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     Success message
     * @summary Revoke Tool Permission
     * @param {string} permissionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRaw(requestParameters: RevokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Revoke tool permission.  Args:     permission_id: Permission ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     Success message
     * Revoke Tool Permission
     */
    revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDelete(requestParameters: RevokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Start Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    startToolServerApiV1ToolserversServersServerIdStartPostRaw(requestParameters: StartToolServerApiV1ToolserversServersServerIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>>;

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Start Tool Server
     */
    startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters: StartToolServerApiV1ToolserversServersServerIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse>;

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * @summary Stop Tool Server
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    stopToolServerApiV1ToolserversServersServerIdStopPostRaw(requestParameters: StopToolServerApiV1ToolserversServersServerIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>>;

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Stop Tool Server
     */
    stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters: StopToolServerApiV1ToolserversServersServerIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse>;

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * @summary Test Server Connectivity
     * @param {string} serverId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRaw(requestParameters: TestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>>;

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * Test Server Connectivity
     */
    testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters: TestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }>;

    /**
     * Update tool permission.  Args:     permission_id: Permission ID     update_data: Update data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Updated permission
     * @summary Update Tool Permission
     * @param {string} permissionId 
     * @param {ToolPermissionUpdate} toolPermissionUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    updateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRaw(requestParameters: UpdateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolPermissionResponse>>;

    /**
     * Update tool permission.  Args:     permission_id: Permission ID     update_data: Update data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Updated permission
     * Update Tool Permission
     */
    updateToolPermissionApiV1ToolserversPermissionsPermissionIdPut(requestParameters: UpdateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolPermissionResponse>;

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * @summary Update Tool Server
     * @param {string} serverId 
     * @param {ToolServerUpdate} toolServerUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolServersApiInterface
     */
    updateToolServerApiV1ToolserversServersServerIdPutRaw(requestParameters: UpdateToolServerApiV1ToolserversServersServerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>>;

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * Update Tool Server
     */
    updateToolServerApiV1ToolserversServersServerIdPut(requestParameters: UpdateToolServerApiV1ToolserversServersServerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse>;

}

/**
 * 
 */
export class ToolServersApi extends runtime.BaseAPI implements ToolServersApiInterface {

    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * Bulk Server Operation
     */
    async bulkServerOperationApiV1ToolserversServersBulkPostRaw(requestParameters: BulkServerOperationApiV1ToolserversServersBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkOperationResult>> {
        if (requestParameters['bulkToolServerOperation'] == null) {
            throw new runtime.RequiredError(
                'bulkToolServerOperation',
                'Required parameter "bulkToolServerOperation" was null or undefined when calling bulkServerOperationApiV1ToolserversServersBulkPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/bulk`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkToolServerOperationToJSON(requestParameters['bulkToolServerOperation']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkOperationResultFromJSON(jsonValue));
    }

    /**
     * Perform bulk operations on multiple servers.  Args:     operation_data: Bulk operation data     current_user: Current authenticated user     service: Tool server service  Returns:     Bulk operation result
     * Bulk Server Operation
     */
    async bulkServerOperationApiV1ToolserversServersBulkPost(requestParameters: BulkServerOperationApiV1ToolserversServersBulkPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkOperationResult> {
        const response = await this.bulkServerOperationApiV1ToolserversServersBulkPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * Check Server Health
     */
    async checkServerHealthApiV1ToolserversServersServerIdHealthGetRaw(requestParameters: CheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerHealthCheck>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling checkServerHealthApiV1ToolserversServersServerIdHealthGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/health`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerHealthCheckFromJSON(jsonValue));
    }

    /**
     * Perform health check on a server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Health check result
     * Check Server Health
     */
    async checkServerHealthApiV1ToolserversServersServerIdHealthGet(requestParameters: CheckServerHealthApiV1ToolserversServersServerIdHealthGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerHealthCheck> {
        const response = await this.checkServerHealthApiV1ToolserversServersServerIdHealthGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if user has access to a tool.  Args:     check_data: Access check data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Access check result
     * Check Tool Access
     */
    async checkToolAccessApiV1ToolserversAccessCheckPostRaw(requestParameters: CheckToolAccessApiV1ToolserversAccessCheckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolAccessResult>> {
        if (requestParameters['userToolAccessCheck'] == null) {
            throw new runtime.RequiredError(
                'userToolAccessCheck',
                'Required parameter "userToolAccessCheck" was null or undefined when calling checkToolAccessApiV1ToolserversAccessCheckPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/access-check`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToolAccessCheckToJSON(requestParameters['userToolAccessCheck']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolAccessResultFromJSON(jsonValue));
    }

    /**
     * Check if user has access to a tool.  Args:     check_data: Access check data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Access check result
     * Check Tool Access
     */
    async checkToolAccessApiV1ToolserversAccessCheckPost(requestParameters: CheckToolAccessApiV1ToolserversAccessCheckPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolAccessResult> {
        const response = await this.checkToolAccessApiV1ToolserversAccessCheckPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create role-based access rule.  Args:     rule_data: Rule data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created rule
     * Create Role Access Rule
     */
    async createRoleAccessRuleApiV1ToolserversRoleAccessPostRaw(requestParameters: CreateRoleAccessRuleApiV1ToolserversRoleAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleToolAccessResponse>> {
        if (requestParameters['roleToolAccessCreate'] == null) {
            throw new runtime.RequiredError(
                'roleToolAccessCreate',
                'Required parameter "roleToolAccessCreate" was null or undefined when calling createRoleAccessRuleApiV1ToolserversRoleAccessPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/role-access`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToolAccessCreateToJSON(requestParameters['roleToolAccessCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleToolAccessResponseFromJSON(jsonValue));
    }

    /**
     * Create role-based access rule.  Args:     rule_data: Rule data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created rule
     * Create Role Access Rule
     */
    async createRoleAccessRuleApiV1ToolserversRoleAccessPost(requestParameters: CreateRoleAccessRuleApiV1ToolserversRoleAccessPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleToolAccessResponse> {
        const response = await this.createRoleAccessRuleApiV1ToolserversRoleAccessPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * Create Tool Server
     */
    async createToolServerApiV1ToolserversServersPostRaw(requestParameters: CreateToolServerApiV1ToolserversServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>> {
        if (requestParameters['toolServerCreate'] == null) {
            throw new runtime.RequiredError(
                'toolServerCreate',
                'Required parameter "toolServerCreate" was null or undefined when calling createToolServerApiV1ToolserversServersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolServerCreateToJSON(requestParameters['toolServerCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tool server.  Args:     server_data: Server creation data     current_user: Current authenticated user     service: Tool server service  Returns:     Created server response
     * Create Tool Server
     */
    async createToolServerApiV1ToolserversServersPost(requestParameters: CreateToolServerApiV1ToolserversServersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse> {
        const response = await this.createToolServerApiV1ToolserversServersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * Delete Tool Server
     */
    async deleteToolServerApiV1ToolserversServersServerIdDeleteRaw(requestParameters: DeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerDeleteResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling deleteToolServerApiV1ToolserversServersServerIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerDeleteResponseFromJSON(jsonValue));
    }

    /**
     * Delete a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Success message
     * Delete Tool Server
     */
    async deleteToolServerApiV1ToolserversServersServerIdDelete(requestParameters: DeleteToolServerApiV1ToolserversServersServerIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerDeleteResponse> {
        const response = await this.deleteToolServerApiV1ToolserversServersServerIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool
     */
    async disableToolApiV1ToolserversToolsToolIdDisablePostRaw(requestParameters: DisableToolApiV1ToolserversToolsToolIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolOperationResponse>> {
        if (requestParameters['toolId'] == null) {
            throw new runtime.RequiredError(
                'toolId',
                'Required parameter "toolId" was null or undefined when calling disableToolApiV1ToolserversToolsToolIdDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/tools/{tool_id}/disable`;
        urlPath = urlPath.replace(`{${"tool_id"}}`, encodeURIComponent(String(requestParameters['toolId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolOperationResponseFromJSON(jsonValue));
    }

    /**
     * Disable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool
     */
    async disableToolApiV1ToolserversToolsToolIdDisablePost(requestParameters: DisableToolApiV1ToolserversToolsToolIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolOperationResponse> {
        const response = await this.disableToolApiV1ToolserversToolsToolIdDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool Server
     */
    async disableToolServerApiV1ToolserversServersServerIdDisablePostRaw(requestParameters: DisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling disableToolServerApiV1ToolserversServersServerIdDisablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/disable`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Disable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Disable Tool Server
     */
    async disableToolServerApiV1ToolserversServersServerIdDisablePost(requestParameters: DisableToolServerApiV1ToolserversServersServerIdDisablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse> {
        const response = await this.disableToolServerApiV1ToolserversServersServerIdDisablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool
     */
    async enableToolApiV1ToolserversToolsToolIdEnablePostRaw(requestParameters: EnableToolApiV1ToolserversToolsToolIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolOperationResponse>> {
        if (requestParameters['toolId'] == null) {
            throw new runtime.RequiredError(
                'toolId',
                'Required parameter "toolId" was null or undefined when calling enableToolApiV1ToolserversToolsToolIdEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/tools/{tool_id}/enable`;
        urlPath = urlPath.replace(`{${"tool_id"}}`, encodeURIComponent(String(requestParameters['toolId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolOperationResponseFromJSON(jsonValue));
    }

    /**
     * Enable a specific tool.  Args:     tool_id: Tool ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool
     */
    async enableToolApiV1ToolserversToolsToolIdEnablePost(requestParameters: EnableToolApiV1ToolserversToolsToolIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolOperationResponse> {
        const response = await this.enableToolApiV1ToolserversToolsToolIdEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool Server
     */
    async enableToolServerApiV1ToolserversServersServerIdEnablePostRaw(requestParameters: EnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling enableToolServerApiV1ToolserversServersServerIdEnablePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/enable`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Enable a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Enable Tool Server
     */
    async enableToolServerApiV1ToolserversServersServerIdEnablePost(requestParameters: EnableToolServerApiV1ToolserversServersServerIdEnablePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse> {
        const response = await this.enableToolServerApiV1ToolserversServersServerIdEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get role-based access rules.  Args:     role: Optional role filter     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of access rules
     * Get Role Access Rules
     */
    async getRoleAccessRulesApiV1ToolserversRoleAccessGetRaw(requestParameters: GetRoleAccessRulesApiV1ToolserversRoleAccessGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<RoleToolAccessResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/role-access`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoleToolAccessResponseFromJSON));
    }

    /**
     * Get role-based access rules.  Args:     role: Optional role filter     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of access rules
     * Get Role Access Rules
     */
    async getRoleAccessRulesApiV1ToolserversRoleAccessGet(requestParameters: GetRoleAccessRulesApiV1ToolserversRoleAccessGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<RoleToolAccessResponse>> {
        const response = await this.getRoleAccessRulesApiV1ToolserversRoleAccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * Get Server Metrics
     */
    async getServerMetricsApiV1ToolserversServersServerIdMetricsGetRaw(requestParameters: GetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerMetrics>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getServerMetricsApiV1ToolserversServersServerIdMetricsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/metrics`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerMetricsFromJSON(jsonValue));
    }

    /**
     * Get analytics for a specific server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server metrics
     * Get Server Metrics
     */
    async getServerMetricsApiV1ToolserversServersServerIdMetricsGet(requestParameters: GetServerMetricsApiV1ToolserversServersServerIdMetricsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerMetrics> {
        const response = await this.getServerMetricsApiV1ToolserversServersServerIdMetricsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * Get Server Tools
     */
    async getServerToolsApiV1ToolserversServersServerIdToolsGetRaw(requestParameters: GetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServerToolsResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getServerToolsApiV1ToolserversServersServerIdToolsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/tools`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServerToolsResponseFromJSON(jsonValue));
    }

    /**
     * Get tools for a specific server.  Args:     server_id: Server ID     request: Server tools request with pagination     current_user: Current authenticated user     service: Tool server service  Returns:     List of server tools with pagination
     * Get Server Tools
     */
    async getServerToolsApiV1ToolserversServersServerIdToolsGet(requestParameters: GetServerToolsApiV1ToolserversServersServerIdToolsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServerToolsResponse> {
        const response = await this.getServerToolsApiV1ToolserversServersServerIdToolsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * Get Tool Server
     */
    async getToolServerApiV1ToolserversServersServerIdGetRaw(requestParameters: GetToolServerApiV1ToolserversServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling getToolServerApiV1ToolserversServersServerIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerResponseFromJSON(jsonValue));
    }

    /**
     * Get a tool server by ID.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Server response
     * Get Tool Server
     */
    async getToolServerApiV1ToolserversServersServerIdGet(requestParameters: GetToolServerApiV1ToolserversServersServerIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse> {
        const response = await this.getToolServerApiV1ToolserversServersServerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all permissions for a user.  Args:     user_id: User ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of user permissions
     * Get User Permissions
     */
    async getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRaw(requestParameters: GetUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ToolPermissionResponse>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/users/{user_id}/permissions`;
        urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToolPermissionResponseFromJSON));
    }

    /**
     * Get all permissions for a user.  Args:     user_id: User ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     List of user permissions
     * Get User Permissions
     */
    async getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGet(requestParameters: GetUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ToolPermissionResponse>> {
        const response = await this.getUserPermissionsApiV1ToolserversUsersUserIdPermissionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Grant tool permission to a user.  Args:     permission_data: Permission data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created permission
     * Grant Tool Permission
     */
    async grantToolPermissionApiV1ToolserversPermissionsPostRaw(requestParameters: GrantToolPermissionApiV1ToolserversPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolPermissionResponse>> {
        if (requestParameters['toolPermissionCreate'] == null) {
            throw new runtime.RequiredError(
                'toolPermissionCreate',
                'Required parameter "toolPermissionCreate" was null or undefined when calling grantToolPermissionApiV1ToolserversPermissionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/permissions`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ToolPermissionCreateToJSON(requestParameters['toolPermissionCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolPermissionResponseFromJSON(jsonValue));
    }

    /**
     * Grant tool permission to a user.  Args:     permission_data: Permission data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Created permission
     * Grant Tool Permission
     */
    async grantToolPermissionApiV1ToolserversPermissionsPost(requestParameters: GrantToolPermissionApiV1ToolserversPermissionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolPermissionResponse> {
        const response = await this.grantToolPermissionApiV1ToolserversPermissionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * List All Tools
     */
    async listAllToolsApiV1ToolserversToolsAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/tools/all`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all tools across all servers.  Args:     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     List of all available tools across all servers
     * List All Tools
     */
    async listAllToolsApiV1ToolserversToolsAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.listAllToolsApiV1ToolserversToolsAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * List Tool Servers
     */
    async listToolServersApiV1ToolserversServersGetRaw(requestParameters: ListToolServersApiV1ToolserversServersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ToolServerResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['includeBuiltin'] != null) {
            queryParameters['include_builtin'] = requestParameters['includeBuiltin'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ToolServerResponseFromJSON));
    }

    /**
     * List tool servers with optional filtering.  Args:     request: List request with filter parameters     current_user: Current authenticated user     service: Tool server service  Returns:     List of server responses
     * List Tool Servers
     */
    async listToolServersApiV1ToolserversServersGet(requestParameters: ListToolServersApiV1ToolserversServersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ToolServerResponse>> {
        const response = await this.listToolServersApiV1ToolserversServersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh tools for a remote server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Refresh result
     * Refresh Server Tools
     */
    async refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRaw(requestParameters: RefreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/refresh-tools`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Refresh tools for a remote server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Refresh result
     * Refresh Server Tools
     */
    async refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPost(requestParameters: RefreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.refreshServerToolsApiV1ToolserversServersServerIdRefreshToolsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Restart Tool Server
     */
    async restartToolServerApiV1ToolserversServersServerIdRestartPostRaw(requestParameters: RestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling restartToolServerApiV1ToolserversServersServerIdRestartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/restart`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Restart a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Restart Tool Server
     */
    async restartToolServerApiV1ToolserversServersServerIdRestartPost(requestParameters: RestartToolServerApiV1ToolserversServersServerIdRestartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse> {
        const response = await this.restartToolServerApiV1ToolserversServersServerIdRestartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke tool permission.  Args:     permission_id: Permission ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     Success message
     * Revoke Tool Permission
     */
    async revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRaw(requestParameters: RevokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/permissions/{permission_id}`;
        urlPath = urlPath.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Revoke tool permission.  Args:     permission_id: Permission ID     current_user: Current authenticated user     access_service: Tool access service  Returns:     Success message
     * Revoke Tool Permission
     */
    async revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDelete(requestParameters: RevokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.revokeToolPermissionApiV1ToolserversPermissionsPermissionIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Start Tool Server
     */
    async startToolServerApiV1ToolserversServersServerIdStartPostRaw(requestParameters: StartToolServerApiV1ToolserversServersServerIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling startToolServerApiV1ToolserversServersServerIdStartPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/start`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Start a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Start Tool Server
     */
    async startToolServerApiV1ToolserversServersServerIdStartPost(requestParameters: StartToolServerApiV1ToolserversServersServerIdStartPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse> {
        const response = await this.startToolServerApiV1ToolserversServersServerIdStartPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Stop Tool Server
     */
    async stopToolServerApiV1ToolserversServersServerIdStopPostRaw(requestParameters: StopToolServerApiV1ToolserversServersServerIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerOperationResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling stopToolServerApiV1ToolserversServersServerIdStopPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/stop`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerOperationResponseFromJSON(jsonValue));
    }

    /**
     * Stop a tool server.  Args:     server_id: Server ID     current_user: Current authenticated user     service: Tool server service  Returns:     Operation result
     * Stop Tool Server
     */
    async stopToolServerApiV1ToolserversServersServerIdStopPost(requestParameters: StopToolServerApiV1ToolserversServersServerIdStopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerOperationResponse> {
        const response = await this.stopToolServerApiV1ToolserversServersServerIdStopPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * Test Server Connectivity
     */
    async testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRaw(requestParameters: TestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}/test-connectivity`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test connectivity to an external MCP server.  Args:     server_id: Tool server ID     current_user: Current authenticated user     tool_server_service: Tool server service  Returns:     Connectivity test results
     * Test Server Connectivity
     */
    async testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPost(requestParameters: TestServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testServerConnectivityApiV1ToolserversServersServerIdTestConnectivityPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update tool permission.  Args:     permission_id: Permission ID     update_data: Update data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Updated permission
     * Update Tool Permission
     */
    async updateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRaw(requestParameters: UpdateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolPermissionResponse>> {
        if (requestParameters['permissionId'] == null) {
            throw new runtime.RequiredError(
                'permissionId',
                'Required parameter "permissionId" was null or undefined when calling updateToolPermissionApiV1ToolserversPermissionsPermissionIdPut().'
            );
        }

        if (requestParameters['toolPermissionUpdate'] == null) {
            throw new runtime.RequiredError(
                'toolPermissionUpdate',
                'Required parameter "toolPermissionUpdate" was null or undefined when calling updateToolPermissionApiV1ToolserversPermissionsPermissionIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/permissions/{permission_id}`;
        urlPath = urlPath.replace(`{${"permission_id"}}`, encodeURIComponent(String(requestParameters['permissionId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ToolPermissionUpdateToJSON(requestParameters['toolPermissionUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolPermissionResponseFromJSON(jsonValue));
    }

    /**
     * Update tool permission.  Args:     permission_id: Permission ID     update_data: Update data     current_user: Current authenticated user     access_service: Tool access service  Returns:     Updated permission
     * Update Tool Permission
     */
    async updateToolPermissionApiV1ToolserversPermissionsPermissionIdPut(requestParameters: UpdateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolPermissionResponse> {
        const response = await this.updateToolPermissionApiV1ToolserversPermissionsPermissionIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * Update Tool Server
     */
    async updateToolServerApiV1ToolserversServersServerIdPutRaw(requestParameters: UpdateToolServerApiV1ToolserversServersServerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ToolServerResponse>> {
        if (requestParameters['serverId'] == null) {
            throw new runtime.RequiredError(
                'serverId',
                'Required parameter "serverId" was null or undefined when calling updateToolServerApiV1ToolserversServersServerIdPut().'
            );
        }

        if (requestParameters['toolServerUpdate'] == null) {
            throw new runtime.RequiredError(
                'toolServerUpdate',
                'Required parameter "toolServerUpdate" was null or undefined when calling updateToolServerApiV1ToolserversServersServerIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("CustomHTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/v1/toolservers/servers/{server_id}`;
        urlPath = urlPath.replace(`{${"server_id"}}`, encodeURIComponent(String(requestParameters['serverId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ToolServerUpdateToJSON(requestParameters['toolServerUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ToolServerResponseFromJSON(jsonValue));
    }

    /**
     * Update a tool server.  Args:     server_id: Server ID     update_data: Update data     current_user: Current authenticated user     service: Tool server service  Returns:     Updated server response
     * Update Tool Server
     */
    async updateToolServerApiV1ToolserversServersServerIdPut(requestParameters: UpdateToolServerApiV1ToolserversServersServerIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ToolServerResponse> {
        const response = await this.updateToolServerApiV1ToolserversServersServerIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
