/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TestStatus } from './TestStatus';
import {
    TestStatusFromJSON,
    TestStatusFromJSONTyped,
    TestStatusToJSON,
    TestStatusToJSONTyped,
} from './TestStatus';
import type { TestMetric } from './TestMetric';
import {
    TestMetricFromJSON,
    TestMetricFromJSONTyped,
    TestMetricToJSON,
    TestMetricToJSONTyped,
} from './TestMetric';

/**
 * Response schema for A/B test results.
 * @export
 * @interface ABTestResultsResponse
 */
export interface ABTestResultsResponse {
    /**
     * Test ID
     * @type {string}
     * @memberof ABTestResultsResponse
     */
    testId: string;
    /**
     * Test name
     * @type {string}
     * @memberof ABTestResultsResponse
     */
    testName: string;
    /**
     * 
     * @type {TestStatus}
     * @memberof ABTestResultsResponse
     */
    status: TestStatus;
    /**
     * Metric results by variant
     * @type {Array<TestMetric>}
     * @memberof ABTestResultsResponse
     */
    metrics: Array<TestMetric>;
    /**
     * Statistical significance by metric
     * @type {{ [key: string]: boolean; }}
     * @memberof ABTestResultsResponse
     */
    statisticalSignificance: { [key: string]: boolean; };
    /**
     * Confidence intervals
     * @type {{ [key: string]: { [key: string]: Array<number>; }; }}
     * @memberof ABTestResultsResponse
     */
    confidenceIntervals: { [key: string]: { [key: string]: Array<number>; }; };
    /**
     * 
     * @type {string}
     * @memberof ABTestResultsResponse
     */
    winningVariant?: string | null;
    /**
     * Action recommendation
     * @type {string}
     * @memberof ABTestResultsResponse
     */
    recommendation: string;
    /**
     * Results generation timestamp
     * @type {Date}
     * @memberof ABTestResultsResponse
     */
    generatedAt: Date;
    /**
     * Total sample size
     * @type {number}
     * @memberof ABTestResultsResponse
     */
    sampleSize: number;
    /**
     * Test duration so far
     * @type {number}
     * @memberof ABTestResultsResponse
     */
    durationDays: number;
}



/**
 * Check if a given object implements the ABTestResultsResponse interface.
 */
export function instanceOfABTestResultsResponse(value: object): value is ABTestResultsResponse {
    if (!('testId' in value) || value['testId'] === undefined) return false;
    if (!('testName' in value) || value['testName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('metrics' in value) || value['metrics'] === undefined) return false;
    if (!('statisticalSignificance' in value) || value['statisticalSignificance'] === undefined) return false;
    if (!('confidenceIntervals' in value) || value['confidenceIntervals'] === undefined) return false;
    if (!('recommendation' in value) || value['recommendation'] === undefined) return false;
    if (!('generatedAt' in value) || value['generatedAt'] === undefined) return false;
    if (!('sampleSize' in value) || value['sampleSize'] === undefined) return false;
    if (!('durationDays' in value) || value['durationDays'] === undefined) return false;
    return true;
}

export function ABTestResultsResponseFromJSON(json: any): ABTestResultsResponse {
    return ABTestResultsResponseFromJSONTyped(json, false);
}

export function ABTestResultsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ABTestResultsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'testId': json['test_id'],
        'testName': json['test_name'],
        'status': TestStatusFromJSON(json['status']),
        'metrics': ((json['metrics'] as Array<any>).map(TestMetricFromJSON)),
        'statisticalSignificance': json['statistical_significance'],
        'confidenceIntervals': json['confidence_intervals'],
        'winningVariant': json['winning_variant'] == null ? undefined : json['winning_variant'],
        'recommendation': json['recommendation'],
        'generatedAt': (new Date(json['generated_at'])),
        'sampleSize': json['sample_size'],
        'durationDays': json['duration_days'],
    };
}

export function ABTestResultsResponseToJSON(json: any): ABTestResultsResponse {
    return ABTestResultsResponseToJSONTyped(json, false);
}

export function ABTestResultsResponseToJSONTyped(value?: ABTestResultsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'test_id': value['testId'],
        'test_name': value['testName'],
        'status': TestStatusToJSON(value['status']),
        'metrics': ((value['metrics'] as Array<any>).map(TestMetricToJSON)),
        'statistical_significance': value['statisticalSignificance'],
        'confidence_intervals': value['confidenceIntervals'],
        'winning_variant': value['winningVariant'],
        'recommendation': value['recommendation'],
        'generated_at': ((value['generatedAt']).toISOString()),
        'sample_size': value['sampleSize'],
        'duration_days': value['durationDays'],
    };
}

