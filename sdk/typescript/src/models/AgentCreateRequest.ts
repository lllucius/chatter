/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentType } from './AgentType';
import {
    AgentTypeFromJSON,
    AgentTypeFromJSONTyped,
    AgentTypeToJSON,
    AgentTypeToJSONTyped,
} from './AgentType';
import type { AgentCapability } from './AgentCapability';
import {
    AgentCapabilityFromJSON,
    AgentCapabilityFromJSONTyped,
    AgentCapabilityToJSON,
    AgentCapabilityToJSONTyped,
} from './AgentCapability';

/**
 * Request schema for creating an agent.
 * @export
 * @interface AgentCreateRequest
 */
export interface AgentCreateRequest {
    /**
     * Agent name
     * @type {string}
     * @memberof AgentCreateRequest
     */
    name: string;
    /**
     * Agent description
     * @type {string}
     * @memberof AgentCreateRequest
     */
    description: string;
    /**
     * 
     * @type {AgentType}
     * @memberof AgentCreateRequest
     */
    agentType: AgentType;
    /**
     * System prompt for the agent
     * @type {string}
     * @memberof AgentCreateRequest
     */
    systemPrompt: string;
    /**
     * Agent personality traits
     * @type {Array<string>}
     * @memberof AgentCreateRequest
     */
    personalityTraits?: Array<string>;
    /**
     * Knowledge domains
     * @type {Array<string>}
     * @memberof AgentCreateRequest
     */
    knowledgeDomains?: Array<string>;
    /**
     * Response style
     * @type {string}
     * @memberof AgentCreateRequest
     */
    responseStyle?: string;
    /**
     * Agent capabilities
     * @type {Array<AgentCapability>}
     * @memberof AgentCreateRequest
     */
    capabilities?: Array<AgentCapability>;
    /**
     * Available tools
     * @type {Array<string>}
     * @memberof AgentCreateRequest
     */
    availableTools?: Array<string>;
    /**
     * Primary LLM provider
     * @type {string}
     * @memberof AgentCreateRequest
     */
    primaryLlm?: string;
    /**
     * Fallback LLM provider
     * @type {string}
     * @memberof AgentCreateRequest
     */
    fallbackLlm?: string;
    /**
     * Temperature for responses
     * @type {number}
     * @memberof AgentCreateRequest
     */
    temperature?: number;
    /**
     * Maximum tokens
     * @type {number}
     * @memberof AgentCreateRequest
     */
    maxTokens?: number;
    /**
     * Maximum conversation length
     * @type {number}
     * @memberof AgentCreateRequest
     */
    maxConversationLength?: number;
    /**
     * Context window size
     * @type {number}
     * @memberof AgentCreateRequest
     */
    contextWindowSize?: number;
    /**
     * Response timeout in seconds
     * @type {number}
     * @memberof AgentCreateRequest
     */
    responseTimeout?: number;
    /**
     * Enable learning from feedback
     * @type {boolean}
     * @memberof AgentCreateRequest
     */
    learningEnabled?: boolean;
    /**
     * Weight for feedback learning
     * @type {number}
     * @memberof AgentCreateRequest
     */
    feedbackWeight?: number;
    /**
     * Adaptation threshold
     * @type {number}
     * @memberof AgentCreateRequest
     */
    adaptationThreshold?: number;
    /**
     * Agent tags
     * @type {Array<string>}
     * @memberof AgentCreateRequest
     */
    tags?: Array<string>;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof AgentCreateRequest
     */
    metadata?: { [key: string]: any; };
}



/**
 * Check if a given object implements the AgentCreateRequest interface.
 */
export function instanceOfAgentCreateRequest(value: object): value is AgentCreateRequest {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('agentType' in value) || value['agentType'] === undefined) return false;
    if (!('systemPrompt' in value) || value['systemPrompt'] === undefined) return false;
    return true;
}

export function AgentCreateRequestFromJSON(json: any): AgentCreateRequest {
    return AgentCreateRequestFromJSONTyped(json, false);
}

export function AgentCreateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentCreateRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'agentType': AgentTypeFromJSON(json['agent_type']),
        'systemPrompt': json['system_prompt'],
        'personalityTraits': json['personality_traits'] == null ? undefined : json['personality_traits'],
        'knowledgeDomains': json['knowledge_domains'] == null ? undefined : json['knowledge_domains'],
        'responseStyle': json['response_style'] == null ? undefined : json['response_style'],
        'capabilities': json['capabilities'] == null ? undefined : ((json['capabilities'] as Array<any>).map(AgentCapabilityFromJSON)),
        'availableTools': json['available_tools'] == null ? undefined : json['available_tools'],
        'primaryLlm': json['primary_llm'] == null ? undefined : json['primary_llm'],
        'fallbackLlm': json['fallback_llm'] == null ? undefined : json['fallback_llm'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'maxConversationLength': json['max_conversation_length'] == null ? undefined : json['max_conversation_length'],
        'contextWindowSize': json['context_window_size'] == null ? undefined : json['context_window_size'],
        'responseTimeout': json['response_timeout'] == null ? undefined : json['response_timeout'],
        'learningEnabled': json['learning_enabled'] == null ? undefined : json['learning_enabled'],
        'feedbackWeight': json['feedback_weight'] == null ? undefined : json['feedback_weight'],
        'adaptationThreshold': json['adaptation_threshold'] == null ? undefined : json['adaptation_threshold'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function AgentCreateRequestToJSON(json: any): AgentCreateRequest {
    return AgentCreateRequestToJSONTyped(json, false);
}

export function AgentCreateRequestToJSONTyped(value?: AgentCreateRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'agent_type': AgentTypeToJSON(value['agentType']),
        'system_prompt': value['systemPrompt'],
        'personality_traits': value['personalityTraits'],
        'knowledge_domains': value['knowledgeDomains'],
        'response_style': value['responseStyle'],
        'capabilities': value['capabilities'] == null ? undefined : ((value['capabilities'] as Array<any>).map(AgentCapabilityToJSON)),
        'available_tools': value['availableTools'],
        'primary_llm': value['primaryLlm'],
        'fallback_llm': value['fallbackLlm'],
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'max_conversation_length': value['maxConversationLength'],
        'context_window_size': value['contextWindowSize'],
        'response_timeout': value['responseTimeout'],
        'learning_enabled': value['learningEnabled'],
        'feedback_weight': value['feedbackWeight'],
        'adaptation_threshold': value['adaptationThreshold'],
        'tags': value['tags'],
        'metadata': value['metadata'],
    };
}

