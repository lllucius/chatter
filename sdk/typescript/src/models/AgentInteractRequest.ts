/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Request schema for interacting with an agent.
 * @export
 * @interface AgentInteractRequest
 */
export interface AgentInteractRequest {
    /**
     * Message to send to the agent
     * @type {string}
     * @memberof AgentInteractRequest
     */
    message: string;
    /**
     * Conversation ID
     * @type {string}
     * @memberof AgentInteractRequest
     */
    conversationId: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AgentInteractRequest
     */
    context?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the AgentInteractRequest interface.
 */
export function instanceOfAgentInteractRequest(value: object): value is AgentInteractRequest {
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    return true;
}

export function AgentInteractRequestFromJSON(json: any): AgentInteractRequest {
    return AgentInteractRequestFromJSONTyped(json, false);
}

export function AgentInteractRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentInteractRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'conversationId': json['conversation_id'],
        'context': json['context'] == null ? undefined : json['context'],
    };
}

export function AgentInteractRequestToJSON(json: any): AgentInteractRequest {
    return AgentInteractRequestToJSONTyped(json, false);
}

export function AgentInteractRequestToJSONTyped(value?: AgentInteractRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'conversation_id': value['conversationId'],
        'context': value['context'],
    };
}

