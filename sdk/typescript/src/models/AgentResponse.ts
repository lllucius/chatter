/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AgentType } from './AgentType';
import {
    AgentTypeFromJSON,
    AgentTypeFromJSONTyped,
    AgentTypeToJSON,
    AgentTypeToJSONTyped,
} from './AgentType';
import type { AgentStatus } from './AgentStatus';
import {
    AgentStatusFromJSON,
    AgentStatusFromJSONTyped,
    AgentStatusToJSON,
    AgentStatusToJSONTyped,
} from './AgentStatus';
import type { AgentCapability } from './AgentCapability';
import {
    AgentCapabilityFromJSON,
    AgentCapabilityFromJSONTyped,
    AgentCapabilityToJSON,
    AgentCapabilityToJSONTyped,
} from './AgentCapability';

/**
 * Response schema for agent data.
 * @export
 * @interface AgentResponse
 */
export interface AgentResponse {
    /**
     * Agent ID
     * @type {string}
     * @memberof AgentResponse
     */
    id: string;
    /**
     * Agent name
     * @type {string}
     * @memberof AgentResponse
     */
    name: string;
    /**
     * Agent description
     * @type {string}
     * @memberof AgentResponse
     */
    description: string;
    /**
     * 
     * @type {AgentType}
     * @memberof AgentResponse
     */
    type: AgentType;
    /**
     * 
     * @type {AgentStatus}
     * @memberof AgentResponse
     */
    status: AgentStatus;
    /**
     * System message
     * @type {string}
     * @memberof AgentResponse
     */
    systemMessage: string;
    /**
     * Agent personality traits
     * @type {Array<string>}
     * @memberof AgentResponse
     */
    personalityTraits: Array<string>;
    /**
     * Knowledge domains
     * @type {Array<string>}
     * @memberof AgentResponse
     */
    knowledgeDomains: Array<string>;
    /**
     * Response style
     * @type {string}
     * @memberof AgentResponse
     */
    responseStyle: string;
    /**
     * Agent capabilities
     * @type {Array<AgentCapability>}
     * @memberof AgentResponse
     */
    capabilities: Array<AgentCapability>;
    /**
     * Available tools
     * @type {Array<string>}
     * @memberof AgentResponse
     */
    availableTools: Array<string>;
    /**
     * Primary LLM provider
     * @type {string}
     * @memberof AgentResponse
     */
    primaryLlm: string;
    /**
     * Fallback LLM provider
     * @type {string}
     * @memberof AgentResponse
     */
    fallbackLlm: string;
    /**
     * Temperature for responses
     * @type {number}
     * @memberof AgentResponse
     */
    temperature: number;
    /**
     * Maximum tokens
     * @type {number}
     * @memberof AgentResponse
     */
    maxTokens: number;
    /**
     * Maximum conversation length
     * @type {number}
     * @memberof AgentResponse
     */
    maxConversationLength: number;
    /**
     * Context window size
     * @type {number}
     * @memberof AgentResponse
     */
    contextWindowSize: number;
    /**
     * Response timeout in seconds
     * @type {number}
     * @memberof AgentResponse
     */
    responseTimeout: number;
    /**
     * Learning enabled
     * @type {boolean}
     * @memberof AgentResponse
     */
    learningEnabled: boolean;
    /**
     * Feedback weight
     * @type {number}
     * @memberof AgentResponse
     */
    feedbackWeight: number;
    /**
     * Adaptation threshold
     * @type {number}
     * @memberof AgentResponse
     */
    adaptationThreshold: number;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof AgentResponse
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof AgentResponse
     */
    updatedAt: Date;
    /**
     * Creator
     * @type {string}
     * @memberof AgentResponse
     */
    createdBy: string;
    /**
     * Agent tags
     * @type {Array<string>}
     * @memberof AgentResponse
     */
    tags: Array<string>;
    /**
     * Additional metadata
     * @type {{ [key: string]: any; }}
     * @memberof AgentResponse
     */
    metadata: { [key: string]: any; };
}



/**
 * Check if a given object implements the AgentResponse interface.
 */
export function instanceOfAgentResponse(value: object): value is AgentResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('systemMessage' in value) || value['systemMessage'] === undefined) return false;
    if (!('personalityTraits' in value) || value['personalityTraits'] === undefined) return false;
    if (!('knowledgeDomains' in value) || value['knowledgeDomains'] === undefined) return false;
    if (!('responseStyle' in value) || value['responseStyle'] === undefined) return false;
    if (!('capabilities' in value) || value['capabilities'] === undefined) return false;
    if (!('availableTools' in value) || value['availableTools'] === undefined) return false;
    if (!('primaryLlm' in value) || value['primaryLlm'] === undefined) return false;
    if (!('fallbackLlm' in value) || value['fallbackLlm'] === undefined) return false;
    if (!('temperature' in value) || value['temperature'] === undefined) return false;
    if (!('maxTokens' in value) || value['maxTokens'] === undefined) return false;
    if (!('maxConversationLength' in value) || value['maxConversationLength'] === undefined) return false;
    if (!('contextWindowSize' in value) || value['contextWindowSize'] === undefined) return false;
    if (!('responseTimeout' in value) || value['responseTimeout'] === undefined) return false;
    if (!('learningEnabled' in value) || value['learningEnabled'] === undefined) return false;
    if (!('feedbackWeight' in value) || value['feedbackWeight'] === undefined) return false;
    if (!('adaptationThreshold' in value) || value['adaptationThreshold'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function AgentResponseFromJSON(json: any): AgentResponse {
    return AgentResponseFromJSONTyped(json, false);
}

export function AgentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'type': AgentTypeFromJSON(json['type']),
        'status': AgentStatusFromJSON(json['status']),
        'systemMessage': json['system_message'],
        'personalityTraits': json['personality_traits'],
        'knowledgeDomains': json['knowledge_domains'],
        'responseStyle': json['response_style'],
        'capabilities': ((json['capabilities'] as Array<any>).map(AgentCapabilityFromJSON)),
        'availableTools': json['available_tools'],
        'primaryLlm': json['primary_llm'],
        'fallbackLlm': json['fallback_llm'],
        'temperature': json['temperature'],
        'maxTokens': json['max_tokens'],
        'maxConversationLength': json['max_conversation_length'],
        'contextWindowSize': json['context_window_size'],
        'responseTimeout': json['response_timeout'],
        'learningEnabled': json['learning_enabled'],
        'feedbackWeight': json['feedback_weight'],
        'adaptationThreshold': json['adaptation_threshold'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'createdBy': json['created_by'],
        'tags': json['tags'],
        'metadata': json['metadata'],
    };
}

export function AgentResponseToJSON(json: any): AgentResponse {
    return AgentResponseToJSONTyped(json, false);
}

export function AgentResponseToJSONTyped(value?: AgentResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'type': AgentTypeToJSON(value['type']),
        'status': AgentStatusToJSON(value['status']),
        'system_message': value['systemMessage'],
        'personality_traits': value['personalityTraits'],
        'knowledge_domains': value['knowledgeDomains'],
        'response_style': value['responseStyle'],
        'capabilities': ((value['capabilities'] as Array<any>).map(AgentCapabilityToJSON)),
        'available_tools': value['availableTools'],
        'primary_llm': value['primaryLlm'],
        'fallback_llm': value['fallbackLlm'],
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'max_conversation_length': value['maxConversationLength'],
        'context_window_size': value['contextWindowSize'],
        'response_timeout': value['responseTimeout'],
        'learning_enabled': value['learningEnabled'],
        'feedback_weight': value['feedbackWeight'],
        'adaptation_threshold': value['adaptationThreshold'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'created_by': value['createdBy'],
        'tags': value['tags'],
        'metadata': value['metadata'],
    };
}

