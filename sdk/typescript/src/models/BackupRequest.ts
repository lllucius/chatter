/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BackupType } from './BackupType';
import {
    BackupTypeFromJSON,
    BackupTypeFromJSONTyped,
    BackupTypeToJSON,
    BackupTypeToJSONTyped,
} from './BackupType';

/**
 * Request schema for creating a backup via API.
 * @export
 * @interface BackupRequest
 */
export interface BackupRequest {
    /**
     * 
     * @type {BackupType}
     * @memberof BackupRequest
     */
    backupType?: BackupType;
    /**
     * 
     * @type {string}
     * @memberof BackupRequest
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BackupRequest
     */
    description?: string | null;
    /**
     * Include uploaded files
     * @type {boolean}
     * @memberof BackupRequest
     */
    includeFiles?: boolean;
    /**
     * Include system logs
     * @type {boolean}
     * @memberof BackupRequest
     */
    includeLogs?: boolean;
    /**
     * Compress backup
     * @type {boolean}
     * @memberof BackupRequest
     */
    compress?: boolean;
    /**
     * Encrypt backup
     * @type {boolean}
     * @memberof BackupRequest
     */
    encrypt?: boolean;
    /**
     * Backup retention in days
     * @type {number}
     * @memberof BackupRequest
     */
    retentionDays?: number;
}



/**
 * Check if a given object implements the BackupRequest interface.
 */
export function instanceOfBackupRequest(value: object): value is BackupRequest {
    return true;
}

export function BackupRequestFromJSON(json: any): BackupRequest {
    return BackupRequestFromJSONTyped(json, false);
}

export function BackupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackupRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'backupType': json['backup_type'] == null ? undefined : BackupTypeFromJSON(json['backup_type']),
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'includeFiles': json['include_files'] == null ? undefined : json['include_files'],
        'includeLogs': json['include_logs'] == null ? undefined : json['include_logs'],
        'compress': json['compress'] == null ? undefined : json['compress'],
        'encrypt': json['encrypt'] == null ? undefined : json['encrypt'],
        'retentionDays': json['retention_days'] == null ? undefined : json['retention_days'],
    };
}

export function BackupRequestToJSON(json: any): BackupRequest {
    return BackupRequestToJSONTyped(json, false);
}

export function BackupRequestToJSONTyped(value?: BackupRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'backup_type': BackupTypeToJSON(value['backupType']),
        'name': value['name'],
        'description': value['description'],
        'include_files': value['includeFiles'],
        'include_logs': value['includeLogs'],
        'compress': value['compress'],
        'encrypt': value['encrypt'],
        'retention_days': value['retentionDays'],
    };
}

