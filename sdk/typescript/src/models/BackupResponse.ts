/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BackupType } from './BackupType';
import {
    BackupTypeFromJSON,
    BackupTypeFromJSONTyped,
    BackupTypeToJSON,
    BackupTypeToJSONTyped,
} from './BackupType';

/**
 * Response schema for backup data.
 * @export
 * @interface BackupResponse
 */
export interface BackupResponse {
    /**
     * Backup ID
     * @type {string}
     * @memberof BackupResponse
     */
    id: string;
    /**
     * Backup name
     * @type {string}
     * @memberof BackupResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof BackupResponse
     */
    description?: string | null;
    /**
     * 
     * @type {BackupType}
     * @memberof BackupResponse
     */
    backupType: BackupType;
    /**
     * Backup status
     * @type {string}
     * @memberof BackupResponse
     */
    status: string;
    /**
     * 
     * @type {number}
     * @memberof BackupResponse
     */
    fileSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BackupResponse
     */
    compressedSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BackupResponse
     */
    recordCount?: number | null;
    /**
     * Backup creation timestamp
     * @type {Date}
     * @memberof BackupResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof BackupResponse
     */
    completedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof BackupResponse
     */
    expiresAt?: Date | null;
    /**
     * Whether backup is encrypted
     * @type {boolean}
     * @memberof BackupResponse
     */
    encrypted: boolean;
    /**
     * Whether backup is compressed
     * @type {boolean}
     * @memberof BackupResponse
     */
    compressed: boolean;
    /**
     * Backup metadata
     * @type {{ [key: string]: any; }}
     * @memberof BackupResponse
     */
    metadata: { [key: string]: any; };
}



/**
 * Check if a given object implements the BackupResponse interface.
 */
export function instanceOfBackupResponse(value: object): value is BackupResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('backupType' in value) || value['backupType'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('encrypted' in value) || value['encrypted'] === undefined) return false;
    if (!('compressed' in value) || value['compressed'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function BackupResponseFromJSON(json: any): BackupResponse {
    return BackupResponseFromJSONTyped(json, false);
}

export function BackupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackupResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'backupType': BackupTypeFromJSON(json['backup_type']),
        'status': json['status'],
        'fileSize': json['file_size'] == null ? undefined : json['file_size'],
        'compressedSize': json['compressed_size'] == null ? undefined : json['compressed_size'],
        'recordCount': json['record_count'] == null ? undefined : json['record_count'],
        'createdAt': (new Date(json['created_at'])),
        'completedAt': json['completed_at'] == null ? undefined : (new Date(json['completed_at'])),
        'expiresAt': json['expires_at'] == null ? undefined : (new Date(json['expires_at'])),
        'encrypted': json['encrypted'],
        'compressed': json['compressed'],
        'metadata': json['metadata'],
    };
}

export function BackupResponseToJSON(json: any): BackupResponse {
    return BackupResponseToJSONTyped(json, false);
}

export function BackupResponseToJSONTyped(value?: BackupResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'backup_type': BackupTypeToJSON(value['backupType']),
        'status': value['status'],
        'file_size': value['fileSize'],
        'compressed_size': value['compressedSize'],
        'record_count': value['recordCount'],
        'created_at': ((value['createdAt']).toISOString()),
        'completed_at': value['completedAt'] === null ? null : ((value['completedAt'] as any)?.toISOString()),
        'expires_at': value['expiresAt'] === null ? null : ((value['expiresAt'] as any)?.toISOString()),
        'encrypted': value['encrypted'],
        'compressed': value['compressed'],
        'metadata': value['metadata'],
    };
}

