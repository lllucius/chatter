/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for chat request.
 * @export
 * @interface ChatRequest
 */
export interface ChatRequest {
    /**
     * User message
     * @type {string}
     * @memberof ChatRequest
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    conversationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    profileId?: string | null;
    /**
     * Enable streaming response
     * @type {boolean}
     * @memberof ChatRequest
     */
    stream?: boolean;
    /**
     * Workflow type: plain, rag, tools, or full (rag + tools)
     * @type {string}
     * @memberof ChatRequest
     */
    workflow?: ChatRequestWorkflow;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    provider?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    temperature?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    maxTokens?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    contextLimit?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRequest
     */
    enableRetrieval?: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ChatRequest
     */
    documentIds?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    systemPromptOverride?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ChatRequest
     */
    workflowConfig?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    workflowType?: string | null;
}


/**
 * @export
 */
export const ChatRequestWorkflow = {
    plain: 'plain',
    rag: 'rag',
    tools: 'tools',
    full: 'full'
} as const;
export type ChatRequestWorkflow = typeof ChatRequestWorkflow[keyof typeof ChatRequestWorkflow];


/**
 * Check if a given object implements the ChatRequest interface.
 */
export function instanceOfChatRequest(value: object): value is ChatRequest {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function ChatRequestFromJSON(json: any): ChatRequest {
    return ChatRequestFromJSONTyped(json, false);
}

export function ChatRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'message': json['message'],
        'conversationId': json['conversation_id'] == null ? undefined : json['conversation_id'],
        'profileId': json['profile_id'] == null ? undefined : json['profile_id'],
        'stream': json['stream'] == null ? undefined : json['stream'],
        'workflow': json['workflow'] == null ? undefined : json['workflow'],
        'provider': json['provider'] == null ? undefined : json['provider'],
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'contextLimit': json['context_limit'] == null ? undefined : json['context_limit'],
        'enableRetrieval': json['enable_retrieval'] == null ? undefined : json['enable_retrieval'],
        'documentIds': json['document_ids'] == null ? undefined : json['document_ids'],
        'systemPromptOverride': json['system_prompt_override'] == null ? undefined : json['system_prompt_override'],
        'workflowConfig': json['workflow_config'] == null ? undefined : json['workflow_config'],
        'workflowType': json['workflow_type'] == null ? undefined : json['workflow_type'],
    };
}

export function ChatRequestToJSON(json: any): ChatRequest {
    return ChatRequestToJSONTyped(json, false);
}

export function ChatRequestToJSONTyped(value?: ChatRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'message': value['message'],
        'conversation_id': value['conversationId'],
        'profile_id': value['profileId'],
        'stream': value['stream'],
        'workflow': value['workflow'],
        'provider': value['provider'],
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'context_limit': value['contextLimit'],
        'enable_retrieval': value['enableRetrieval'],
        'document_ids': value['documentIds'],
        'system_prompt_override': value['systemPromptOverride'],
        'workflow_config': value['workflowConfig'],
        'workflow_type': value['workflowType'],
    };
}

