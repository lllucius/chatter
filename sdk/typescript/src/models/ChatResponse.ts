/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageResponse } from './MessageResponse';
import {
    MessageResponseFromJSON,
    MessageResponseFromJSONTyped,
    MessageResponseToJSON,
    MessageResponseToJSONTyped,
} from './MessageResponse';
import type { ConversationResponse } from './ConversationResponse';
import {
    ConversationResponseFromJSON,
    ConversationResponseFromJSONTyped,
    ConversationResponseToJSON,
    ConversationResponseToJSONTyped,
} from './ConversationResponse';

/**
 * Schema for chat response.
 * @export
 * @interface ChatResponse
 */
export interface ChatResponse {
    /**
     * Conversation ID
     * @type {string}
     * @memberof ChatResponse
     */
    conversationId: string;
    /**
     * 
     * @type {MessageResponse}
     * @memberof ChatResponse
     */
    message: MessageResponse;
    /**
     * 
     * @type {ConversationResponse}
     * @memberof ChatResponse
     */
    conversation: ConversationResponse;
}

/**
 * Check if a given object implements the ChatResponse interface.
 */
export function instanceOfChatResponse(value: object): value is ChatResponse {
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    if (!('conversation' in value) || value['conversation'] === undefined) return false;
    return true;
}

export function ChatResponseFromJSON(json: any): ChatResponse {
    return ChatResponseFromJSONTyped(json, false);
}

export function ChatResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'conversationId': json['conversation_id'],
        'message': MessageResponseFromJSON(json['message']),
        'conversation': ConversationResponseFromJSON(json['conversation']),
    };
}

export function ChatResponseToJSON(json: any): ChatResponse {
    return ChatResponseToJSONTyped(json, false);
}

export function ChatResponseToJSONTyped(value?: ChatResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conversation_id': value['conversationId'],
        'message': MessageResponseToJSON(value['message']),
        'conversation': ConversationResponseToJSON(value['conversation']),
    };
}

