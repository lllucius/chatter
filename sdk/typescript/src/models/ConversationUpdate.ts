/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConversationStatus } from './ConversationStatus';
import {
    ConversationStatusFromJSON,
    ConversationStatusFromJSONTyped,
    ConversationStatusToJSON,
    ConversationStatusToJSONTyped,
} from './ConversationStatus';

/**
 * Schema for updating a conversation.
 * @export
 * @interface ConversationUpdate
 */
export interface ConversationUpdate {
    /**
     * 
     * @type {string}
     * @memberof ConversationUpdate
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConversationUpdate
     */
    description?: string | null;
    /**
     * 
     * @type {ConversationStatus}
     * @memberof ConversationUpdate
     */
    status?: ConversationStatus | null;
    /**
     * 
     * @type {number}
     * @memberof ConversationUpdate
     */
    temperature?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ConversationUpdate
     */
    maxTokens?: number | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationUpdate
     */
    workflowConfig?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ConversationUpdate
     */
    extraMetadata?: { [key: string]: any; } | null;
}



/**
 * Check if a given object implements the ConversationUpdate interface.
 */
export function instanceOfConversationUpdate(value: object): value is ConversationUpdate {
    return true;
}

export function ConversationUpdateFromJSON(json: any): ConversationUpdate {
    return ConversationUpdateFromJSONTyped(json, false);
}

export function ConversationUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConversationUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'status': json['status'] == null ? undefined : ConversationStatusFromJSON(json['status']),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'workflowConfig': json['workflow_config'] == null ? undefined : json['workflow_config'],
        'extraMetadata': json['extra_metadata'] == null ? undefined : json['extra_metadata'],
    };
}

export function ConversationUpdateToJSON(json: any): ConversationUpdate {
    return ConversationUpdateToJSONTyped(json, false);
}

export function ConversationUpdateToJSONTyped(value?: ConversationUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'status': ConversationStatusToJSON(value['status']),
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'workflow_config': value['workflowConfig'],
        'extra_metadata': value['extraMetadata'],
    };
}

