/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for document analytics response.
 * @export
 * @interface DocumentAnalyticsResponse
 */
export interface DocumentAnalyticsResponse {
    /**
     * Total number of documents
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    totalDocuments: number;
    /**
     * Documents by processing status
     * @type {{ [key: string]: number; }}
     * @memberof DocumentAnalyticsResponse
     */
    documentsByStatus: { [key: string]: number; };
    /**
     * Documents by file type
     * @type {{ [key: string]: number; }}
     * @memberof DocumentAnalyticsResponse
     */
    documentsByType: { [key: string]: number; };
    /**
     * Average processing time
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    avgProcessingTimeSeconds: number;
    /**
     * Processing success rate
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    processingSuccessRate: number;
    /**
     * Total number of chunks
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    totalChunks: number;
    /**
     * Average chunks per document
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    avgChunksPerDocument: number;
    /**
     * Total storage used
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    totalStorageBytes: number;
    /**
     * Average document size
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    avgDocumentSizeBytes: number;
    /**
     * Storage usage by document type
     * @type {{ [key: string]: number; }}
     * @memberof DocumentAnalyticsResponse
     */
    storageByType: { [key: string]: number; };
    /**
     * Total number of searches
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    totalSearches: number;
    /**
     * Average search results returned
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    avgSearchResults: number;
    /**
     * Popular search terms
     * @type {{ [key: string]: number; }}
     * @memberof DocumentAnalyticsResponse
     */
    popularSearchTerms: { [key: string]: number; };
    /**
     * Total document views
     * @type {number}
     * @memberof DocumentAnalyticsResponse
     */
    totalViews: number;
    /**
     * Most viewed documents
     * @type {Array<{ [key: string]: any; }>}
     * @memberof DocumentAnalyticsResponse
     */
    mostViewedDocuments: Array<{ [key: string]: any; }>;
    /**
     * Documents by access level
     * @type {{ [key: string]: number; }}
     * @memberof DocumentAnalyticsResponse
     */
    documentsByAccessLevel: { [key: string]: number; };
}

/**
 * Check if a given object implements the DocumentAnalyticsResponse interface.
 */
export function instanceOfDocumentAnalyticsResponse(value: object): value is DocumentAnalyticsResponse {
    if (!('totalDocuments' in value) || value['totalDocuments'] === undefined) return false;
    if (!('documentsByStatus' in value) || value['documentsByStatus'] === undefined) return false;
    if (!('documentsByType' in value) || value['documentsByType'] === undefined) return false;
    if (!('avgProcessingTimeSeconds' in value) || value['avgProcessingTimeSeconds'] === undefined) return false;
    if (!('processingSuccessRate' in value) || value['processingSuccessRate'] === undefined) return false;
    if (!('totalChunks' in value) || value['totalChunks'] === undefined) return false;
    if (!('avgChunksPerDocument' in value) || value['avgChunksPerDocument'] === undefined) return false;
    if (!('totalStorageBytes' in value) || value['totalStorageBytes'] === undefined) return false;
    if (!('avgDocumentSizeBytes' in value) || value['avgDocumentSizeBytes'] === undefined) return false;
    if (!('storageByType' in value) || value['storageByType'] === undefined) return false;
    if (!('totalSearches' in value) || value['totalSearches'] === undefined) return false;
    if (!('avgSearchResults' in value) || value['avgSearchResults'] === undefined) return false;
    if (!('popularSearchTerms' in value) || value['popularSearchTerms'] === undefined) return false;
    if (!('totalViews' in value) || value['totalViews'] === undefined) return false;
    if (!('mostViewedDocuments' in value) || value['mostViewedDocuments'] === undefined) return false;
    if (!('documentsByAccessLevel' in value) || value['documentsByAccessLevel'] === undefined) return false;
    return true;
}

export function DocumentAnalyticsResponseFromJSON(json: any): DocumentAnalyticsResponse {
    return DocumentAnalyticsResponseFromJSONTyped(json, false);
}

export function DocumentAnalyticsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentAnalyticsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalDocuments': json['total_documents'],
        'documentsByStatus': json['documents_by_status'],
        'documentsByType': json['documents_by_type'],
        'avgProcessingTimeSeconds': json['avg_processing_time_seconds'],
        'processingSuccessRate': json['processing_success_rate'],
        'totalChunks': json['total_chunks'],
        'avgChunksPerDocument': json['avg_chunks_per_document'],
        'totalStorageBytes': json['total_storage_bytes'],
        'avgDocumentSizeBytes': json['avg_document_size_bytes'],
        'storageByType': json['storage_by_type'],
        'totalSearches': json['total_searches'],
        'avgSearchResults': json['avg_search_results'],
        'popularSearchTerms': json['popular_search_terms'],
        'totalViews': json['total_views'],
        'mostViewedDocuments': json['most_viewed_documents'],
        'documentsByAccessLevel': json['documents_by_access_level'],
    };
}

export function DocumentAnalyticsResponseToJSON(json: any): DocumentAnalyticsResponse {
    return DocumentAnalyticsResponseToJSONTyped(json, false);
}

export function DocumentAnalyticsResponseToJSONTyped(value?: DocumentAnalyticsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_documents': value['totalDocuments'],
        'documents_by_status': value['documentsByStatus'],
        'documents_by_type': value['documentsByType'],
        'avg_processing_time_seconds': value['avgProcessingTimeSeconds'],
        'processing_success_rate': value['processingSuccessRate'],
        'total_chunks': value['totalChunks'],
        'avg_chunks_per_document': value['avgChunksPerDocument'],
        'total_storage_bytes': value['totalStorageBytes'],
        'avg_document_size_bytes': value['avgDocumentSizeBytes'],
        'storage_by_type': value['storageByType'],
        'total_searches': value['totalSearches'],
        'avg_search_results': value['avgSearchResults'],
        'popular_search_terms': value['popularSearchTerms'],
        'total_views': value['totalViews'],
        'most_viewed_documents': value['mostViewedDocuments'],
        'documents_by_access_level': value['documentsByAccessLevel'],
    };
}

