/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentStatus } from './DocumentStatus';
import {
    DocumentStatusFromJSON,
    DocumentStatusFromJSONTyped,
    DocumentStatusToJSON,
    DocumentStatusToJSONTyped,
} from './DocumentStatus';
import type { DocumentType } from './DocumentType';
import {
    DocumentTypeFromJSON,
    DocumentTypeFromJSONTyped,
    DocumentTypeToJSON,
    DocumentTypeToJSONTyped,
} from './DocumentType';

/**
 * Schema for document response.
 * @export
 * @interface DocumentResponse
 */
export interface DocumentResponse {
    /**
     * 
     * @type {string}
     * @memberof DocumentResponse
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponse
     */
    description?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentResponse
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof DocumentResponse
     */
    extraMetadata?: { [key: string]: any; } | null;
    /**
     * Whether document is public
     * @type {boolean}
     * @memberof DocumentResponse
     */
    isPublic?: boolean;
    /**
     * Document ID
     * @type {string}
     * @memberof DocumentResponse
     */
    id: string;
    /**
     * Owner user ID
     * @type {string}
     * @memberof DocumentResponse
     */
    ownerId: string;
    /**
     * Document filename
     * @type {string}
     * @memberof DocumentResponse
     */
    filename: string;
    /**
     * Original filename
     * @type {string}
     * @memberof DocumentResponse
     */
    originalFilename: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof DocumentResponse
     */
    fileSize: number;
    /**
     * File hash (SHA-256)
     * @type {string}
     * @memberof DocumentResponse
     */
    fileHash: string;
    /**
     * MIME type
     * @type {string}
     * @memberof DocumentResponse
     */
    mimeType: string;
    /**
     * 
     * @type {DocumentType}
     * @memberof DocumentResponse
     */
    documentType: DocumentType;
    /**
     * 
     * @type {DocumentStatus}
     * @memberof DocumentResponse
     */
    status: DocumentStatus;
    /**
     * 
     * @type {Date}
     * @memberof DocumentResponse
     */
    processingStartedAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof DocumentResponse
     */
    processingCompletedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponse
     */
    processingError?: string | null;
    /**
     * Chunk size
     * @type {number}
     * @memberof DocumentResponse
     */
    chunkSize: number;
    /**
     * Chunk overlap
     * @type {number}
     * @memberof DocumentResponse
     */
    chunkOverlap: number;
    /**
     * Number of chunks
     * @type {number}
     * @memberof DocumentResponse
     */
    chunkCount: number;
    /**
     * Document version
     * @type {number}
     * @memberof DocumentResponse
     */
    version: number;
    /**
     * 
     * @type {string}
     * @memberof DocumentResponse
     */
    parentDocumentId?: string | null;
    /**
     * View count
     * @type {number}
     * @memberof DocumentResponse
     */
    viewCount: number;
    /**
     * Search count
     * @type {number}
     * @memberof DocumentResponse
     */
    searchCount: number;
    /**
     * 
     * @type {Date}
     * @memberof DocumentResponse
     */
    lastAccessedAt?: Date | null;
    /**
     * Creation time
     * @type {Date}
     * @memberof DocumentResponse
     */
    createdAt: Date;
    /**
     * Last update time
     * @type {Date}
     * @memberof DocumentResponse
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the DocumentResponse interface.
 */
export function instanceOfDocumentResponse(value: object): value is DocumentResponse {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ownerId' in value) || value['ownerId'] === undefined) return false;
    if (!('filename' in value) || value['filename'] === undefined) return false;
    if (!('originalFilename' in value) || value['originalFilename'] === undefined) return false;
    if (!('fileSize' in value) || value['fileSize'] === undefined) return false;
    if (!('fileHash' in value) || value['fileHash'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('documentType' in value) || value['documentType'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('chunkSize' in value) || value['chunkSize'] === undefined) return false;
    if (!('chunkOverlap' in value) || value['chunkOverlap'] === undefined) return false;
    if (!('chunkCount' in value) || value['chunkCount'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('viewCount' in value) || value['viewCount'] === undefined) return false;
    if (!('searchCount' in value) || value['searchCount'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DocumentResponseFromJSON(json: any): DocumentResponse {
    return DocumentResponseFromJSONTyped(json, false);
}

export function DocumentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'] == null ? undefined : json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'extraMetadata': json['extra_metadata'] == null ? undefined : json['extra_metadata'],
        'isPublic': json['is_public'] == null ? undefined : json['is_public'],
        'id': json['id'],
        'ownerId': json['owner_id'],
        'filename': json['filename'],
        'originalFilename': json['original_filename'],
        'fileSize': json['file_size'],
        'fileHash': json['file_hash'],
        'mimeType': json['mime_type'],
        'documentType': DocumentTypeFromJSON(json['document_type']),
        'status': DocumentStatusFromJSON(json['status']),
        'processingStartedAt': json['processing_started_at'] == null ? undefined : (new Date(json['processing_started_at'])),
        'processingCompletedAt': json['processing_completed_at'] == null ? undefined : (new Date(json['processing_completed_at'])),
        'processingError': json['processing_error'] == null ? undefined : json['processing_error'],
        'chunkSize': json['chunk_size'],
        'chunkOverlap': json['chunk_overlap'],
        'chunkCount': json['chunk_count'],
        'version': json['version'],
        'parentDocumentId': json['parent_document_id'] == null ? undefined : json['parent_document_id'],
        'viewCount': json['view_count'],
        'searchCount': json['search_count'],
        'lastAccessedAt': json['last_accessed_at'] == null ? undefined : (new Date(json['last_accessed_at'])),
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function DocumentResponseToJSON(json: any): DocumentResponse {
    return DocumentResponseToJSONTyped(json, false);
}

export function DocumentResponseToJSONTyped(value?: DocumentResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'tags': value['tags'],
        'extra_metadata': value['extraMetadata'],
        'is_public': value['isPublic'],
        'id': value['id'],
        'owner_id': value['ownerId'],
        'filename': value['filename'],
        'original_filename': value['originalFilename'],
        'file_size': value['fileSize'],
        'file_hash': value['fileHash'],
        'mime_type': value['mimeType'],
        'document_type': DocumentTypeToJSON(value['documentType']),
        'status': DocumentStatusToJSON(value['status']),
        'processing_started_at': value['processingStartedAt'] === null ? null : ((value['processingStartedAt'] as any)?.toISOString()),
        'processing_completed_at': value['processingCompletedAt'] === null ? null : ((value['processingCompletedAt'] as any)?.toISOString()),
        'processing_error': value['processingError'],
        'chunk_size': value['chunkSize'],
        'chunk_overlap': value['chunkOverlap'],
        'chunk_count': value['chunkCount'],
        'version': value['version'],
        'parent_document_id': value['parentDocumentId'],
        'view_count': value['viewCount'],
        'search_count': value['searchCount'],
        'last_accessed_at': value['lastAccessedAt'] === null ? null : ((value['lastAccessedAt'] as any)?.toISOString()),
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

