/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DocumentType } from './DocumentType';
import {
    DocumentTypeFromJSON,
    DocumentTypeFromJSONTyped,
    DocumentTypeToJSON,
    DocumentTypeToJSONTyped,
} from './DocumentType';

/**
 * Schema for document search request.
 * @export
 * @interface DocumentSearchRequest
 */
export interface DocumentSearchRequest {
    /**
     * Search query
     * @type {string}
     * @memberof DocumentSearchRequest
     */
    query: string;
    /**
     * Maximum number of results
     * @type {number}
     * @memberof DocumentSearchRequest
     */
    limit?: number;
    /**
     * Minimum similarity score
     * @type {number}
     * @memberof DocumentSearchRequest
     */
    scoreThreshold?: number;
    /**
     * 
     * @type {Array<DocumentType>}
     * @memberof DocumentSearchRequest
     */
    documentTypes?: Array<DocumentType> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof DocumentSearchRequest
     */
    tags?: Array<string> | null;
    /**
     * Include document content in results
     * @type {boolean}
     * @memberof DocumentSearchRequest
     */
    includeContent?: boolean;
}

/**
 * Check if a given object implements the DocumentSearchRequest interface.
 */
export function instanceOfDocumentSearchRequest(value: object): value is DocumentSearchRequest {
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function DocumentSearchRequestFromJSON(json: any): DocumentSearchRequest {
    return DocumentSearchRequestFromJSONTyped(json, false);
}

export function DocumentSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentSearchRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'scoreThreshold': json['score_threshold'] == null ? undefined : json['score_threshold'],
        'documentTypes': json['document_types'] == null ? undefined : ((json['document_types'] as Array<any>).map(DocumentTypeFromJSON)),
        'tags': json['tags'] == null ? undefined : json['tags'],
        'includeContent': json['include_content'] == null ? undefined : json['include_content'],
    };
}

export function DocumentSearchRequestToJSON(json: any): DocumentSearchRequest {
    return DocumentSearchRequestToJSONTyped(json, false);
}

export function DocumentSearchRequestToJSONTyped(value?: DocumentSearchRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'query': value['query'],
        'limit': value['limit'],
        'score_threshold': value['scoreThreshold'],
        'document_types': value['documentTypes'] == null ? undefined : ((value['documentTypes'] as Array<any>).map(DocumentTypeToJSON)),
        'tags': value['tags'],
        'include_content': value['includeContent'],
    };
}

