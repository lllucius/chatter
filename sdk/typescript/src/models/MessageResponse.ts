/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageRole } from './MessageRole';
import {
    MessageRoleFromJSON,
    MessageRoleFromJSONTyped,
    MessageRoleToJSON,
    MessageRoleToJSONTyped,
} from './MessageRole';

/**
 * Schema for message response.
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
    /**
     * 
     * @type {MessageRole}
     * @memberof MessageResponse
     */
    role: MessageRole;
    /**
     * Message content
     * @type {string}
     * @memberof MessageResponse
     */
    content: string;
    /**
     * Message ID
     * @type {string}
     * @memberof MessageResponse
     */
    id: string;
    /**
     * Conversation ID
     * @type {string}
     * @memberof MessageResponse
     */
    conversationId: string;
    /**
     * Message sequence number
     * @type {number}
     * @memberof MessageResponse
     */
    sequenceNumber: number;
    /**
     * 
     * @type {number}
     * @memberof MessageResponse
     */
    promptTokens?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MessageResponse
     */
    completionTokens?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MessageResponse
     */
    totalTokens?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MessageResponse
     */
    modelUsed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MessageResponse
     */
    providerUsed?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MessageResponse
     */
    responseTimeMs?: number | null;
    /**
     * 
     * @type {number}
     * @memberof MessageResponse
     */
    cost?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MessageResponse
     */
    finishReason?: string | null;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof MessageResponse
     */
    createdAt: Date;
}



/**
 * Check if a given object implements the MessageResponse interface.
 */
export function instanceOfMessageResponse(value: object): value is MessageResponse {
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('conversationId' in value) || value['conversationId'] === undefined) return false;
    if (!('sequenceNumber' in value) || value['sequenceNumber'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function MessageResponseFromJSON(json: any): MessageResponse {
    return MessageResponseFromJSONTyped(json, false);
}

export function MessageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'role': MessageRoleFromJSON(json['role']),
        'content': json['content'],
        'id': json['id'],
        'conversationId': json['conversation_id'],
        'sequenceNumber': json['sequence_number'],
        'promptTokens': json['prompt_tokens'] == null ? undefined : json['prompt_tokens'],
        'completionTokens': json['completion_tokens'] == null ? undefined : json['completion_tokens'],
        'totalTokens': json['total_tokens'] == null ? undefined : json['total_tokens'],
        'modelUsed': json['model_used'] == null ? undefined : json['model_used'],
        'providerUsed': json['provider_used'] == null ? undefined : json['provider_used'],
        'responseTimeMs': json['response_time_ms'] == null ? undefined : json['response_time_ms'],
        'cost': json['cost'] == null ? undefined : json['cost'],
        'finishReason': json['finish_reason'] == null ? undefined : json['finish_reason'],
        'createdAt': (new Date(json['created_at'])),
    };
}

export function MessageResponseToJSON(json: any): MessageResponse {
    return MessageResponseToJSONTyped(json, false);
}

export function MessageResponseToJSONTyped(value?: MessageResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'role': MessageRoleToJSON(value['role']),
        'content': value['content'],
        'id': value['id'],
        'conversation_id': value['conversationId'],
        'sequence_number': value['sequenceNumber'],
        'prompt_tokens': value['promptTokens'],
        'completion_tokens': value['completionTokens'],
        'total_tokens': value['totalTokens'],
        'model_used': value['modelUsed'],
        'provider_used': value['providerUsed'],
        'response_time_ms': value['responseTimeMs'],
        'cost': value['cost'],
        'finish_reason': value['finishReason'],
        'created_at': ((value['createdAt']).toISOString()),
    };
}

