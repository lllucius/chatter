/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MinValue } from './MinValue';
import {
    MinValueFromJSON,
    MinValueFromJSONTyped,
    MinValueToJSON,
    MinValueToJSONTyped,
} from './MinValue';
import type { MaxValue } from './MaxValue';
import {
    MaxValueFromJSON,
    MaxValueFromJSONTyped,
    MaxValueToJSON,
    MaxValueToJSONTyped,
} from './MaxValue';

/**
 * Schema for node property definition.
 * @export
 * @interface NodePropertyDefinition
 */
export interface NodePropertyDefinition {
    /**
     * Property name
     * @type {string}
     * @memberof NodePropertyDefinition
     */
    name: string;
    /**
     * Property type
     * @type {string}
     * @memberof NodePropertyDefinition
     */
    type: string;
    /**
     * Whether property is required
     * @type {boolean}
     * @memberof NodePropertyDefinition
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NodePropertyDefinition
     */
    description?: string | null;
    /**
     * Default value
     * @type {}
     * @memberof NodePropertyDefinition
     */
    defaultValue?:  | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof NodePropertyDefinition
     */
    options?: Array<string> | null;
    /**
     * 
     * @type {MinValue}
     * @memberof NodePropertyDefinition
     */
    minValue?: MinValue | null;
    /**
     * 
     * @type {MaxValue}
     * @memberof NodePropertyDefinition
     */
    maxValue?: MaxValue | null;
}

/**
 * Check if a given object implements the NodePropertyDefinition interface.
 */
export function instanceOfNodePropertyDefinition(value: object): value is NodePropertyDefinition {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function NodePropertyDefinitionFromJSON(json: any): NodePropertyDefinition {
    return NodePropertyDefinitionFromJSONTyped(json, false);
}

export function NodePropertyDefinitionFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodePropertyDefinition {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': json['type'],
        'required': json['required'] == null ? undefined : json['required'],
        'description': json['description'] == null ? undefined : json['description'],
        'defaultValue': json['default_value'] == null ? undefined : FromJSON(json['default_value']),
        'options': json['options'] == null ? undefined : json['options'],
        'minValue': json['min_value'] == null ? undefined : MinValueFromJSON(json['min_value']),
        'maxValue': json['max_value'] == null ? undefined : MaxValueFromJSON(json['max_value']),
    };
}

export function NodePropertyDefinitionToJSON(json: any): NodePropertyDefinition {
    return NodePropertyDefinitionToJSONTyped(json, false);
}

export function NodePropertyDefinitionToJSONTyped(value?: NodePropertyDefinition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'type': value['type'],
        'required': value['required'],
        'description': value['description'],
        'default_value': ToJSON(value['defaultValue']),
        'options': value['options'],
        'min_value': MinValueToJSON(value['minValue']),
        'max_value': MaxValueToJSON(value['maxValue']),
    };
}

