/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PluginResponse } from './PluginResponse';
import {
    PluginResponseFromJSON,
    PluginResponseFromJSONTyped,
    PluginResponseToJSON,
    PluginResponseToJSONTyped,
} from './PluginResponse';

/**
 * Response schema for plugin list.
 * @export
 * @interface PluginListResponse
 */
export interface PluginListResponse {
    /**
     * List of plugins
     * @type {Array<PluginResponse>}
     * @memberof PluginListResponse
     */
    plugins: Array<PluginResponse>;
    /**
     * Total number of plugins
     * @type {number}
     * @memberof PluginListResponse
     */
    total: number;
}

/**
 * Check if a given object implements the PluginListResponse interface.
 */
export function instanceOfPluginListResponse(value: object): value is PluginListResponse {
    if (!('plugins' in value) || value['plugins'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    return true;
}

export function PluginListResponseFromJSON(json: any): PluginListResponse {
    return PluginListResponseFromJSONTyped(json, false);
}

export function PluginListResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginListResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'plugins': ((json['plugins'] as Array<any>).map(PluginResponseFromJSON)),
        'total': json['total'],
    };
}

export function PluginListResponseToJSON(json: any): PluginListResponse {
    return PluginListResponseToJSONTyped(json, false);
}

export function PluginListResponseToJSONTyped(value?: PluginListResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'plugins': ((value['plugins'] as Array<any>).map(PluginResponseToJSON)),
        'total': value['total'],
    };
}

