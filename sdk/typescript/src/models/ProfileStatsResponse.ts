/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProfileResponse } from './ProfileResponse';
import {
    ProfileResponseFromJSON,
    ProfileResponseFromJSONTyped,
    ProfileResponseToJSON,
    ProfileResponseToJSONTyped,
} from './ProfileResponse';

/**
 * Schema for profile statistics response.
 * @export
 * @interface ProfileStatsResponse
 */
export interface ProfileStatsResponse {
    /**
     * Total number of profiles
     * @type {number}
     * @memberof ProfileStatsResponse
     */
    totalProfiles: number;
    /**
     * Profiles grouped by type
     * @type {{ [key: string]: number; }}
     * @memberof ProfileStatsResponse
     */
    profilesByType: { [key: string]: number; };
    /**
     * Profiles grouped by LLM provider
     * @type {{ [key: string]: number; }}
     * @memberof ProfileStatsResponse
     */
    profilesByProvider: { [key: string]: number; };
    /**
     * Most frequently used profiles
     * @type {Array<ProfileResponse>}
     * @memberof ProfileStatsResponse
     */
    mostUsedProfiles: Array<ProfileResponse>;
    /**
     * Recently created profiles
     * @type {Array<ProfileResponse>}
     * @memberof ProfileStatsResponse
     */
    recentProfiles: Array<ProfileResponse>;
    /**
     * Usage statistics
     * @type {{ [key: string]: any; }}
     * @memberof ProfileStatsResponse
     */
    usageStats: { [key: string]: any; };
}

/**
 * Check if a given object implements the ProfileStatsResponse interface.
 */
export function instanceOfProfileStatsResponse(value: object): value is ProfileStatsResponse {
    if (!('totalProfiles' in value) || value['totalProfiles'] === undefined) return false;
    if (!('profilesByType' in value) || value['profilesByType'] === undefined) return false;
    if (!('profilesByProvider' in value) || value['profilesByProvider'] === undefined) return false;
    if (!('mostUsedProfiles' in value) || value['mostUsedProfiles'] === undefined) return false;
    if (!('recentProfiles' in value) || value['recentProfiles'] === undefined) return false;
    if (!('usageStats' in value) || value['usageStats'] === undefined) return false;
    return true;
}

export function ProfileStatsResponseFromJSON(json: any): ProfileStatsResponse {
    return ProfileStatsResponseFromJSONTyped(json, false);
}

export function ProfileStatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileStatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalProfiles': json['total_profiles'],
        'profilesByType': json['profiles_by_type'],
        'profilesByProvider': json['profiles_by_provider'],
        'mostUsedProfiles': ((json['most_used_profiles'] as Array<any>).map(ProfileResponseFromJSON)),
        'recentProfiles': ((json['recent_profiles'] as Array<any>).map(ProfileResponseFromJSON)),
        'usageStats': json['usage_stats'],
    };
}

export function ProfileStatsResponseToJSON(json: any): ProfileStatsResponse {
    return ProfileStatsResponseToJSONTyped(json, false);
}

export function ProfileStatsResponseToJSONTyped(value?: ProfileStatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_profiles': value['totalProfiles'],
        'profiles_by_type': value['profilesByType'],
        'profiles_by_provider': value['profilesByProvider'],
        'most_used_profiles': ((value['mostUsedProfiles'] as Array<any>).map(ProfileResponseToJSON)),
        'recent_profiles': ((value['recentProfiles'] as Array<any>).map(ProfileResponseToJSON)),
        'usage_stats': value['usageStats'],
    };
}

