/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PromptType } from './PromptType';
import {
    PromptTypeFromJSON,
    PromptTypeFromJSONTyped,
    PromptTypeToJSON,
    PromptTypeToJSONTyped,
} from './PromptType';
import type { PromptCategory } from './PromptCategory';
import {
    PromptCategoryFromJSON,
    PromptCategoryFromJSONTyped,
    PromptCategoryToJSON,
    PromptCategoryToJSONTyped,
} from './PromptCategory';

/**
 * Schema for creating a prompt.
 * @export
 * @interface PromptCreate
 */
export interface PromptCreate {
    /**
     * Prompt name
     * @type {string}
     * @memberof PromptCreate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PromptCreate
     */
    description?: string | null;
    /**
     * 
     * @type {PromptType}
     * @memberof PromptCreate
     */
    promptType?: PromptType;
    /**
     * 
     * @type {PromptCategory}
     * @memberof PromptCreate
     */
    category?: PromptCategory;
    /**
     * Prompt content/template
     * @type {string}
     * @memberof PromptCreate
     */
    content: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromptCreate
     */
    variables?: Array<string> | null;
    /**
     * Template format (f-string, jinja2, mustache)
     * @type {string}
     * @memberof PromptCreate
     */
    templateFormat?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PromptCreate
     */
    inputSchema?: { [key: string]: any; } | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PromptCreate
     */
    outputSchema?: { [key: string]: any; } | null;
    /**
     * 
     * @type {number}
     * @memberof PromptCreate
     */
    maxLength?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromptCreate
     */
    minLength?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromptCreate
     */
    requiredVariables?: Array<string> | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof PromptCreate
     */
    examples?: Array<{ [key: string]: any; }> | null;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof PromptCreate
     */
    testCases?: Array<{ [key: string]: any; }> | null;
    /**
     * 
     * @type {number}
     * @memberof PromptCreate
     */
    suggestedTemperature?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PromptCreate
     */
    suggestedMaxTokens?: number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromptCreate
     */
    suggestedProviders?: Array<string> | null;
    /**
     * Whether this is a chain prompt
     * @type {boolean}
     * @memberof PromptCreate
     */
    isChain?: boolean;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof PromptCreate
     */
    chainSteps?: Array<{ [key: string]: any; }> | null;
    /**
     * 
     * @type {string}
     * @memberof PromptCreate
     */
    parentPromptId?: string | null;
    /**
     * Whether prompt is public
     * @type {boolean}
     * @memberof PromptCreate
     */
    isPublic?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PromptCreate
     */
    tags?: Array<string> | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PromptCreate
     */
    extraMetadata?: { [key: string]: any; } | null;
}



/**
 * Check if a given object implements the PromptCreate interface.
 */
export function instanceOfPromptCreate(value: object): value is PromptCreate {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function PromptCreateFromJSON(json: any): PromptCreate {
    return PromptCreateFromJSONTyped(json, false);
}

export function PromptCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromptCreate {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'promptType': json['prompt_type'] == null ? undefined : PromptTypeFromJSON(json['prompt_type']),
        'category': json['category'] == null ? undefined : PromptCategoryFromJSON(json['category']),
        'content': json['content'],
        'variables': json['variables'] == null ? undefined : json['variables'],
        'templateFormat': json['template_format'] == null ? undefined : json['template_format'],
        'inputSchema': json['input_schema'] == null ? undefined : json['input_schema'],
        'outputSchema': json['output_schema'] == null ? undefined : json['output_schema'],
        'maxLength': json['max_length'] == null ? undefined : json['max_length'],
        'minLength': json['min_length'] == null ? undefined : json['min_length'],
        'requiredVariables': json['required_variables'] == null ? undefined : json['required_variables'],
        'examples': json['examples'] == null ? undefined : json['examples'],
        'testCases': json['test_cases'] == null ? undefined : json['test_cases'],
        'suggestedTemperature': json['suggested_temperature'] == null ? undefined : json['suggested_temperature'],
        'suggestedMaxTokens': json['suggested_max_tokens'] == null ? undefined : json['suggested_max_tokens'],
        'suggestedProviders': json['suggested_providers'] == null ? undefined : json['suggested_providers'],
        'isChain': json['is_chain'] == null ? undefined : json['is_chain'],
        'chainSteps': json['chain_steps'] == null ? undefined : json['chain_steps'],
        'parentPromptId': json['parent_prompt_id'] == null ? undefined : json['parent_prompt_id'],
        'isPublic': json['is_public'] == null ? undefined : json['is_public'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'extraMetadata': json['extra_metadata'] == null ? undefined : json['extra_metadata'],
    };
}

export function PromptCreateToJSON(json: any): PromptCreate {
    return PromptCreateToJSONTyped(json, false);
}

export function PromptCreateToJSONTyped(value?: PromptCreate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
        'prompt_type': PromptTypeToJSON(value['promptType']),
        'category': PromptCategoryToJSON(value['category']),
        'content': value['content'],
        'variables': value['variables'],
        'template_format': value['templateFormat'],
        'input_schema': value['inputSchema'],
        'output_schema': value['outputSchema'],
        'max_length': value['maxLength'],
        'min_length': value['minLength'],
        'required_variables': value['requiredVariables'],
        'examples': value['examples'],
        'test_cases': value['testCases'],
        'suggested_temperature': value['suggestedTemperature'],
        'suggested_max_tokens': value['suggestedMaxTokens'],
        'suggested_providers': value['suggestedProviders'],
        'is_chain': value['isChain'],
        'chain_steps': value['chainSteps'],
        'parent_prompt_id': value['parentPromptId'],
        'is_public': value['isPublic'],
        'tags': value['tags'],
        'extra_metadata': value['extraMetadata'],
    };
}

