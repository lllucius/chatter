/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PromptResponse } from './PromptResponse';
import {
    PromptResponseFromJSON,
    PromptResponseFromJSONTyped,
    PromptResponseToJSON,
    PromptResponseToJSONTyped,
} from './PromptResponse';

/**
 * Schema for prompt statistics response.
 * @export
 * @interface PromptStatsResponse
 */
export interface PromptStatsResponse {
    /**
     * Total number of prompts
     * @type {number}
     * @memberof PromptStatsResponse
     */
    totalPrompts: number;
    /**
     * Prompts by type
     * @type {{ [key: string]: number; }}
     * @memberof PromptStatsResponse
     */
    promptsByType: { [key: string]: number; };
    /**
     * Prompts by category
     * @type {{ [key: string]: number; }}
     * @memberof PromptStatsResponse
     */
    promptsByCategory: { [key: string]: number; };
    /**
     * Most used prompts
     * @type {Array<PromptResponse>}
     * @memberof PromptStatsResponse
     */
    mostUsedPrompts: Array<PromptResponse>;
    /**
     * Recently created prompts
     * @type {Array<PromptResponse>}
     * @memberof PromptStatsResponse
     */
    recentPrompts: Array<PromptResponse>;
    /**
     * Usage statistics
     * @type {{ [key: string]: any; }}
     * @memberof PromptStatsResponse
     */
    usageStats: { [key: string]: any; };
}

/**
 * Check if a given object implements the PromptStatsResponse interface.
 */
export function instanceOfPromptStatsResponse(value: object): value is PromptStatsResponse {
    if (!('totalPrompts' in value) || value['totalPrompts'] === undefined) return false;
    if (!('promptsByType' in value) || value['promptsByType'] === undefined) return false;
    if (!('promptsByCategory' in value) || value['promptsByCategory'] === undefined) return false;
    if (!('mostUsedPrompts' in value) || value['mostUsedPrompts'] === undefined) return false;
    if (!('recentPrompts' in value) || value['recentPrompts'] === undefined) return false;
    if (!('usageStats' in value) || value['usageStats'] === undefined) return false;
    return true;
}

export function PromptStatsResponseFromJSON(json: any): PromptStatsResponse {
    return PromptStatsResponseFromJSONTyped(json, false);
}

export function PromptStatsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromptStatsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalPrompts': json['total_prompts'],
        'promptsByType': json['prompts_by_type'],
        'promptsByCategory': json['prompts_by_category'],
        'mostUsedPrompts': ((json['most_used_prompts'] as Array<any>).map(PromptResponseFromJSON)),
        'recentPrompts': ((json['recent_prompts'] as Array<any>).map(PromptResponseFromJSON)),
        'usageStats': json['usage_stats'],
    };
}

export function PromptStatsResponseToJSON(json: any): PromptStatsResponse {
    return PromptStatsResponseToJSONTyped(json, false);
}

export function PromptStatsResponseToJSONTyped(value?: PromptStatsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_prompts': value['totalPrompts'],
        'prompts_by_type': value['promptsByType'],
        'prompts_by_category': value['promptsByCategory'],
        'most_used_prompts': ((value['mostUsedPrompts'] as Array<any>).map(PromptResponseToJSON)),
        'recent_prompts': ((value['recentPrompts'] as Array<any>).map(PromptResponseToJSON)),
        'usage_stats': value['usageStats'],
    };
}

