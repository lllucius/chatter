/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Provider } from './Provider';
import {
    ProviderFromJSON,
    ProviderFromJSONTyped,
    ProviderToJSON,
    ProviderToJSONTyped,
} from './Provider';

/**
 * List of providers with pagination.
 * @export
 * @interface ProviderList
 */
export interface ProviderList {
    /**
     * 
     * @type {Array<Provider>}
     * @memberof ProviderList
     */
    providers: Array<Provider>;
    /**
     * 
     * @type {number}
     * @memberof ProviderList
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof ProviderList
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof ProviderList
     */
    perPage: number;
}

/**
 * Check if a given object implements the ProviderList interface.
 */
export function instanceOfProviderList(value: object): value is ProviderList {
    if (!('providers' in value) || value['providers'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    if (!('perPage' in value) || value['perPage'] === undefined) return false;
    return true;
}

export function ProviderListFromJSON(json: any): ProviderList {
    return ProviderListFromJSONTyped(json, false);
}

export function ProviderListFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderList {
    if (json == null) {
        return json;
    }
    return {
        
        'providers': ((json['providers'] as Array<any>).map(ProviderFromJSON)),
        'total': json['total'],
        'page': json['page'],
        'perPage': json['per_page'],
    };
}

export function ProviderListToJSON(json: any): ProviderList {
    return ProviderListToJSONTyped(json, false);
}

export function ProviderListToJSONTyped(value?: ProviderList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'providers': ((value['providers'] as Array<any>).map(ProviderToJSON)),
        'total': value['total'],
        'page': value['page'],
        'per_page': value['perPage'],
    };
}

