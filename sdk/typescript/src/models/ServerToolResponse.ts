/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ToolStatus } from './ToolStatus';
import {
    ToolStatusFromJSON,
    ToolStatusFromJSONTyped,
    ToolStatusToJSON,
    ToolStatusToJSONTyped,
} from './ToolStatus';

/**
 * Schema for server tool response.
 * @export
 * @interface ServerToolResponse
 */
export interface ServerToolResponse {
    /**
     * Tool name
     * @type {string}
     * @memberof ServerToolResponse
     */
    name: string;
    /**
     * Display name
     * @type {string}
     * @memberof ServerToolResponse
     */
    displayName: string;
    /**
     * 
     * @type {string}
     * @memberof ServerToolResponse
     */
    description?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ServerToolResponse
     */
    argsSchema?: { [key: string]: any; } | null;
    /**
     * Bypass when tool is unavailable
     * @type {boolean}
     * @memberof ServerToolResponse
     */
    bypassWhenUnavailable?: boolean;
    /**
     * Tool ID
     * @type {string}
     * @memberof ServerToolResponse
     */
    id: string;
    /**
     * Server ID
     * @type {string}
     * @memberof ServerToolResponse
     */
    serverId: string;
    /**
     * 
     * @type {ToolStatus}
     * @memberof ServerToolResponse
     */
    status: ToolStatus;
    /**
     * Tool availability
     * @type {boolean}
     * @memberof ServerToolResponse
     */
    isAvailable: boolean;
    /**
     * Total number of calls
     * @type {number}
     * @memberof ServerToolResponse
     */
    totalCalls: number;
    /**
     * Total number of errors
     * @type {number}
     * @memberof ServerToolResponse
     */
    totalErrors: number;
    /**
     * 
     * @type {Date}
     * @memberof ServerToolResponse
     */
    lastCalled?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ServerToolResponse
     */
    lastError?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ServerToolResponse
     */
    avgResponseTimeMs?: number | null;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof ServerToolResponse
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof ServerToolResponse
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the ServerToolResponse interface.
 */
export function instanceOfServerToolResponse(value: object): value is ServerToolResponse {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('serverId' in value) || value['serverId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('isAvailable' in value) || value['isAvailable'] === undefined) return false;
    if (!('totalCalls' in value) || value['totalCalls'] === undefined) return false;
    if (!('totalErrors' in value) || value['totalErrors'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ServerToolResponseFromJSON(json: any): ServerToolResponse {
    return ServerToolResponseFromJSONTyped(json, false);
}

export function ServerToolResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerToolResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': json['display_name'],
        'description': json['description'] == null ? undefined : json['description'],
        'argsSchema': json['args_schema'] == null ? undefined : json['args_schema'],
        'bypassWhenUnavailable': json['bypass_when_unavailable'] == null ? undefined : json['bypass_when_unavailable'],
        'id': json['id'],
        'serverId': json['server_id'],
        'status': ToolStatusFromJSON(json['status']),
        'isAvailable': json['is_available'],
        'totalCalls': json['total_calls'],
        'totalErrors': json['total_errors'],
        'lastCalled': json['last_called'] == null ? undefined : (new Date(json['last_called'])),
        'lastError': json['last_error'] == null ? undefined : json['last_error'],
        'avgResponseTimeMs': json['avg_response_time_ms'] == null ? undefined : json['avg_response_time_ms'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function ServerToolResponseToJSON(json: any): ServerToolResponse {
    return ServerToolResponseToJSONTyped(json, false);
}

export function ServerToolResponseToJSONTyped(value?: ServerToolResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'display_name': value['displayName'],
        'description': value['description'],
        'args_schema': value['argsSchema'],
        'bypass_when_unavailable': value['bypassWhenUnavailable'],
        'id': value['id'],
        'server_id': value['serverId'],
        'status': ToolStatusToJSON(value['status']),
        'is_available': value['isAvailable'],
        'total_calls': value['totalCalls'],
        'total_errors': value['totalErrors'],
        'last_called': value['lastCalled'] === null ? null : ((value['lastCalled'] as any)?.toISOString()),
        'last_error': value['lastError'],
        'avg_response_time_ms': value['avgResponseTimeMs'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

