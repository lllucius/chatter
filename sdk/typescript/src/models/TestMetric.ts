/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MetricType } from './MetricType';
import {
    MetricTypeFromJSON,
    MetricTypeFromJSONTyped,
    MetricTypeToJSON,
    MetricTypeToJSONTyped,
} from './MetricType';

/**
 * Test metric data.
 * @export
 * @interface TestMetric
 */
export interface TestMetric {
    /**
     * 
     * @type {MetricType}
     * @memberof TestMetric
     */
    metricType: MetricType;
    /**
     * Variant name
     * @type {string}
     * @memberof TestMetric
     */
    variantName: string;
    /**
     * Metric value
     * @type {number}
     * @memberof TestMetric
     */
    value: number;
    /**
     * Sample size
     * @type {number}
     * @memberof TestMetric
     */
    sampleSize: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof TestMetric
     */
    confidenceInterval?: Array<number> | null;
}



/**
 * Check if a given object implements the TestMetric interface.
 */
export function instanceOfTestMetric(value: object): value is TestMetric {
    if (!('metricType' in value) || value['metricType'] === undefined) return false;
    if (!('variantName' in value) || value['variantName'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('sampleSize' in value) || value['sampleSize'] === undefined) return false;
    return true;
}

export function TestMetricFromJSON(json: any): TestMetric {
    return TestMetricFromJSONTyped(json, false);
}

export function TestMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestMetric {
    if (json == null) {
        return json;
    }
    return {
        
        'metricType': MetricTypeFromJSON(json['metric_type']),
        'variantName': json['variant_name'],
        'value': json['value'],
        'sampleSize': json['sample_size'],
        'confidenceInterval': json['confidence_interval'] == null ? undefined : json['confidence_interval'],
    };
}

export function TestMetricToJSON(json: any): TestMetric {
    return TestMetricToJSONTyped(json, false);
}

export function TestMetricToJSONTyped(value?: TestMetric | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'metric_type': MetricTypeToJSON(value['metricType']),
        'variant_name': value['variantName'],
        'value': value['value'],
        'sample_size': value['sampleSize'],
        'confidence_interval': value['confidenceInterval'],
    };
}

