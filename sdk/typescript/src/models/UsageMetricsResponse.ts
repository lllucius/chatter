/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for usage metrics response.
 * @export
 * @interface UsageMetricsResponse
 */
export interface UsageMetricsResponse {
    /**
     * Total prompt tokens
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    totalPromptTokens: number;
    /**
     * Total completion tokens
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    totalCompletionTokens: number;
    /**
     * Total tokens used
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    totalTokens: number;
    /**
     * Token usage by model
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    tokensByModel: { [key: string]: number; };
    /**
     * Token usage by provider
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    tokensByProvider: { [key: string]: number; };
    /**
     * Total cost
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    totalCost: number;
    /**
     * Cost by model
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    costByModel: { [key: string]: number; };
    /**
     * Cost by provider
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    costByProvider: { [key: string]: number; };
    /**
     * Daily token usage
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    dailyUsage: { [key: string]: number; };
    /**
     * Daily cost
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    dailyCost: { [key: string]: number; };
    /**
     * Average response time
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    avgResponseTime: number;
    /**
     * Response times by model
     * @type {{ [key: string]: number; }}
     * @memberof UsageMetricsResponse
     */
    responseTimesByModel: { [key: string]: number; };
    /**
     * Number of active days
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    activeDays: number;
    /**
     * Peak usage hour
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    peakUsageHour: number;
    /**
     * Average conversations per day
     * @type {number}
     * @memberof UsageMetricsResponse
     */
    conversationsPerDay: number;
}

/**
 * Check if a given object implements the UsageMetricsResponse interface.
 */
export function instanceOfUsageMetricsResponse(value: object): value is UsageMetricsResponse {
    if (!('totalPromptTokens' in value) || value['totalPromptTokens'] === undefined) return false;
    if (!('totalCompletionTokens' in value) || value['totalCompletionTokens'] === undefined) return false;
    if (!('totalTokens' in value) || value['totalTokens'] === undefined) return false;
    if (!('tokensByModel' in value) || value['tokensByModel'] === undefined) return false;
    if (!('tokensByProvider' in value) || value['tokensByProvider'] === undefined) return false;
    if (!('totalCost' in value) || value['totalCost'] === undefined) return false;
    if (!('costByModel' in value) || value['costByModel'] === undefined) return false;
    if (!('costByProvider' in value) || value['costByProvider'] === undefined) return false;
    if (!('dailyUsage' in value) || value['dailyUsage'] === undefined) return false;
    if (!('dailyCost' in value) || value['dailyCost'] === undefined) return false;
    if (!('avgResponseTime' in value) || value['avgResponseTime'] === undefined) return false;
    if (!('responseTimesByModel' in value) || value['responseTimesByModel'] === undefined) return false;
    if (!('activeDays' in value) || value['activeDays'] === undefined) return false;
    if (!('peakUsageHour' in value) || value['peakUsageHour'] === undefined) return false;
    if (!('conversationsPerDay' in value) || value['conversationsPerDay'] === undefined) return false;
    return true;
}

export function UsageMetricsResponseFromJSON(json: any): UsageMetricsResponse {
    return UsageMetricsResponseFromJSONTyped(json, false);
}

export function UsageMetricsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageMetricsResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'totalPromptTokens': json['total_prompt_tokens'],
        'totalCompletionTokens': json['total_completion_tokens'],
        'totalTokens': json['total_tokens'],
        'tokensByModel': json['tokens_by_model'],
        'tokensByProvider': json['tokens_by_provider'],
        'totalCost': json['total_cost'],
        'costByModel': json['cost_by_model'],
        'costByProvider': json['cost_by_provider'],
        'dailyUsage': json['daily_usage'],
        'dailyCost': json['daily_cost'],
        'avgResponseTime': json['avg_response_time'],
        'responseTimesByModel': json['response_times_by_model'],
        'activeDays': json['active_days'],
        'peakUsageHour': json['peak_usage_hour'],
        'conversationsPerDay': json['conversations_per_day'],
    };
}

export function UsageMetricsResponseToJSON(json: any): UsageMetricsResponse {
    return UsageMetricsResponseToJSONTyped(json, false);
}

export function UsageMetricsResponseToJSONTyped(value?: UsageMetricsResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'total_prompt_tokens': value['totalPromptTokens'],
        'total_completion_tokens': value['totalCompletionTokens'],
        'total_tokens': value['totalTokens'],
        'tokens_by_model': value['tokensByModel'],
        'tokens_by_provider': value['tokensByProvider'],
        'total_cost': value['totalCost'],
        'cost_by_model': value['costByModel'],
        'cost_by_provider': value['costByProvider'],
        'daily_usage': value['dailyUsage'],
        'daily_cost': value['dailyCost'],
        'avg_response_time': value['avgResponseTime'],
        'response_times_by_model': value['responseTimesByModel'],
        'active_days': value['activeDays'],
        'peak_usage_hour': value['peakUsageHour'],
        'conversations_per_day': value['conversationsPerDay'],
    };
}

