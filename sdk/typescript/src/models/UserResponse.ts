/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for user response.
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * User email address
     * @type {string}
     * @memberof UserResponse
     */
    email: string;
    /**
     * Username
     * @type {string}
     * @memberof UserResponse
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    fullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    bio?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    avatarUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    phoneNumber?: string | null;
    /**
     * User ID
     * @type {string}
     * @memberof UserResponse
     */
    id: string;
    /**
     * Is user active
     * @type {boolean}
     * @memberof UserResponse
     */
    isActive: boolean;
    /**
     * Is user email verified
     * @type {boolean}
     * @memberof UserResponse
     */
    isVerified: boolean;
    /**
     * Is user a superuser
     * @type {boolean}
     * @memberof UserResponse
     */
    isSuperuser: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    defaultLlmProvider?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    defaultProfileId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    dailyMessageLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    monthlyMessageLimit?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    maxFileSizeMb?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    apiKeyName?: string | null;
    /**
     * Account creation date
     * @type {Date}
     * @memberof UserResponse
     */
    createdAt: Date;
    /**
     * Last update date
     * @type {Date}
     * @memberof UserResponse
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserResponse
     */
    lastLoginAt?: Date | null;
}

/**
 * Check if a given object implements the UserResponse interface.
 */
export function instanceOfUserResponse(value: object): value is UserResponse {
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('username' in value) || value['username'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('isVerified' in value) || value['isVerified'] === undefined) return false;
    if (!('isSuperuser' in value) || value['isSuperuser'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function UserResponseFromJSON(json: any): UserResponse {
    return UserResponseFromJSONTyped(json, false);
}

export function UserResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'email': json['email'],
        'username': json['username'],
        'fullName': json['full_name'] == null ? undefined : json['full_name'],
        'bio': json['bio'] == null ? undefined : json['bio'],
        'avatarUrl': json['avatar_url'] == null ? undefined : json['avatar_url'],
        'phoneNumber': json['phone_number'] == null ? undefined : json['phone_number'],
        'id': json['id'],
        'isActive': json['is_active'],
        'isVerified': json['is_verified'],
        'isSuperuser': json['is_superuser'],
        'defaultLlmProvider': json['default_llm_provider'] == null ? undefined : json['default_llm_provider'],
        'defaultProfileId': json['default_profile_id'] == null ? undefined : json['default_profile_id'],
        'dailyMessageLimit': json['daily_message_limit'] == null ? undefined : json['daily_message_limit'],
        'monthlyMessageLimit': json['monthly_message_limit'] == null ? undefined : json['monthly_message_limit'],
        'maxFileSizeMb': json['max_file_size_mb'] == null ? undefined : json['max_file_size_mb'],
        'apiKeyName': json['api_key_name'] == null ? undefined : json['api_key_name'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'lastLoginAt': json['last_login_at'] == null ? undefined : (new Date(json['last_login_at'])),
    };
}

export function UserResponseToJSON(json: any): UserResponse {
    return UserResponseToJSONTyped(json, false);
}

export function UserResponseToJSONTyped(value?: UserResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'email': value['email'],
        'username': value['username'],
        'full_name': value['fullName'],
        'bio': value['bio'],
        'avatar_url': value['avatarUrl'],
        'phone_number': value['phoneNumber'],
        'id': value['id'],
        'is_active': value['isActive'],
        'is_verified': value['isVerified'],
        'is_superuser': value['isSuperuser'],
        'default_llm_provider': value['defaultLlmProvider'],
        'default_profile_id': value['defaultProfileId'],
        'daily_message_limit': value['dailyMessageLimit'],
        'monthly_message_limit': value['monthlyMessageLimit'],
        'max_file_size_mb': value['maxFileSizeMb'],
        'api_key_name': value['apiKeyName'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'last_login_at': value['lastLoginAt'] === null ? null : ((value['lastLoginAt'] as any)?.toISOString()),
    };
}

