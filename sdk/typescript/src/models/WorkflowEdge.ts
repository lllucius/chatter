/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkflowEdgeData } from './WorkflowEdgeData';
import {
    WorkflowEdgeDataFromJSON,
    WorkflowEdgeDataFromJSONTyped,
    WorkflowEdgeDataToJSON,
    WorkflowEdgeDataToJSONTyped,
} from './WorkflowEdgeData';

/**
 * Schema for a workflow edge.
 * @export
 * @interface WorkflowEdge
 */
export interface WorkflowEdge {
    /**
     * Unique edge identifier
     * @type {string}
     * @memberof WorkflowEdge
     */
    id: string;
    /**
     * Source node ID
     * @type {string}
     * @memberof WorkflowEdge
     */
    source: string;
    /**
     * Target node ID
     * @type {string}
     * @memberof WorkflowEdge
     */
    target: string;
    /**
     * 
     * @type {string}
     * @memberof WorkflowEdge
     */
    sourceHandle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkflowEdge
     */
    targetHandle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof WorkflowEdge
     */
    type?: string | null;
    /**
     * 
     * @type {WorkflowEdgeData}
     * @memberof WorkflowEdge
     */
    data?: WorkflowEdgeData | null;
}

/**
 * Check if a given object implements the WorkflowEdge interface.
 */
export function instanceOfWorkflowEdge(value: object): value is WorkflowEdge {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('target' in value) || value['target'] === undefined) return false;
    return true;
}

export function WorkflowEdgeFromJSON(json: any): WorkflowEdge {
    return WorkflowEdgeFromJSONTyped(json, false);
}

export function WorkflowEdgeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowEdge {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'source': json['source'],
        'target': json['target'],
        'sourceHandle': json['sourceHandle'] == null ? undefined : json['sourceHandle'],
        'targetHandle': json['targetHandle'] == null ? undefined : json['targetHandle'],
        'type': json['type'] == null ? undefined : json['type'],
        'data': json['data'] == null ? undefined : WorkflowEdgeDataFromJSON(json['data']),
    };
}

export function WorkflowEdgeToJSON(json: any): WorkflowEdge {
    return WorkflowEdgeToJSONTyped(json, false);
}

export function WorkflowEdgeToJSONTyped(value?: WorkflowEdge | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'source': value['source'],
        'target': value['target'],
        'sourceHandle': value['sourceHandle'],
        'targetHandle': value['targetHandle'],
        'type': value['type'],
        'data': WorkflowEdgeDataToJSON(value['data']),
    };
}

