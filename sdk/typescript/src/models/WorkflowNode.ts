/* tslint:disable */
/* eslint-disable */
/**
 * Chatter API
 * Advanced AI Chatbot Backend API Platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WorkflowNodeData } from './WorkflowNodeData';
import {
    WorkflowNodeDataFromJSON,
    WorkflowNodeDataFromJSONTyped,
    WorkflowNodeDataToJSON,
    WorkflowNodeDataToJSONTyped,
} from './WorkflowNodeData';

/**
 * Schema for a workflow node.
 * @export
 * @interface WorkflowNode
 */
export interface WorkflowNode {
    /**
     * Unique node identifier
     * @type {string}
     * @memberof WorkflowNode
     */
    id: string;
    /**
     * Node type
     * @type {string}
     * @memberof WorkflowNode
     */
    type: string;
    /**
     * Node position (x, y)
     * @type {{ [key: string]: number; }}
     * @memberof WorkflowNode
     */
    position: { [key: string]: number; };
    /**
     * 
     * @type {WorkflowNodeData}
     * @memberof WorkflowNode
     */
    data: WorkflowNodeData;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowNode
     */
    selected?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof WorkflowNode
     */
    dragging?: boolean | null;
}

/**
 * Check if a given object implements the WorkflowNode interface.
 */
export function instanceOfWorkflowNode(value: object): value is WorkflowNode {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('position' in value) || value['position'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function WorkflowNodeFromJSON(json: any): WorkflowNode {
    return WorkflowNodeFromJSONTyped(json, false);
}

export function WorkflowNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkflowNode {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'position': json['position'],
        'data': WorkflowNodeDataFromJSON(json['data']),
        'selected': json['selected'] == null ? undefined : json['selected'],
        'dragging': json['dragging'] == null ? undefined : json['dragging'],
    };
}

export function WorkflowNodeToJSON(json: any): WorkflowNode {
    return WorkflowNodeToJSONTyped(json, false);
}

export function WorkflowNodeToJSONTyped(value?: WorkflowNode | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'type': value['type'],
        'position': value['position'],
        'data': WorkflowNodeDataToJSON(value['data']),
        'selected': value['selected'],
        'dragging': value['dragging'],
    };
}

